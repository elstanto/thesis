Imports Complex_Number_Class
Imports System.IO
Imports System.Runtime.Serialization.Formatters.Binary
Imports Agilent.SA.Vsa
Imports System.Collections.ObjectModel
Imports Microsoft.VisualBasic.FileIO

Public Module PostProcessorModule
    Dim vsaApp As Agilent.SA.Vsa.Application = Nothing

    ''' <summary>
    ''' Modify when adding new post processor.
    ''' Gets the appropriate model based on the ModelGroup and ModelType SelectedIndex
    ''' </summary>
    ''' <param name="Doc">XmlDocument for the model</param>
    ''' <param name="DLLPath">Path to the user-defined dll</param>
    ''' <returns>The link to the model</returns>
    ''' <remarks>Must keep this in agreement with the ModelGroup and ModelType in subroutine ModelGroupSetup in PostProcessor.vb </remarks>
    Public Function myPostProcessorModel(ByVal Doc As XmlDocument, ByVal DLLPath As String) As Object

        'Get the root element and node of the menu.
        Dim RootElement As XmlElement = Doc.DocumentElement
        Dim RootNode As XmlNode = Doc.DocumentElement

        'Get the model group. There should only be one.
        Dim elem As XmlElement = RootNode.SelectSingleNode("/PostProcessor/Controls/ModelGroup")
        Dim ValueString As String = elem.GetAttribute("SelectedIndex")
        Dim ModelGroupSelectedIndex As Integer = Val(ValueString)

        'Get the model orgin. There should only be one.
        elem = RootNode.SelectSingleNode("/PostProcessor/Controls/ModelOrigin")
        ValueString = elem.GetAttribute("SelectedIndex")
        Dim ModelOriginSelectedIndex As Integer = Val(ValueString)

        'Get the model type. There should only be one.
        elem = RootNode.SelectSingleNode("/PostProcessor/Controls/ModelType")
        ValueString = elem.GetAttribute("SelectedIndex")
        Dim ModelTypeSelectedIndex As Integer = Val(ValueString)

        'We will overwrite this. But it prevents compiler warnings that all paths may not set myModel
        myPostProcessorModel = New Post_Dummy

        Select Case ModelGroupSelectedIndex
            Case 0  'VNA measurements
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'Fit measured data with a model.
                                myPostProcessorModel = New Post_FitMeasuredData
                            Case 1  'Add uncertainties to calibrated data
                                myPostProcessorModel = New Post_AddUncertainties
                            Case 2  'Calibration Comparison
                                myPostProcessorModel = New Post_CalibrationComparison
                            Case 3  'Scattering-parameter errors
                                myPostProcessorModel = New Post_SParamErrors
                            Case 4  'Post_ConvertToErrorBox
                                myPostProcessorModel = New Post_ConvertToErrorBox
                            Case 5  'Post_AddUncertainties_Switch
                                myPostProcessorModel = New Post_AddUncertainties_Switch
                            Case 6  'Post_Interpolate
                                myPostProcessorModel = New Post_Interpolate
                            Case 7  'Post_AdjustCouplingCoef
                                myPostProcessorModel = New Post_AdjustCouplingCoef
                            Case 8  'Post_TranslateOnePortNISTsparams
                                myPostProcessorModel = New Post_TranslateOnePortNISTsparams
                            Case 9  'Post_TranslateTwoPortNISTsparams
                                myPostProcessorModel = New Post_TranslateTwoPortNISTsparams
                            Case 10 'Post_RWBImpedanceNormalization
                                myPostProcessorModel = New Post_RWBImpedanceNormalization
                            Case 11 'Post_RWBImpedanceNormalization_withEpsEff
                                myPostProcessorModel = New Post_RWBImpedanceNormalization_withEpsEff
                            Case 12 'Post_IBM_Open_Short
                                myPostProcessorModel = New Post_IBM_Open_Short
                            Case 13 'Post_Sorin_TLineDeembed
                                myPostProcessorModel = New Post_Sorin_TLineDeembed
                            Case 14 'Post_Run_ICCAP
                                myPostProcessorModel = New Post_Run_ICCAP
                            Case 15 'Post_FitMeasuredDataBetter
                                myPostProcessorModel = New Post_FitMeasuredDataBetter
                            Case 16 'Post_Run_ADS_Deembed
                                myPostProcessorModel = New Post_Run_ADS_Deembed
                            Case 17 'Post_Run_ADS_Improved
                                myPostProcessorModel = New Post_Run_ADS_Improved
                            Case 18 'Post_Extract_w1p_from_wnp
                                myPostProcessorModel = New Post_Extract_w1p_from_wnp
                            Case 19 'Post_Extract_w1p_from_wnp
                                myPostProcessorModel = New Post_WnP_To_SnP_Improved
                            Case 20 'Post_CapacitanceFit
                                myPostProcessorModel = New Post_CapacitanceFit
                            Case 21 'Post_Merge2S2Ps
                                myPostProcessorModel = New Post_Merge2S2Ps
                            Case 22   'Post_Cascade_S4Ps
                                myPostProcessorModel = New Post_Cascade_S4Ps
                            Case 23  'Post_ImpedanceNormalization
                                myPostProcessorModel = New Post_ImpedanceNormalization
                            Case 24 'Post_ExtractXPwithPNAX
                                myPostProcessorModel = New Post_ExtractXPwithPNAX
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                End Select
            Case 1  'Adapter removal
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'NIST Adapter Removal
                                myPostProcessorModel = New Post_AdapterRemoval
                            Case 1
                                myPostProcessorModel = New Post_AdapterRemoval_BP
                            Case 2
                                myPostProcessorModel = New Post_AdapterRemoval_STD
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                    Case Else
                        MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                End Select
            Case 2  'Material characterization
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'Post_EpsilonRfomCPW_Uwe
                                myPostProcessorModel = New Post_EpsilonRfomCPW_Uwe
                            Case 1 'Post_TanD_From_Epsilon
                                myPostProcessorModel = New Post_TanD_From_Epsilon
                            Case 2  'Estimate the dielectric constant of fluid in a channel Post_MUT_Song
                                myPostProcessorModel = New Post_MUT_Song
                            Case 3  'Estimate RLGC of fluid in a channel Post_MUT_Nate
                                myPostProcessorModel = New Post_MUT_Nate
                            Case 4  'Post_TxLineParams_from_CPW
                                myPostProcessorModel = New Post_TxLineParams_from_CPW
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                    Case Else
                        MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                End Select
            Case 3  'Power measurements
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'Post_FindS21FromPowers
                                myPostProcessorModel = New Post_FindS21FromPowers
                            Case 1 'Post_TranslateNISTpower
                                myPostProcessorModel = New Post_TranslateNISTpower
                            Case 2  'Post_PowerDirectComparison
                                myPostProcessorModel = New Post_PowerDirectComparison
                            Case 3  'Post_PowerMeterErrors
                                myPostProcessorModel = New Post_PowerDirectComparisonSystem
                            Case 4  'Post_PowerEff
                                myPostProcessorModel = New Post_PowerEff
                            Case 5  'Post_PowerNType
                                myPostProcessorModel = New Post_PowerNType
                            Case 6  'Post_PowerEffRWG
                                myPostProcessorModel = New Post_PowerEffRWG
                            Case 7  'Post_PowerMeterErrors
                                myPostProcessorModel = New Post_PowerMeterErrors
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                    Case Else
                        MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                End Select
            Case 4  'Noise measurements
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'Post_AddNoise
                                myPostProcessorModel = New Post_AddNoise
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                    Case Else
                        MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                End Select
            Case 5  'Scope measurements
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'Post_SourceCalibratesReceiver
                                myPostProcessorModel = New Post_SourceCalibratesReceiver
                            Case 1  'Post_ReceiverCalibratesSource
                                myPostProcessorModel = New Post_ReceiverCalibratesSource
                            Case 2  'Post_FrequencyToTime
                                myPostProcessorModel = New Post_FrequencyToTime
                            Case 3  'Post_TimeToFrequency
                                myPostProcessorModel = New Post_TimeToFrequency
                            Case 4  'Post_EOSPowerNormalization
                                myPostProcessorModel = New Post_EOSPowerNormalization
                            Case 5  'Post_FrequencyToTime_FFT
                                myPostProcessorModel = New Post_FrequencyToTime_FFT
                            Case 6  'Post_TimeToFrequency_FFT
                                myPostProcessorModel = New Post_TimeToFrequency_FFT
                            Case 7  'Post_SourceReceiverAdapterAddition
                                myPostProcessorModel = New Post_SourceReceiverAdapterAddition
                            Case 8  'Post_SourceCalibratesReceiver_withAutoCor
                                myPostProcessorModel = New Post_SourceCalibratesReceiver_withAutoCor
                            Case 9  'Post_AgilentVSA_EVM
                                myPostProcessorModel = New Post_AgilentVSA_EVM
                            Case 10 'Post_TektronixFit
                                myPostProcessorModel = New Post_TektronixFit
                            Case 11 'Post_EOS
                                myPostProcessorModel = New Post_EOS
                            Case 12 'Post_NIST_EVM
                                myPostProcessorModel = New Post_NIST_EVM
                            Case 13 'Post_Modulated_Signal_Generator
                                myPostProcessorModel = New Post_Modulated_Signal_Generator
                            Case 14 'Post_HeterodyneMismatchCorrection
                                myPostProcessorModel = New Post_HeterodyneMismatchCorrection
                            Case 15 'Post_PulseParameters
                                myPostProcessorModel = New Post_PulseParameters
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                    Case Else
                        MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                End Select
            Case 6  'Antenna measurements
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'Normalize powers
                                myPostProcessorModel = New Post_NormalizedPowers
                            Case 1  'Post_FrequencyToTimePathDelayProfile
                                myPostProcessorModel = New Post_IFFT_TimeDelayProfile
                            Case 2 'Post_FFT_TimeDelayProfile
                                myPostProcessorModel = New Post_FFT_TimeDelayProfile
                            Case 3  'Post_PairGain
                                myPostProcessorModel = New Post_PairGain
                            Case 4  'Post_PDP
                                myPostProcessorModel = New Post_PDP
                            Case 5  'Post_AddUncertaintiesToReverb
                                myPostProcessorModel = New Post_AddUncertaintiesToReverb
                            Case 6  'Post_PDP_TemporalInput
                                myPostProcessorModel = New Post_PDP_TemporalInput
                            Case 7 'Post_ThreeAntennaMethod_Gain
                                myPostProcessorModel = New Post_ThreeAntennaMethod_Gain
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                    Case Else
                        MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                End Select

            Case 7  'Generic
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'NIST This is the only origin catagory, but we could expand later if we change our mind.
                        Select Case ModelTypeSelectedIndex
                            Case 0  'Fit measured data with a model.
                                myPostProcessorModel = New Post_FitMeasuredData
                            Case 1  'Post_Interpolate
                                myPostProcessorModel = New Post_Interpolate
                            Case 2  'Post_CombineFilesWithFrequencyBreakpoint
                                myPostProcessorModel = New Post_CombineFilesWithFrequencyBreakpoint
                            Case 3  'Post_FitMeasuredDataBetter
                                myPostProcessorModel = New Post_FitMeasuredDataBetter
                            Case 4  'Post_MatLab
                                myPostProcessorModel = New Post_MatLab
                            Case 5  'Post_Difference
                                myPostProcessorModel = New Post_Difference
                            Case 6  'Post_Z0Gamma
                                myPostProcessorModel = New Post_Z0Gamma
                            Case 7  'Post_RLGC
                                myPostProcessorModel = New Post_RLGC
                            Case 8  'Post_AddNewErrors
                                myPostProcessorModel = New Post_AddNewErrors
                            Case 9  'Post_BuildMatrix
                                myPostProcessorModel = New Post_BuildMatrix
                            Case 10 'Post_LinearFit
                                myPostProcessorModel = New Post_LinearFit
                            Case 11 'Post_wnp_to_vi
                                myPostProcessorModel = New Post_wnp_to_vi
                            Case 12 'Post_vi_to_w1p
                                myPostProcessorModel = New Post_vi_to_w1p
                            Case 13 'Post_MatLab_Improved
                                myPostProcessorModel = New Post_MatLab_Improved
                            Case 14 'Post_MatLab_Improved
                                myPostProcessorModel = New Post_MatLab_Improved1
                            Case 15 'Post_RWBImpedance_withEpsEff
                                myPostProcessorModel = New Post_RWBImpedance_withEpsEff
                            Case 16 'Post_ReadMDIF
                                myPostProcessorModel = New Post_ReadMDIF
                            Case Else
                                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                        End Select
                End Select
            Case 8  'User model
                Select Case ModelOriginSelectedIndex
                    Case 0, -1  'User This is the only origin catagory, but we could expand later if we change our mind.
                        Dim obj As Object = CustomFormControls.MenuModule.GetObjectInDLL("UserDLL.UserDLL_Post" + (ModelTypeSelectedIndex + 1).ToString, DLLPath)
                        myPostProcessorModel = obj
                    Case Else
                        MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
                End Select
            Case Else
                MsgBox("Internal error: Model group " + ModelGroupSelectedIndex.ToString + " Model orgin: " + ModelOriginSelectedIndex.ToString + " Model type: " + ModelTypeSelectedIndex.ToString + " does not exist!", MsgBoxStyle.Exclamation, "Model-type selection error")
        End Select

    End Function



    ''' <summary>
    ''' A useful function for taking a real matrix output and putting it into the array format needed for the MUF
    ''' </summary>
    ''' <param name="InputMatrix">The input real matrix</param>
    ''' <returns>A one-element array of real matrices that MUF expects from the prost processors</returns>
    ''' <remarks></remarks>
    Private Function ToArray(ByRef InputMatrix As Object) As Object()
        Dim OutputMatrix(0) As Object
        OutputMatrix(0) = InputMatrix
        Return OutputMatrix
    End Function


    ''' <summary>
    ''' Post dummy processor
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Dummy
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myDistributionLimits() As Double
        Private myAllowForceNewValues() As Boolean
        Private myForceNewValues() As Boolean
        Private myNewValues() As Double
        Private myModel As Object
        Private myFirstTime As Boolean = True
        Private myMechanismListModel As MechanismList
        Private myForcedValuesCount As Integer = 0
        Private myX() As Double 'Has the values of X from the first time around
        Private myXDistLimit() As Double 'Has the range of X values from the 
        Private myScales() As Double 'Has the scale factors for X from the nominal values of X and the Distribution limits of X
        Private myRealMatrix0 As RealMatrix 'The measurements.
        Private mMax As Integer             'The maximum index that we fit to.
        Private mMin As Integer             'The maximum index that we replace to.

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(2) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Center frequency for fit (GHz, .parameter)"    '
                myNameList(1) = "Bandwidth for fit (GHz, .parameter)"    '
                myNameList(2) = "Response function (.complex)"    '
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter" : FileExtensions(4) = ".sumofparameters"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Normalize magnitude at center frequency"
                PullDownList(1) = "Normalize power over fit bandwidth"
                PullDownList(2) = "Normalize magnitude over fit bandwidth"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing 'Set the frequency over which the fit is performed
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "No post processors are available in this catagory."
                myDescription(2) = "This is a dummy post processor to prevent errors only."
                myDescription(4) = ""
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Dummy post processor"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            myRealMatrix0 = MechValues(2).getSParams(MechanismList1)

            'Get start and stop frequencies
            Dim CF As Double = MechValues(0).MechanismValue(MechanismList1) 'Center frequency for fit
            Dim BW As Double = MechValues(1).MechanismValue(MechanismList1)  'Bandwidth for the fit

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 3 Then MechanismList1.ErrorReport = "The first input to the Tektronix Fit Post Processor was not a response function" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function

            'Set up variables
            Dim xmag As New RealMatrix(myRealMatrix0.NRows), xph As New RealMatrix(myRealMatrix0.NRows), Freq As New RealMatrix(myRealMatrix0.NRows)
            Dim xtmp As New Complex(0.0, 0.0), OutputMatrix As New RealMatrix(myRealMatrix0.NRows, 3, ".complex")
            Freq = myRealMatrix0.Vector(1)

            '% find index that corresponds to CF and band edges
            'jCF = findindex(freq, CF)  % use your favorite method.
            'jBL = findindex(freq, CF - BW/2)
            'jBH = findindex(freq, CF + BW/2)
            Dim jCF As Integer = 0, jBL As Integer = 0, jBH As Integer = 0
            For k As Integer = 1 To myRealMatrix0.NRows
                If Freq(k) <= CF Then jCF = k
                If Freq(k) <= CF - BW / 2.0 Then jBL = k
                If Freq(k) <= CF + BW / 2.0 Then jBH = k
            Next k
            'Check the input to see if we have enough points for a fit.
            If jBH - jBL < 2 Then MechanismList1.ErrorReport = "Not enough points to fit phase" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function


            '%offset mag data
            For k As Integer = 1 To myRealMatrix0.NRows
                xtmp = toComplex(myRealMatrix0(k, 2), myRealMatrix0(k, 3))
                xmag(k) = Abs(xtmp)
                xph(k) = Arg(xtmp)    'or Phase
            Next k

            '% use any unwrap algorithm you like.  Since we will be later curve fitting, it is not important where 0deg is defined, 
            'only that we get rid of the 2pi jumps.  I’ve snipped a C-code unwrap for reference at the end (which I have not tried).
            xph = UnWrap(xph)


            '% Least-Square curve-fit phase data and average magnitudes
            Dim MagCenter As Double = Math.Sqrt(myRealMatrix0(jCF, 2) * myRealMatrix0(jCF, 2) + myRealMatrix0(jCF, 3) * myRealMatrix0(jCF, 3))
            Dim MagAvg As Double = 0.0, PowAvg As Double = 0.0
            '% compute sums
            Dim len As Double = jBH - jBL + 1  '%number of points in the fit
            Dim sumx As Double = 0.0, sumy As Double = 0.0, sumxx As Double = 0.0, sumxy As Double = 0.0
            For k As Integer = jBL To jBH
                sumx = sumx + Freq(k)
                sumy = sumy + xph(k)
                sumxx = sumxx + Freq(k) * Freq(k)
                sumxy = sumxy + Freq(k) * xph(k)
                PowAvg = PowAvg + myRealMatrix0(k, 2) * myRealMatrix0(k, 2) + myRealMatrix0(k, 3) * myRealMatrix0(k, 3)
                MagAvg = MagAvg + Math.Sqrt(myRealMatrix0(k, 2) * myRealMatrix0(k, 2) + myRealMatrix0(k, 3) * myRealMatrix0(k, 3))
            Next k
            PowAvg = Math.Sqrt(PowAvg / len)
            MagAvg = MagAvg / len

            '% compute phase reference line y = m*x + b
            Dim m As Double = (len * sumxy - sumx * sumy) / (len * sumxx - sumx * sumx)
            Dim b As Double = (sumy - m * sumx) / len

            'Get everything back to real/imaginary
            For k As Integer = 1 To myRealMatrix0.NRows
                xph(k) = xph(k) - (m * Freq(k) + b) '% offset and unslope phase
                Select Case myPullDownSelection1
                    Case 0  'Center frequency averaging
                        xmag(k) = xmag(k) / MagCenter
                    Case 1  'Power average over fit bandwidth
                        xmag(k) = xmag(k) / PowAvg
                    Case 2  'Magnitude average over fit bandwidth
                        xmag(k) = xmag(k) / MagAvg
                End Select
                OutputMatrix(k, 1) = Freq(k)
                OutputMatrix(k, 2) = xmag(k) * Math.Cos(xph(k))
                OutputMatrix(k, 3) = xmag(k) * Math.Sin(xph(k))
            Next k

            'That's all folks! 
            Return ToArray(OutputMatrix)

        End Function


    End Class







    ''' <summary>
    ''' Post processor for testing .mdif file handling.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_ReadMDIF
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "MDIF File (.mdif)"    'The input .mdif file
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".mdif" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".mdf"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Get matrix from first block"
                PullDownList(1) = "Get matrix from second block"
                PullDownList(2) = "Get matrix from third block"
                PullDownList(3) = "Get matrix from fourth block"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor tests reading in an MDIF file."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, .s4p, .mdif, .xnp, etc.
        ''' If you plan to return .mdif or .xnp, you have to let the caller know here.
        ''' Otherwise the caller may try to save binary versions!
        ''' 
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".mdif"  'Essential to let the caller know this, or the caller may try to save binary versions!
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Test MDIF files and classes."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()



            ''Test our MDIF code
            'Dim MDIF1 As New MDIF()
            'Call MDIF1.Read("C:\Data\MDIFtest.txt")
            'Dim TempMatrix As RealMatrix = MDIF1.GetRealMatrix(0)
            'Dim VARs As New HPList("NewVARs")
            'Dim Attributes As New HPList("NewAttributes")

            'Dim SPar As New RealMatrix(2, 1 + 2 * 2 * 4 * 4, ".w4p")
            'SPar(1, 1) = 1.1 : SPar(2, 1) = 2.1
            'MDIF1.AddBlock("NewBlock", VARs, Attributes, SPar)
            'Dim SParR As RealMatrix = MDIF1.GetRealMatrix("NewBlock")

            'Dim SPar1 As New RealMatrix(2, 3, ".waveform")
            'SPar1(1, 1) = 1.1 : SPar1(2, 1) = 2.1
            'MDIF1.AddBlock("NewBlock1", VARs, Attributes, SPar1)
            'Dim SParR1 As RealMatrix = MDIF1.GetRealMatrix("NewBlock1")

            'Dim SPar2 As New RealMatrix(2, 3, ".power")
            'SPar2(1, 1) = 1.1 : SPar2(2, 1) = 2.1
            'MDIF1.AddBlock("NewBlock2", VARs, Attributes, SPar2)
            'Dim SParR2 As RealMatrix = MDIF1.GetRealMatrix("NewBlock2")

            'Dim SPar3 As New RealMatrix(2, 3, ".voltage")
            'SPar3(1, 1) = 1.1 : SPar3(2, 1) = 2.1
            'MDIF1.AddBlock("NewBlock3", VARs, Attributes, SPar3)
            'Dim SParR3 As RealMatrix = MDIF1.GetRealMatrix("NewBlock3")

            'Dim SPar4 As New RealMatrix(2, 3, ".current")
            'SPar4(1, 1) = 1.1 : SPar4(2, 1) = 2.1
            'MDIF1.AddBlock("NewBlock4", VARs, Attributes, SPar4)
            'Dim SParR14 As RealMatrix = MDIF1.GetRealMatrix("NewBlock4")

            'Dim SPar5 As New RealMatrix(2, 3, ".variables")
            'SPar5(1, 1) = 1.1 : SPar5(2, 1) = 2.1
            'MDIF1.AddBlock("NewBlock5", VARs, Attributes, SPar5)
            'Dim SParR5 As RealMatrix = MDIF1.GetRealMatrix("NewBlock5")

            'Dim SPar6 As New RealMatrix(2, 3, ".s1p")
            'SPar6(1, 1) = 1.1 : SPar6(2, 1) = 2.1
            'MDIF1.AddBlock("NewBlock6", VARs, Attributes, SPar6)
            'Dim SParR6 As RealMatrix = MDIF1.GetRealMatrix("NewBlock6")

            'Call MDIF1.Write("C:\Data\MDIFtestWritten.mdif")

            'Dim MDIF2 As New MDIF
            'MDIF2.Read("C:\Data\MDIFtestWritten.m dif")
            'MDIF2.Read("C:\Data\MDIFtestWritten.mdif")
            'Dim SParRR As RealMatrix = MDIF2.GetRealMatrix("NewBlock1")


            'Test our .xnp code
            Dim MDIF1 As New MDIF()
            'Call MDIF1.Read("C:\Data\UncertDemo\XNP Test\xnp_in.xnp")
            Call MDIF1.Read("C:\Data\UncertDemo\XNP Test\XPs.xnp")
            Call MDIF1.Write("C:\Data\UncertDemo\XNP Test\xnp_out.xnp")



            'Get the imput real matrices. Here we have two sets of input sparameters.
            Dim myMDIF As MDIF
            myMDIF = MechValues(0).getMDIF()

            'Let's try a sweep and see if we can get X-parameters. 
            Dim SweepVarNames(2) As String  'Don't sweep over the ticklers
            SweepVarNames(0) = "ssport"
            SweepVarNames(1) = "ssfreq"
            SweepVarNames(2) = "ssphase"
            Dim NSweepGroups As Integer = myMDIF.ConfigureSweep(SweepVarNames, True)

            'Now run throught the sweep groups.
            If NSweepGroups > 0 Then    'We have some swept data here. Let's get ready to step through the sweeps.

                For iSweep As Integer = 0 To NSweepGroups - 1     'Step through the sweeps, creating an X-Parameter file from the measurements in each one.

                    'This is the iSweep'th sweep point of NSweepGroups.
                    Dim BlkList() As Integer = myMDIF.getSweepBlockList(iSweep)

                    'Get the number i_num of A_ideal and populate i_list
                    Dim ThisHPMatrix0 As HPMatrix, ThisRealMatrix0 As RealMatrix
                    ThisHPMatrix0 = myMDIF.BlockMatrix(BlkList(0))
                    ThisRealMatrix0 = ThisHPMatrix0.CreateRealMatrix
                    Dim i_num As Integer = ThisRealMatrix0.NRows * ThisRealMatrix0.NPorts
                    Dim i_list(i_num - 1, 1) As Integer
                    For kport As Integer = 1 To ThisRealMatrix0.NPorts
                        For kfreq As Integer = 1 To ThisRealMatrix0.NRows
                            i_list((kport - 1) * ThisRealMatrix0.NRows + kfreq - 1, 0) = kport
                            i_list((kport - 1) * ThisRealMatrix0.NRows + kfreq - 1, 1) = kfreq
                        Next kfreq
                    Next kport

                    'Set up A_ideal. 
                    Dim A_ideal As New ComplexMatrix(i_num)         'Start by defining the array of A_ideal operating points
                    Dim A_ideal_freq(i_num - 1) As Double           'Keep track of the A_ideal frequencies
                    Dim A_ideal_has_tickler(i_num - 1) As Boolean   'Also keep track of which have ticklers

                    For i_index As Integer = 0 To i_num - 1     'Loop through the i_index
                        Dim i_port As Integer = i_list(i_index, 0), i_freq As Integer = i_list(i_index, 1)

                        'Now look through all of the blocks in BlkList to find the large-signal operating point we put in A_ideal
                        For xBlk As Integer = 0 To BlkList.Length - 1   'Step through the wave-parameter measurements for this point in the sweep

                            'Get the VARs and real matrix
                            Dim ThisHPMatrix As HPMatrix, ThisRealMatrix As RealMatrix, ThisBlockVARs As HPList
                            ThisBlockVARs = myMDIF.BlockVARs(BlkList(xBlk))
                            ThisHPMatrix = myMDIF.BlockMatrix(BlkList(xBlk))
                            ThisRealMatrix = ThisHPMatrix.CreateRealMatrix

                            'Get the nominal values of A_ideal.
                            If xBlk = 0 Then    'Also need to insist on the contition that the tickler is off. For the moment, assume that this is the first one

                                'TRead in the actual large-signal operating point A as a function of the port and frequency. This is the default value of A_ideal if there is no tickler for this i_index.
                                A_ideal(i_index + 1) = toComplex(ThisRealMatrix(i_freq, 2 * i_port), ThisRealMatrix(i_freq, 2 * i_port + 1))    'This is the measured value
                                A_ideal_freq(i_index) = ThisRealMatrix(i_freq, 1)

                            End If

                            'Now look through all of the blocks in BlkList to see if this i_index has a tickler tone.
                            'If we have a tickler tone, we can use the ideal value of A_ideal instead of the measured value.
                            'We have a tickler tone at i_index if there is a block with ssport=i_port, ssfreq is this frequency, and ssphase > 1 ???
                            Dim str As String = "ssport"
                            Dim A_ideal_idx As Integer = ThisBlockVARs.GetIndex(str)
                            If A_ideal_idx >= 0 Then        'We have found an a tickler at port ssport.
                                Dim ThisPort As Integer = ThisBlockVARs.GetValueDouble(str)
                                If i_port = ThisPort Then   'OK. Lets see if the frequency matches.
                                    str = "ssfreq"
                                    A_ideal_idx = ThisBlockVARs.GetIndex(str)
                                    If A_ideal_idx >= 0 Then        'Let's see if the frequency is right.
                                        Dim ThisFreq As Double = ThisBlockVARs.GetValueDouble(str)
                                        If A_ideal_freq(i_index) = ThisFreq Then   'OK. We have found a tickler at this frequency and port.

                                            'We have found a tickler at this frequency and port. Set the flag and A_ideal to its ideal value.
                                            A_ideal_has_tickler(i_index) = True

                                            'Now we should also set A_ideal to its ideal value if we can figure out how that is done!
                                            'WE STILL NEED TO UNDERSTAND WHERE THE A_ideal COME FROM. IT SEEMS THAT SIMPLY USING MEASURED VALUES IS NOT CORRECT.
                                            'WOULD IT MAKE SENSE TO PUT IN OUT OWN IF THIS IS SOMETHING THAT AGILENT DOES TO PROTECT THIER PROPRIETARY APPROACH?

                                        End If
                                    End If
                                End If
                            End If

                        Next xBlk
                    Next i_index

                    'Count the number of ports and frequencies with tickler tones.
                    Dim j_num As Integer = 0
                    For i_index As Integer = 0 To i_num - 1     'Loop through the i_index
                        If A_ideal_has_tickler(i_index) Then j_num += 1
                    Next i_index

                    'Make a list of the j's with ticklers from the i's
                    Dim i_indx_from_j_indx(j_num - 1) As Integer, j_now As Integer = 0
                    For i_index As Integer = 0 To i_num - 1     'Loop through the i_index
                        If A_ideal_has_tickler(i_index) Then
                            i_indx_from_j_indx(j_now) = i_index
                            j_now += 1
                        End If
                    Next i_index

                    'Create the beta matrix of the correct dimensions. This needs to be automated.
                    Dim Beta As New ComplexMatrix(BlkList.Length, 2 * j_num + 1), B_bar As New ComplexMatrix(BlkList.Length), s As New ComplexMatrix(2 * j_num + 1)

                    'Set up Beta and B_bar. Start with the i index
                    For i_index As Integer = 0 To i_num - 1
                        Dim i_port As Integer = i_list(i_index, 0), i_freq As Integer = i_list(i_index, 1)

                        'Now use all of the blocks in BlkList to create an X-Parameter file.
                        For xBlk As Integer = 0 To BlkList.Length - 1   'Step through the wave-parameter measurements for this point in the sweep

                            'Get the real matrix
                            Dim ThisHPMatrix As HPMatrix, ThisRealMatrix As RealMatrix
                            ThisHPMatrix = myMDIF.BlockMatrix(BlkList(xBlk))
                            ThisRealMatrix = ThisHPMatrix.CreateRealMatrix

                            'Fill Beta with [1 a_j1 a_j1* a_j2 a_j2* ...]
                            For j_index As Integer = 0 To j_num - 1
                                Dim j_port As Integer = i_list(i_indx_from_j_indx(j_index), 0), j_freq As Integer = i_list(i_indx_from_j_indx(j_index), 1)
                                Beta(xBlk + 1, 1) = toComplex(1.0, 0.0)
                                Beta(xBlk + 1, 2) = toComplex(ThisRealMatrix(j_freq, 2 * j_port), ThisRealMatrix(j_freq, 2 * j_port + 1)) - A_ideal(i_indx_from_j_indx(j_index) + 1)
                                Beta(xBlk + 1, 3) = Conj(Beta(xBlk + 1, 2))
                            Next j_index

                            'Fill B_bar with Bi
                            B_bar(xBlk + 1) = toComplex(ThisRealMatrix(i_freq, 2 * i_port + 2), ThisRealMatrix(i_freq, 2 * i_port + 3))

                        Next xBlk

                        'Solve for the X-parameters for all of the j's at the index i
                        'Result is [B_i, S(i,j_1), S'(i,j_1), S(i,j_2), S'(i,j_2), ...]
                        'We still need to bundle up the results in an output MDIF file.
                        s = ((ConjTranspose(Beta) * Beta) ^ -1) * (ConjTranspose(Beta) * B_bar)

                    Next i_index

                Next iSweep
            End If

            'We should be able to return two types of results, a RealMatrix or an MDIF.
            'Let's try both!

            'Dim myRealMatrixResult As RealMatrix
            'myRealMatrixResult = myMDIF.GetRealMatrix(myPullDownSelection1)

            Dim myRealMatrixResult As Object
            myRealMatrixResult = myMDIF

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class



    ''' <summary>
    ''' Post processor for adding uncertainties to calibrated reverberation-chamber data.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AddUncertaintiesToReverb
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myFirst As Boolean = True
        Private myReverbData() As RealMatrix

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "Reverb file folder"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Calibration matrix scattering-parameter (.meas)"    'Has 4x4 s-parameters of the second-tier calibrations matrices.
                myNameList(1) = "Calibration switch-terms (2-port S-parameter calibration only, .switch)"    'Has 4x4 s-parameters of the second-tier calibrations matrices.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'These are set up for 2 port problems
                Dim FileExtensions(4) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".switch" : FileExtensions(2) = ".s2p" : FileExtensions(3) = ".w2p" : FileExtensions(4) = ".s4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Two-Tier Interior Crosstalk Calibration Model"
                PullDownList(1) = "Conventional Calibration Model"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(5) As String
                PullDownList(0) = "Add uncertainties to calibrated data"
                PullDownList(1) = "Correct uncalibrated data and add uncertainties"
                PullDownList(2) = "Apply switch-terms to uncalibrated data, correct and add uncertainties"
                PullDownList(3) = "Uncorrect calibrated data and add uncertainties"
                PullDownList(4) = "Add uncertainties to uncalibrated data"
                PullDownList(5) = "Do not correct or add uncertainties"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Don't normalize phase of .wnp fundamentals to zero"
                'PullDownList(1) = "Normalize phase of .wnp fundamentals to zero"
                'PullDownList(2) = "Convert .wnp files to .snp files"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor adds uncertainties to corrected or uncorrected reverberation-chamber data. The reverberation-chamber data is selected by placing a search string of the form C:\data\*.s2p_binary in the text box."
                myDescription(2) = "The default freqeuncy list is determined from the calibration file. The frequency list must correspond to exactly the freqeuncy list of the reverberation-chamber data. The processor outputs the average S-parameters, the average of the square of the transmission terms, and the standard deviation of the S parameters."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Process reverberation-chamber data"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = -1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNames(2) As String
                myFileNames(0) = "\AvgS"
                myFileNames(1) = "\AvgTrans2"
                myFileNames(2) = "\StdS"
                Return myFileNames
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the input calibration
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)   'This is the switch terms

            'Get the file names for the reverberation chamber measurements and read them in
            If myFirst Then '2-port data in, 4x4 calibration matrix
                If myRealMatrix0.NPorts <> 4 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The calibration file was not a .s4p file" : Return ToArray(myRealMatrix1)
                If InStrRev(myTextBoxContents, "\") < 2 Or InStrRev(myTextBoxContents, "\") > myTextBoxContents.Length - 1 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The search string must be of the form C:\data\*.s2p_binary" : Return ToArray(myRealMatrix1)
                Dim DirectoryText As String = Left(myTextBoxContents, InStrRev(myTextBoxContents, "\") - 1) 'Parse the search string from the user
                Dim SearchText As String = Mid(myTextBoxContents, InStrRev(myTextBoxContents, "\") + 1)
                Dim myReverbFiles As ReadOnlyCollection(Of String)
                myReverbFiles = My.Computer.FileSystem.GetFiles(DirectoryText, FileIO.SearchOption.SearchTopLevelOnly, SearchText)  'Get the file names for the reverb measurements
                If myReverbFiles.Count < 4 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Not enough reverberation data files found" : Return ToArray(myRealMatrix1)
                ReDim myReverbData(myReverbFiles.Count - 1)
                'Read in the reverb measurements
                Dim Indx As Integer = 0
                For Each filename As String In myReverbFiles
                    myReverbData(Indx) = New RealMatrix(1)
                    myReverbData(Indx).Read(filename)
                    If myReverbData(Indx).NPorts <> 2 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The reverberation data file was not a .s2p file" : Return ToArray(myRealMatrix1)
                    Indx += 1
                Next filename
                If myReverbData(0).NRows <> myRealMatrix0.NRows Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Frequency list must agree with reverberation data" : Return ToArray(myRealMatrix1)
                If myReverbData(0)(1, 1) <> myRealMatrix0(1, 1) Or myReverbData(0)(2, 1) <> myRealMatrix0(2, 1) Or myReverbData(0)(myRealMatrix0.NRows, 1) <> myRealMatrix0(myRealMatrix0.NRows, 1) Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Frequency list must agree with reverberation data" : Return ToArray(myRealMatrix1)
            End If

            'Read in the calibration and the measurement
            Dim myCalCols As Integer = myRealMatrix0.NCols, myCalExt As String = myRealMatrix0.DataType
            Dim myMeasCols As Integer = 9   'myRealMatrix1.NCols

            'Interpolate the calibration to the frequencies of the input data.
            Dim myCalibration As New RealMatrix(myRealMatrix0.Vector(1).NRows, myCalCols, myCalExt)
            myCalibration.Fill(myRealMatrix0)
            'If we have a zero-frequency point, this must be DC data. In this case, put in transparent error boxes.
            If myCalibration(1, 1) = 0.0 Then
                For kk As Integer = 2 To myCalibration.NCols
                    myCalibration(1, kk) = 0.0
                Next kk
                Select Case myRealMatrix0.NPorts
                    Case 2  '2-port calibration matrix, 1-port data
                        myCalibration(1, 4) = 1.0       'S21
                        myCalibration(1, 6) = 1.0      'S12
                    Case 4  '4-port calibration matrix, 2-port data
                        myCalibration(1, 6) = 1.0       'S13
                        myCalibration(1, 18) = 1.0      'S31
                        myCalibration(1, 16) = 1.0      'S24
                        myCalibration(1, 28) = 1.0      'S42
                    Case 6  '6-port calibration matrix, 3-port data
                        myCalibration(1, 8) = 1.0       'S14
                        myCalibration(1, 22) = 1.0      'S25
                        myCalibration(1, 36) = 1.0      'S36
                        myCalibration(1, 38) = 1.0      'S41
                        myCalibration(1, 52) = 1.0      'S52
                        myCalibration(1, 66) = 1.0      'S63
                    Case 8  '8-port calibration matrix, 4-port data
                        myCalibration(1, 10) = 1.0      'S15
                        myCalibration(1, 28) = 1.0      'S26
                        myCalibration(1, 46) = 1.0      'S37
                        myCalibration(1, 64) = 1.0      'S48
                        myCalibration(1, 66) = 1.0      'S51
                        myCalibration(1, 84) = 1.0      'S62
                        myCalibration(1, 102) = 1.0     'S73
                        myCalibration(1, 120) = 1.0     'S84
                End Select
            End If
            'myCalibration.InterpolationFrequencyList(MechanismList1.MagnitudePhaseInterpolationIndex) = myRealMatrix1.Vector(1)

            'If this is the first time, set the presolution in MechanismList1.
            If MechanismList1.InitializeFlag Then
                MechanismList1.PreSolution = myCalibration
                If myPullDownSelection2 = 2 Then MechanismList1.SwitchTerms = myRealMatrix1
            End If

            'Also store this calibration in the presolution in MechanismList2.
            Dim MechanismList2 As New MechanismList(MechanismList1.FrequencyList, 6.95, -0.01)  'This Mechanism list will have the difference calibration.
            MechanismList2.PreSolution = myCalibration 'MINUS PreSolution from MechanismList1
            If myPullDownSelection2 = 2 Then MechanismList2.SwitchTerms = myRealMatrix1

            'Step through the reverberation measurements
            Dim myAverageMeasurement As New RealMatrix(myRealMatrix1.Vector(1).NRows, myMeasCols, ".s2p")
            Dim myAverageTrans2Measurement As New RealMatrix(myRealMatrix1.Vector(1).NRows, 3, ".complex")
            Dim mySigmaMeasurement As New RealMatrix(myRealMatrix1.Vector(1).NRows, 9, ".s2p")
            For Indx As Integer = 0 To myReverbData.Count - 1
                'Put the input scattering parameters into an S-parameter structure and calibrate them with the difference calibration.
                Dim myInputMeasurement As New RealMatrix(myRealMatrix1.Vector(1).NRows, myMeasCols, ".s2p")
                myInputMeasurement.Fill(myReverbData(Indx))
                Select Case myPullDownSelection2
                    Case -1, 0  '0) = "Add uncertainties to calibrated data"
                        myInputMeasurement.UnCalibrate(MechanismList1, myPullDownSelection1 = 0)    'Uncalibrate with the nominal calibration.
                        myInputMeasurement.Calibrate(MechanismList2, myPullDownSelection1 = 0)      'Recalibrate with the pertrubed calibration.
                    Case 1, 2   '1) = "Correct uncalibrated data and add uncertainties"
                        myInputMeasurement.Calibrate(MechanismList2, myPullDownSelection1 = 0)      'Calibrate with the pertrubed calibration.
                    Case 3      '3) = "Uncorrect calibrated data and add uncertainties"
                        myInputMeasurement.UnCalibrate(MechanismList2, myPullDownSelection1 = 0)    'Uncalibrate with the pertrubed calibration.
                    Case 4      '4) = "Add uncerrtainties to uncalibrated data
                        myInputMeasurement.Calibrate(MechanismList1, myPullDownSelection1 = 0)      'Calibrate with the nominal calibration.
                        myInputMeasurement.UnCalibrate(MechanismList2, myPullDownSelection1 = 0)    'Uncalibrate with the pertrubed calibration.
                    Case Else   'Do nothing
                End Select

                'If InStr(myInputMeasurement.DataType, ".w") > 0 Then  'This is a .wnp file. Set the phase of the first frequency to zero?
                '    Select Case myPullDownSelection3
                '        Case -1, 0   'Do nothing
                '        Case 1  'Normalize funamental phase
                '            Call NormalizeFundamental(myInputMeasurement, "")
                '        Case 2  'Save .snp file
                '            myInputMeasurement = myInputMeasurement.WnP_to_SnP
                '    End Select
                'End If

                'If this is a .w2p file, convert it to a .s2p file
                If InStr(myInputMeasurement.DataType, ".w") > 0 Then myInputMeasurement = myInputMeasurement.WnP_to_SnP

                'Sum all of the inputs
                myAverageMeasurement = myAverageMeasurement + myInputMeasurement
                For k As Integer = 1 To myAverageTrans2Measurement.NRows
                    myAverageTrans2Measurement(k, 2) = myAverageTrans2Measurement(k, 2) + (myInputMeasurement(k, 4) ^ 2 + myInputMeasurement(k, 5) ^ 2 + myInputMeasurement(k, 6) ^ 2 + myInputMeasurement(k, 7) ^ 2) / 2.0
                Next

            Next Indx

            'Form the averages
            myAverageMeasurement.DataType = ".s2p"  'Because averaging matrices as above looses the datatype.
            myAverageMeasurement.Vector(1) = myReverbData(0).Vector(1)  'Set the freqeuncies
            myAverageTrans2Measurement.Vector(1) = myReverbData(0).Vector(1)
            mySigmaMeasurement.Vector(1) = myReverbData(0).Vector(1)
            Dim Norm As Double = 1.0 / CDbl(myReverbData.Count)
            For kk As Integer = 1 To myAverageMeasurement.NRows
                myAverageTrans2Measurement(kk, 2) = myAverageTrans2Measurement(kk, 2) * Norm
                For k As Integer = 2 To myAverageMeasurement.NCols
                    myAverageMeasurement(kk, k) = myAverageMeasurement(kk, k) * Norm
                    For Indx As Integer = 0 To myReverbData.Count - 1   'Get the standard deviation around the average value
                        mySigmaMeasurement(kk, k) = mySigmaMeasurement(kk, k) + (myReverbData(Indx)(kk, k) - myAverageMeasurement(kk, k)) ^ 2
                    Next Indx
                Next k
            Next kk

            'Form the standard deviations
            mySigmaMeasurement.Vector(2) = mySigmaMeasurement.Vector(2) + mySigmaMeasurement.Vector(3)  'Sum real and imaginary parts of S11.
            mySigmaMeasurement.Vector(8) = mySigmaMeasurement.Vector(8) + mySigmaMeasurement.Vector(9)  'Sum real and imaginary parts of S22.
            mySigmaMeasurement.Vector(4) = mySigmaMeasurement.Vector(4) + mySigmaMeasurement.Vector(5) + mySigmaMeasurement.Vector(6) + mySigmaMeasurement.Vector(7)  'Sum real and imaginary parts of S21 and S12.
            For kk As Integer = 1 To myAverageMeasurement.NRows
                mySigmaMeasurement(kk, 2) = Math.Sqrt(Norm * mySigmaMeasurement(kk, 2)) : mySigmaMeasurement(kk, 3) = 0.0   'S11
                mySigmaMeasurement(kk, 8) = Math.Sqrt(Norm * mySigmaMeasurement(kk, 8)) : mySigmaMeasurement(kk, 9) = 0.0   'S22
                mySigmaMeasurement(kk, 4) = Math.Sqrt(0.5 * Norm * mySigmaMeasurement(kk, 4)) : mySigmaMeasurement(kk, 5) = 0.0 'S21 and S12
                mySigmaMeasurement(kk, 6) = mySigmaMeasurement(kk, 4) : mySigmaMeasurement(kk, 7) = 0.0                         'S21 and S12
            Next kk

            'That's all folks! 
            myFirst = False
            Dim myOutputs(2) As Object
            myOutputs(0) = New RealMatrix
            myOutputs(1) = New RealMatrix
            myOutputs(2) = New RealMatrix
            myOutputs(0).Fill(myAverageMeasurement)
            myOutputs(1).Fill(myAverageTrans2Measurement)
            myOutputs(2).Fill(mySigmaMeasurement)
            Return myOutputs

        End Function

    End Class






    ''' <summary>
    ''' Post processor for calculating pulse parameters
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_PulseParameters
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myDistributionLimits() As Double
        Private myAllowForceNewValues() As Boolean
        Private myForceNewValues() As Boolean
        Private myNewValues() As Double
        Private myModel As Object
        Private myFirstTime As Boolean = True 'Makes plots for the user

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub

        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(3) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Signal with impulse (.waveform)"    'The input waveform
                myNameList(1) = "Number of points we use to interpolate the crossing times (.parameter)"    'The number of points nfit we fit a quadratic to
                myNameList(2) = "Scalling factor to apply to waveform (e.g. 1, .parameter)"
                myNameList(3) = "Offset to add to waveform (e.g. 0, .parameter)"
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".waveform" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Quadratic fit (nfit>=3)"
                PullDownList(1) = "Linear fit (nfit>=2)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Center fit on mean of threshold crossings"
                PullDownList(1) = "Center fit on last and first threshold crossings"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor finds the rise time, fall time, and full-width half max of an impulse."
                myDescription(2) = "The results are ordered as 10-90% rise and fall times,  20-80% rise and fall times, 30-70%  rise and fall times, full-width half-max, rising and falling slopes at half max, maximum pulse amplitude."
                myDescription(4) = "The default input times are set by the waveform. Override the times with the Run>Set Input Frequencies (or times) pull-down menu."
                myDescription(6) = "Written by Dylan Williams and Paul Hale."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".variables"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate impulse parameters."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.

            'myNameList(0) = "Signal with impulse (.waveform)"    'The input waveform
            Dim myRealMatrix0 As RealMatrix = MechValues(0).getSParams(MechanismList1)
            Dim t As New RealMatrix(myRealMatrix0.NRows) : t = myRealMatrix0.Vector(1)
            Dim y As New RealMatrix(myRealMatrix0.NRows) : y = myRealMatrix0.Vector(2)
            'myNameList(1) = "Number of points we use to interpolate the crossing times (.parameter)"    'The number of points nfit we fit a quadratic to
            Dim nfit As Integer = CInt(MechValues(1).MechanismValue(MechanismList1))
            'myNameList(2) = "Scalling factor to apply to waveform (e.g. 1, .parameter)"
            Dim Scale As Double = MechValues(2).MechanismValue(MechanismList1)
            'myNameList(3) = "Offset to add to waveform (e.g. 0, .parameter)"
            Dim Offset As Double = MechValues(3).MechanismValue(MechanismList1)
            Dim PulseParameters As New RealMatrix(10, 2, ".variables")

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 3 Then
                MechanismList1.ErrorReport = "The first input must be a waveform."
                MechanismList1.FatalError = True
                Return ToArray(PulseParameters) : Exit Function
            End If

            'Check nfit to see if it has enough points.
            Select Case myPullDownSelection1
                Case 0  'PullDownList(0) = "Quadratic fit (nfit>=3)"
                    If nfit < 3 Then
                        MechanismList1.ErrorReport = "nfit must be at least 3 for quadratic fit."
                        MechanismList1.FatalError = True
                        Return ToArray(PulseParameters) : Exit Function
                    End If
                Case 1  'PullDownList(1) = "Linear fit (nfit>=2)"
                    If nfit < 2 Then
                        MechanismList1.ErrorReport = "nfit must be at least 2 for linear fit."
                        MechanismList1.FatalError = True
                        Return ToArray(PulseParameters) : Exit Function
                    End If
            End Select

            'Add scale and offset to pulse if needed
            If Scale <> 1.0 And Offset <> 0.0 Then
                For k As Integer = 1 To y.NRows
                    y(k) = Scale * (y(k) + Offset)
                Next k
            End If

            'Set side to 1 for falling edge, -1 for rising edge.
            Dim f As Double = 0.1   '10%-90%
            Dim T10 As Double = findtrImp_wls2(t, y, f, nfit, -1, myPullDownSelection1, myPullDownSelection2, myFirstTime)       'Rising edge
            Dim T90 As Double = findtrImp_wls2(t, y, 1.0 - f, nfit, -1, myPullDownSelection1, myPullDownSelection2, myFirstTime)
            PulseParameters(1, 1) = 1.0 : PulseParameters(1, 2) = T90 - T10
            T10 = findtrImp_wls2(t, y, f, nfit, 1, myPullDownSelection1, myPullDownSelection2, myFirstTime)       'Falling edge
            T90 = findtrImp_wls2(t, y, 1.0 - f, nfit, 1, myPullDownSelection1, myPullDownSelection2, myFirstTime)
            PulseParameters(2, 1) = 2.0 : PulseParameters(2, 2) = T10 - T90
            f = 0.2   '20%-80%
            T10 = findtrImp_wls2(t, y, f, nfit, -1, myPullDownSelection1, myPullDownSelection2, myFirstTime)       'Rising edge
            T90 = findtrImp_wls2(t, y, 1.0 - f, nfit, -1, myPullDownSelection1, myPullDownSelection2, myFirstTime)
            PulseParameters(3, 1) = 3.0 : PulseParameters(3, 2) = T90 - T10
            T10 = findtrImp_wls2(t, y, f, nfit, 1, myPullDownSelection1, myPullDownSelection2, myFirstTime)       'Falling edge
            T90 = findtrImp_wls2(t, y, 1.0 - f, nfit, 1, myPullDownSelection1, myPullDownSelection2, myFirstTime)
            PulseParameters(4, 1) = 4.0 : PulseParameters(4, 2) = T10 - T90
            f = 0.3   '30%-70%
            T10 = findtrImp_wls2(t, y, f, nfit, -1, myPullDownSelection1, myPullDownSelection2, myFirstTime)       'Rising edge
            T90 = findtrImp_wls2(t, y, 1.0 - f, nfit, -1, myPullDownSelection1, myPullDownSelection2, myFirstTime)
            PulseParameters(5, 1) = 5.0 : PulseParameters(5, 2) = T90 - T10
            T10 = findtrImp_wls2(t, y, f, nfit, 1, myPullDownSelection1, myPullDownSelection2, myFirstTime)       'Falling edge
            T90 = findtrImp_wls2(t, y, 1.0 - f, nfit, 1, myPullDownSelection1, myPullDownSelection2, myFirstTime)
            PulseParameters(6, 1) = 6.0 : PulseParameters(6, 2) = T10 - T90
            f = 0.5   'Full-width half max
            T10 = findtrImp_wls2(t, y, f, nfit, -1, myPullDownSelection1, myPullDownSelection2, myFirstTime)         'Rising edge
            T90 = findtrImp_wls2(t, y, 1.0 - f, nfit, 1, myPullDownSelection1, myPullDownSelection2, myFirstTime)    'Falling edge
            PulseParameters(7, 1) = 7.0 : PulseParameters(7, 2) = T90 - T10
            'Slopes at half-max points
            T10 = findSlope(t, y, f, nfit, -1, myPullDownSelection2)         'Rising edge
            PulseParameters(8, 1) = 8.0 : PulseParameters(8, 2) = T10
            T90 = findSlope(t, y, 1.0 - f, nfit, 1, myPullDownSelection2)    'Falling edge
            PulseParameters(9, 1) = 9.0 : PulseParameters(9, 2) = T90
            'Maximum pulse amplitude
            PulseParameters(10, 1) = 10.0 : PulseParameters(10, 2) = max1(y)

            myFirstTime = False

            'That's all folks!
            Return ToArray(PulseParameters)

        End Function

        'Public Function Clone() As Object Implements ICloneable.Clone
        '    Throw New NotImplementedException()
        'End Function

        'Private Sub shorth_range(ByRef shorthmin As Double, ByRef shorthmax As Double, ByRef y As RealMatrix)

        '    '%finds the shortest half (shorth) of the vector y and keeps track of the
        '    '%indices of the original vector that are used in the state to be used in
        '    '%generating a Jacobian for the point selection transformation to the vector
        '    '%L

        '    'y1=sort(y(:,2))
        '    Dim y1 As New RealMatrix(y.NRows)   'Should sort y
        '    y1 = y.Vector(2)
        '    Call QuickSortRealMatrix(y1, 1, y1.NRows)   'Should we put this in ComplexNumberClass??
        '    'K = length(y1)
        '    Dim K As Integer = y1.NRows
        '    'Kh = Int(K / 2) + 1
        '    Dim Kh As Integer = Int(K / 2) + 1
        '    Dim d As New RealMatrix(K - Kh)
        '    For n As Integer = 1 To (K - Kh)
        '        d(n) = y1(n + Kh - 1) - y1(n)  '%should this subtract 1 or not?
        '    Next n

        '    '[~,shorthmin]=min1(d);
        '    shorthmin = min1(d)
        '    shorthmax = shorthmin + Kh - 1  '%should this subtract 1 or not?

        'End Sub
    End Class


    ''' <summary>
    ''' Finds the time at which the signal crosses ymax*f. 
    ''' </summary>
    ''' <param name="t">The vector of times</param>
    ''' <param name="y">The vector of signal values</param>
    ''' <param name="f">The ratio of the threshold value to the maximum level the signal reaches.</param>
    ''' <param name="nfit">The number of points to use in the local quadratic fit to determine the crossing point.</param>
    ''' <param name="side">Set to 1 for falling edge, -1 for rising edge.</param>
    ''' <param name="myPullDownSelection2">(0) = Center fit on mean of threshold crossings, (1) = Center fit on last and first threshold crossings.</param>
    ''' <returns>the slope at the crossing point</returns>
    ''' <remarks>The routine assumes that the pulse starts at zero and returns to zero.</remarks>
    Private Function findSlope(ByRef t As RealMatrix, ByRef y As RealMatrix, ByVal f As Double, ByVal nfit As Integer, ByVal side As Integer, ByVal myPulldownSelection2 As Integer) As Double

        'Assemble arrays with just the data between kstart and kstop
        Dim ytrim As New RealMatrix(nfit), ttrim As New RealMatrix(nfit)
        Call FindFitRegion(t, y, f, nfit, side, ttrim, ytrim, myPulldownSelection2)

        'Use linear regression to solve for the quadratic coefficients beta
        Dim beta As RealMatrix = Complex_Number_Class.LinearRegressionCoefficients(ytrim, ttrim, 2)
        'Solve the linear equation
        Return beta(2)

    End Function


    ''' <summary>
    ''' Finds the time at which the signal crosses ymax*f. 
    ''' </summary>
    ''' <param name="t">The vector of times</param>
    ''' <param name="y">The vector of signal values</param>
    ''' <param name="f">The ratio of the threshold value to the maximum level the signal reaches.</param>
    ''' <param name="nfit">The number of points to use in the local quadratic fit to determine the crossing point.</param>
    ''' <param name="side">Set to 1 for falling edge, -1 for rising edge.</param>
    ''' <param name="myPullDownSelection1">(0) = Quadratic fit (nfit>=3), (1) = "Linear fit (nfit>=2).</param>
    ''' <param name="myPullDownSelection2">(0) = Center fit on mean of threshold crossings, (1) = Center fit on last and first threshold crossings.</param>
    ''' <param name="myFirstTime">Generate a plot.</param>
    ''' <returns>the time at which the signal crosses ymax*f</returns>
    ''' <remarks>The routine assumes that the pulse starts at zero and returns to zero.</remarks>
    Private Function findtrImp_wls2(ByRef t As RealMatrix, ByRef y As RealMatrix, ByVal f As Double, ByVal nfit As Integer, ByVal side As Integer, ByVal myPullDownSelection1 As Integer, ByVal myPullDownSelection2 As Integer, ByVal myFirstTime As Boolean) As Double
        'function [tr,varargout]=findtrImp_wls2(t,y,f,nfit,side,varargin)

        'Assemble arrays with just the data between kstart and kstop
        Dim ytrim As New RealMatrix(nfit), ttrim As New RealMatrix(nfit)
        Call FindFitRegion(t, y, f, nfit, side, ttrim, ytrim, myPullDownSelection2)

        'Plot for user
        Dim yfit As New RealMatrix(100), tfit As New RealMatrix(100)
        If myFirstTime Then
            For k As Integer = 1 To 100
                tfit(k) = ttrim(1) + CDbl(k - 1) * (ttrim(nfit) - ttrim(1)) / 99.0
            Next k
        End If

        Dim tr As Double = 0.0
        Select Case myPullDownSelection1
            Case 0  'PullDownList(0) = "Quadratic fit (nfit>=3)"

                'Use linear regression to solve for the quadratic coefficients beta
                Dim beta As RealMatrix = Complex_Number_Class.LinearRegressionCoefficients(ytrim, ttrim, 3)
                'Solve the quadratic equation
                Dim Q As Double = beta(2) ^ 2 - 4 * beta(3) * (beta(1) - f * max1(y))
                Q = Math.Sqrt(Q)
                Dim r1 As Double = (-beta(2) + Q) / (2 * beta(3))
                Dim r2 As Double = (-beta(2) - Q) / (2 * beta(3))
                'Choose the root that is in the range we are looking for.
                If min1(ttrim) <= r1 And r1 <= max1(ttrim) Then tr = r1
                If min1(ttrim) <= r2 And r2 <= max1(ttrim) Then tr = r2

                'Plot graphs for debugging
                If myFirstTime Then
                    For k As Integer = 1 To 100
                        yfit(k) = beta(1) + beta(2) * tfit(k) + beta(3) * tfit(k) * tfit(k)
                    Next k
                End If

            Case 1  'PullDownList(1) = "Linear fit (nfit>=2)"

                'Use linear regression to solve for the quadratic coefficients beta
                Dim beta As RealMatrix = Complex_Number_Class.LinearRegressionCoefficients(ytrim, ttrim, 2)
                'Solve the linear equation
                tr = (f * max1(y) - beta(1)) / beta(2)

                'Plot graphs for debugging
                If myFirstTime Then
                    For k As Integer = 1 To 100
                        yfit(k) = beta(1) + beta(2) * tfit(k)
                    Next k
                End If

        End Select


        'Plot graphs for debugging
        If myFirstTime Then
            Dim Title As String = "Rising edge "
            If side > 0 Then Title = "Falling edge "
            Title = Title + CInt(f * 100).ToString + "% thresh hold"
            Dim myPlot As New Plot("Time (ns)", "Signal level", Title, True)
            myPlot.AddCurve(t, y, "Signal", , , , True)
            myPlot.AddCurve(ttrim, ytrim, "Fit points", , , , False)
            myPlot.AddCurve(tfit, yfit, "Fit")
            myPlot.Show()
        End If

        Return tr

    End Function

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="t">The vector of times</param>
    ''' <param name="y">The vector of signal values</param>
    ''' <param name="f">The ratio of the threshold value to the maximum level the signal reaches.</param>
    ''' <param name="nfit">The number of points to use in the local quadratic fit to determine the crossing point.</param>
    ''' <param name="side">Set to 1 for falling edge, -1 for rising edge.</param>
    ''' <param name="ttrim">Trimmed times</param>
    ''' <param name="ytrim">Trimmed values</param>
    ''' <param name="myPullDownSelection2">(0) = Center fit on mean of threshold crossings, (1) = Center fit on last and first threshold crossings</param>
    Private Sub FindFitRegion(ByRef t As RealMatrix, ByRef y As RealMatrix, ByVal f As Double, ByVal nfit As Integer, ByVal side As Integer, ByRef ttrim As RealMatrix, ByRef ytrim As RealMatrix, ByVal myPullDownSelection2 As Integer)

        'My best interpretation of Paul's MatLab code
        Dim kmax As Integer, kcenter As Integer, kfirst As Integer, klast As Integer, kstart As Integer, kstop As Integer    'kstart and kstop bracket the place where the data crosses the threshold
        Call findHrImp(y, f, nfit, side, kmax, kcenter, kfirst, klast)       'Call routine to find kstart and kstop

        'Select the index of the crossing point
        Dim kL As Integer = kcenter 'The average crossing point (the nominal selection)
        If myPullDownSelection2 = 1 Then  'Select the first crossing point
            If side < 0 Then        'rising edge
                If f <= 0.5 Then    'Lower threshhold
                    kL = klast
                Else                'Upper threshhold
                    kL = kfirst
                End If
            Else                    'falling edge
                If f <= 0.5 Then    'Lower threshhold
                    kL = kfirst
                Else                'Upper threshhold
                    kL = klast
                End If
            End If
        End If

        'ksub=kL+[-floor(nfit/2)+1:(-floor(nfit/2)+nfit)];  %set of nfit points around kL 
        kstart = kL + 1 - Int(nfit / 2)     'Int rounds down, CInt rounds to nearest.
        kstop = kstart + nfit - 1
        'Make sure that kstart and kstop are in the range of data we have
        'If kstop > y.NRows Then kstart += -1 : kstop += -1
        While kstop > y.NRows
            kstart += -1 : kstop += -1
        End While
        'If kstart < 1 Then kstart += 1 : kstop += 1
        While kstart < 1
            kstart += 1 : kstop += 1
        End While

        'Assemble arrays with just the data between kstart and kstop
        For k As Integer = 1 To nfit
            ytrim(k) = y(kstart + k - 1)
            ttrim(k) = t(kstart + k - 1)
        Next k

    End Sub

    ''' <summary>
    ''' This subroutine finds the closest nfit points to a reference level of an impulse
    ''' </summary>
    ''' <param name="y">The vector of signal values</param>
    ''' <param name="f">The ratio of the threshold value to the maximum level the signal reaches.</param>
    ''' <param name="nfit">The number of points to use in the local quadratic fit to determine the crossing point.</param>
    ''' <param name="side">Set to 1 for falling edge, -1 for rising edge.</param>
    ''' <param name="kmax">The index corresponding to the point at which the signal reaches a maximum.</param>
    ''' <param name="kcenter">The center index for the nfit points closest to the threshhold crossing</param>
    ''' <param name="kfirst">The first threshhold crossing point</param>
    ''' <param name="klast">The last threshhold crossing point</param>
    ''' <remarks></remarks>
    Private Sub findHrImp(ByRef y As RealMatrix, ByVal f As Double, ByVal nfit As Integer, ByRef side As Integer, ByRef kmax As Integer, ByRef kcenter As Integer, ByRef kfirst As Integer, ByRef klast As Integer)
        '    function [Hr,kmax,varargout]=findHrImp(y,f,nfit,side,varargin)
        '% this function finds the closest nfit points to a reference level of an impulse

        Dim maxy As Double
        Call max2(y, maxy, kmax)

        'ythresh=maxy*f;
        Dim ythresh As Double = maxy * f

        'kmid seems to be a list of points that cross ythresh, and kL is the middle one
        kfirst = -1 : klast = -1
        Dim ncrossings As Integer = 0, meancrossings As Double = 0.0
        If side < 0 Then    'Rising edge
            If kmax >= y.NRows Then kmax = y.NRows - 1
            For k As Integer = 1 To kmax
                If (y(k) - ythresh) * (y(k + 1) - ythresh) <= 0.0 Then    'If there was a crossing...
                    ncrossings += 1 : meancrossings += k : klast = k
                    If kfirst < 0 Then kfirst = k
                End If
            Next k
        Else            'Falling edge
            If kmax >= y.NRows Then kmax = y.NRows - 1
            For k As Integer = kmax To y.NRows - 1
                If (y(k) - ythresh) * (y(k + 1) - ythresh) <= 0.0 Then    'If there was a crossing...
                    ncrossings += 1 : meancrossings += k : klast = k
                    If kfirst < 0 Then kfirst = k
                End If
            Next k
        End If

        'kL=kmid(kL0);
        If ncrossings = 0 Then  'Try to prevent overflow. Data will not mean anything.
            kcenter = y.NRows / 2
        Else
            kcenter = Int(meancrossings / CDbl(ncrossings)) 'Int rounds down, CInt rounds to nearest.
        End If

    End Sub
    Private Function min1(ByRef x As RealMatrix) As Double
        Dim xmin As Double = x(1)
        For k As Integer = 1 To x.NRows
            If x(k) < xmin Then xmin = x(k)
        Next k
        Return xmin
    End Function
    Private Function max1(ByRef x As RealMatrix) As Double
        Dim xmax As Double = x(1)
        For k As Integer = 1 To x.NRows
            If x(k) > xmax Then xmax = x(k)
        Next k
        Return xmax
    End Function

    Private Sub min2(ByRef x As RealMatrix, ByRef xmin As Double, ByRef kmin As Integer)
        xmin = x(1) : kmin = 1
        For k As Integer = 1 To x.NRows
            If x(k) < xmin Then
                xmin = x(k) : kmin = k
            End If
        Next k
    End Sub
    Private Sub max2(ByRef x As RealMatrix, ByRef xmax As Double, ByRef kmax As Integer)
        xmax = x(1) : kmax = 1
        For k As Integer = 1 To x.NRows
            If x(k) > xmax Then
                xmax = x(k) : kmax = k
            End If
        Next k
    End Sub





    ''' <summary>
    ''' Post processor for calculating power delay profile.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_PDP
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Scattering-parameter measurements of the channel"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(6) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Reference measurement for scattering-parameter normalization (.s2p)"    'Has 2x2 s-parameters of the reference channel.
                myNameList(1) = "PDP noise threshold (dB, .parameter)"    'The noise threshold. Values of impulse responce will be set to 0 if they are below this value for the purposes of calculating certain metrics.
                myNameList(2) = "Delay-interval threshold (dB, .parameter)"
                myNameList(3) = "Threshold for the number of multipath components (dB, .parameter)"
                myNameList(4) = "Proportion of energy in delay window (0.90 default, .parameter)"
                myNameList(5) = "Bandwidth scale for area-scaled PDP (0 default, .parameter)"
                myNameList(6) = "Optional user filter (frequency-domain, real, .complex)"

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'These are set up for 1-4 port problems
                Dim FileExtensions(4) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".s2p" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".waveform" : FileExtensions(4) = ".complex"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(4) As String
                PullDownList(0) = "Do not filter the VNA channel measurements"
                PullDownList(1) = "Apply a Hamming filter to the VNA channel measurements"
                PullDownList(2) = "Apply sinc^2 filter to the VNA channel measurements"
                PullDownList(3) = "Apply sinc^2 filter with no DC to the VNA channel measurements"
                PullDownList(4) = "Optional real FD filter entered into front panel"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "No Group-Delay averaging"
                PullDownList(1) = "3-point box-car average"
                PullDownList(2) = "5-point box-car average"
                PullDownList(3) = "7-point box-car average"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(14) As String
                myDescription(0) = "This post processor calculates channel impulse response and power delay profile from the scattering parameters S21 and S12 of the channel."
                myDescription(2) = "The power delay profile PDPamplitude is normalized so that when S21=1, the PDP is 1 at time 0."
                myDescription(4) = "The power delay profile PowerAreaNormPDPamplitude is scaled so that the integral of its square wrt time is equal to 1 when S21=1. You can then multiply the square of PowerAreaNormPDPamplitude by the transmitted power to get a PDP normalized so that the integral of the square of the PDP over a time interval gives the power in that interval. The user can also enter an optional bandwidth to further scale the area-scaled PDP. This multiplies the area-scaled PDP by 1/sqrt(BW) if BW>0."
                myDescription(6) = "The power delay profile DiscreteNormPDPamplitude is scaled so that the sum of the squares if the discrete values are equal to 1 when S21=1."
                myDescription(8) = "The times at which the power-delay profile is determined MUST BE set with the Run>Set output times pull-down menu. The default frequency list is determined from the data to be corrected in the lower input box of this post processor."
                myDescription(10) = "The module also returns a .variables file with the Average delay relative to the position of the first peak, RMS delay spread, delay window, delay interval, the number of multipath or signal components, the average group delay in ns, and the RMS path loss (in units of amplitude, not power, so look at this in dB), the average delay in absolute time, the position of the first peak in absolute time, the average delay with respect to highest peak, and the position of highest peak in absolute time. These values are followed by four calculations made with respect to fitted arrival times. This is more reasonable than the IUT definition when trying to get uncertainties. These values are the average fitted delay with respect to first peak, the position of first peak in absolute fitted time, the average fitted  delay with respect to highest peak, and the position of highest peak in absolute fitted time."
                myDescription(12) = "The 'Time step for discrete sum scaling' is used to replicate scaling of the PDP for discrete systems for which the path gain is determined by summing the squares of discreet values."
                myDescription(14) = "Written by Dylan Williams and Jeanne Quimby."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".power"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate power-delay profile from VNA measurements"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = -1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property
        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNames(5) As String
                myFileNames(0) = "\PDPamplitude"
                myFileNames(1) = "\CBBrepresentation"
                myFileNames(2) = "\Metrics"
                myFileNames(3) = "\GroupDelay"
                myFileNames(4) = "\PowerAreaNormPDPamplitude"
                myFileNames(5) = "\DiscreteNormPDPamplitude"
                Return myFileNames
            End Get
        End Property


        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MultipleModelInput(0).getSParams(MechanismList1)  '2x2 s-parameters of the channel.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'myNameList(0) = "Reference for scattering-parameter normalization (.s2p)"    'Has 2x2 s-parameters of the reference channel.
            Dim BWareascale As Double = MechValues(5).MechanismValue(MechanismList1) 'myNameList(5) = "Bandwidth scale for area-scaled PDP (0 default, .parameter)"
            If BWareascale <= 0.0 Then
                BWareascale = 1
            Else
                BWareascale = BWareascale * 1000000000.0    'Put this in Hz.
            End If
            Dim myRealMatrix5 As RealMatrix 'myNameList(6) = "Optional user filter (.complex)"
            If myPullDownSelection1 = 4 Then
                myRealMatrix5 = MechValues(6).getSParams(MechanismList1)
            Else
                myRealMatrix5 = myRealMatrix1   'Dummy so that user does not have to enter anything for this optional value
            End If
            Dim N As Integer = myRealMatrix1.NRows
            Dim Frequencies As New RealMatrix(N) : Frequencies = myRealMatrix1.Vector(1)
            Dim S21 As New ComplexMatrix(N) 'The averaged transmission through the channel
            Dim S21Filter As New ComplexMatrix(N) 'The averaged and filtered transmission through the channel
            'Assemble the transmission term. Normalize the transmission through the channel by the reference measurement.
            Dim P1Aver As Double = 0.0, P2Aver As Double = 0.0
            For k As Integer = 1 To N
                S21(k) = toComplex(0.5 * (myRealMatrix1(k, 4) + myRealMatrix1(k, 6)), 0.5 * (myRealMatrix1(k, 5) + myRealMatrix1(k, 7))) _
                    / toComplex(0.5 * (myRealMatrix0(k, 4) + myRealMatrix0(k, 6)), 0.5 * (myRealMatrix0(k, 5) + myRealMatrix0(k, 7)))
                P1Aver += Math.Abs((myRealMatrix1(k, 4))) + Math.Abs((myRealMatrix1(k, 5))) 'Keep track of average values in case an attenuator is being used.
                P2Aver += Math.Abs((myRealMatrix1(k, 6))) + Math.Abs((myRealMatrix1(k, 7)))
            Next k
            If Math.Abs(P1Aver - P2Aver) / (P1Aver + P2Aver) > 0.5 Then     'Ooops. We must have an isolator here.
                For k As Integer = 1 To N   'Redo this part.
                    If P1Aver > P2Aver Then
                        S21(k) = toComplex(myRealMatrix1(k, 4), myRealMatrix1(k, 5)) _
                            / toComplex(0.5 * (myRealMatrix0(k, 4) + myRealMatrix0(k, 6)), 0.5 * (myRealMatrix0(k, 5) + myRealMatrix0(k, 7)))
                    Else
                        S21(k) = toComplex(myRealMatrix1(k, 6), myRealMatrix1(k, 7)) _
                            / toComplex(0.5 * (myRealMatrix0(k, 4) + myRealMatrix0(k, 6)), 0.5 * (myRealMatrix0(k, 5) + myRealMatrix0(k, 7)))
                    End If
                Next k
            End If

            'Multiply signal by an optional filter response
            Dim Fc As Double = 0.5 * (Frequencies(N) + Frequencies(1))
            Dim FilterAvg As Double = 0.0       'Track the average of the filter selected so that we can compensate for any overall gain or loss
            Dim Filter2Avg As Double = 0.0      'Track the average value of the square of the filter response for path-loss calculations
            Dim PathLoss As Double = 0.0        'Track the average value of S21 for path-loss calculations
            Dim FilterHasDelay As Boolean = False
            'Step through the frequencies, add filter response, track average values
            For k As Integer = 1 To N
                Dim Filter As Double = 1.0  'The filter response at this frequency point
                Select Case myPullDownSelection1 'Select the filter
                    Case -1, 0  'No filter
                        Filter = 1.0
                    Case 1      'Hamming filter
                        Dim Phase As Double = (CDbl(k - 1) / CDbl(N - 1)) * 2.0 * Math.PI     'Goes between 0 and 2 PI. Cos goes from 1 to -1 to 1 again
                        Filter = 0.53836 - 0.46164 * Math.Cos(Phase)
                    Case 2, 3      'Peter's filter, Multiply by sinc^2 filter
                        'Multiply by sinc^2 filter, zero out dc
                        Dim Phase As Double = ((CDbl(k - 1) / CDbl(N - 1)) * 2.0 * Math.PI) - Math.PI    'Goes between -PI and PI. But does this not eliminate the first and last freqeuncy??
                        If myPullDownSelection2 = 2 Then    '(2) = "Apply sinc^2 filter to the VNA channel measurements"
                            If Phase <> 0.0 Then
                                Filter = (Math.Sin(Phase) / Phase) * (Math.Sin(Phase) / Phase)
                            Else
                                Filter = 1.0
                            End If
                        Else                                '(3) = "Apply sinc^2 filter with no DC to the VNA channel measurements"
                            'What happens when the number of frequency points is even, and we never have a DC term?
                            If Phase <> 0.0 And Math.Abs(CDbl(k) - (N + 1) / 2.0) > 0.75 Then
                                Filter = Math.Sin(Phase) / Phase
                            Else
                                Filter = 0.0
                            End If
                        End If
                    Case 4      'PullDownList(4) = "Use optional filter entered into front panel"
                        Filter = myRealMatrix5(k, 2)
                        If Math.Abs(myRealMatrix5(k, 3)) > 0.001 * Math.Abs(Filter) Then FilterHasDelay = True
                End Select
                S21Filter(k) = S21(k) * toComplex(Filter, 0.0) 'From Matlab definition.
                PathLoss += Abs(S21Filter(k)) ^ 2                       'Average S21^2
                FilterAvg += Filter
                Filter2Avg += Filter ^ 2                 'Track the average value of the square of the filter response for path-loss calculations
            Next k
            If FilterHasDelay And MechanismList1.InitializeFlag Then MechanismList1.ErrorReport = "Warning: Filters can only have real values. Imaginary part ignored."

            'Get averages
            FilterAvg = FilterAvg / N
            Filter2Avg = Filter2Avg / N
            PathLoss = PathLoss / (N * Filter2Avg)    'This is the path loss

            'Transform to complex baseband. The times are set by the user from the "run>set output times" pull-down menu.
            Dim Times As New RealMatrix(MechanismList1.TimeList.NRows), CBB As New ComplexMatrix(MechanismList1.TimeList.NRows)
            Times.Vector(1) = MechanismList1.TimeList
            'Perform the Fourier transform
            Dim j As New Complex(0.0, 1.0)
            'First find out N delta t
            For kT As Integer = 1 To Times.NRows
                Dim C As New Complex(0.0, 0.0)
                For k As Integer = 1 To N
                    C = C + S21Filter(k) * Exp(j * 2.0 * Math.PI * Times(kT) * (Frequencies(k) - Fc))
                Next k
                'Divide by N and FilterAvg so that S21=1 gives 0 dB at t=0.
                CBB(kT) = (1.0 / (FilterAvg * N)) * C
            Next kT

            'Find the Group delay 
            Dim PhaseS21 As New RealMatrix(S21.NRows, 1), GroupDelay As New RealMatrix(S21.NRows, 3, ".complex"), GroupDelayTemp As New RealMatrix(S21.NRows), AverageGroupDelay As Double = 0.0
            GroupDelay.Vector(1) = Frequencies
            If S21.NRows > 3 Then   'Don't even try to do anything unless we have at least three points
                PhaseS21 = Complex_Number_Class.UnWrap(S21)
                GroupDelay(1, 2) = -(PhaseS21(2) - PhaseS21(1)) / (2.0 * Math.PI * (Frequencies(2) - Frequencies(1))) : AverageGroupDelay += GroupDelay(1, 2)
                GroupDelay(N, 2) = -(PhaseS21(N) - PhaseS21(N - 1)) / (2.0 * Math.PI * (Frequencies(N) - Frequencies(N - 1))) : AverageGroupDelay += GroupDelay(N, 2)
                For k As Integer = 2 To N - 1
                    GroupDelay(k, 2) = -(PhaseS21(k + 1) - PhaseS21(k - 1)) / (2.0 * Math.PI * (Frequencies(k + 1) - Frequencies(k - 1)))
                    AverageGroupDelay += GroupDelay(k, 2)
                Next
            End If
            AverageGroupDelay = AverageGroupDelay / CDbl(N)

            'Filter the group delay
            Select Case myPullDownSelection2

                Case 0, -1  'PullDownList(0) = "No Group-Delay averaging"
                Case 1      'PullDownList(1) = "3-point box-car average"
                    If S21.NRows > 3 Then   'Don't even try to do anything unless we have at least three points
                        GroupDelayTemp(1) = (GroupDelay(1, 2) + GroupDelay(2, 2)) / 2.0
                        GroupDelayTemp(N) = (GroupDelay(N, 2) + GroupDelay(N - 1, 2)) / 2.0
                        For k As Integer = 2 To N - 1
                            GroupDelayTemp(k) = (GroupDelay(k - 1, 2) + GroupDelay(k, 2) + GroupDelay(k + 1, 2)) / 3.0
                        Next k
                        GroupDelay.Vector(2) = GroupDelayTemp
                    End If
                Case 2      'PullDownList(2) = "5-point box-car average"
                    If S21.NRows > 5 Then   'Don't even try to do anything unless we have at least three points
                        GroupDelayTemp(1) = (GroupDelay(1, 2) + GroupDelay(2, 2) + GroupDelay(3, 2)) / 3.0
                        GroupDelayTemp(N) = (GroupDelay(N, 2) + GroupDelay(N - 1, 2) + GroupDelay(N - 2, 2)) / 3.0
                        GroupDelayTemp(2) = (GroupDelay(1, 2) + GroupDelay(2, 2) + GroupDelay(3, 2) + GroupDelay(4, 2)) / 4.0
                        GroupDelayTemp(N - 1) = (GroupDelay(N, 2) + GroupDelay(N - 1, 2) + GroupDelay(N - 2, 2) + GroupDelay(N - 3, 2)) / 4.0
                        For k As Integer = 3 To N - 2
                            GroupDelayTemp(k) = (GroupDelay(k - 2, 2) + GroupDelay(k - 1, 2) + GroupDelay(k, 2) + GroupDelay(k + 1, 2) + GroupDelay(k + 2, 2)) / 5.0
                        Next k
                        GroupDelay.Vector(2) = GroupDelayTemp
                    End If
                Case 3      'PullDownList(3) = "7-point box-car average"
                    If S21.NRows > 7 Then   'Don't even try to do anything unless we have at least three points
                        GroupDelayTemp(1) = (GroupDelay(1, 2) + GroupDelay(2, 2) + GroupDelay(3, 2) + GroupDelay(4, 2)) / 4.0
                        GroupDelayTemp(N) = (GroupDelay(N, 2) + GroupDelay(N - 1, 2) + GroupDelay(N - 2, 2) + GroupDelay(N - 3, 2)) / 4.0
                        GroupDelayTemp(2) = (GroupDelay(1, 2) + GroupDelay(2, 2) + GroupDelay(3, 2) + GroupDelay(4, 2) + GroupDelay(5, 2)) / 5.0
                        GroupDelayTemp(N - 1) = (GroupDelay(N, 2) + GroupDelay(N - 1, 2) + GroupDelay(N - 2, 2) + GroupDelay(N - 3, 2) + GroupDelay(N - 4, 2)) / 5.0
                        GroupDelayTemp(3) = (GroupDelay(1, 2) + GroupDelay(2, 2) + GroupDelay(3, 2) + GroupDelay(4, 2) + GroupDelay(5, 2) + GroupDelay(6, 2)) / 6.0
                        GroupDelayTemp(N - 2) = (GroupDelay(N, 2) + GroupDelay(N - 1, 2) + GroupDelay(N - 2, 2) + GroupDelay(N - 3, 2) + GroupDelay(N - 4, 2) + GroupDelay(N - 5, 2)) / 6.0
                        For k As Integer = 4 To N - 3
                            GroupDelayTemp(k) = (GroupDelay(k - 3, 2) + GroupDelay(k - 2, 2) + GroupDelay(k - 1, 2) + GroupDelay(k, 2) + GroupDelay(k + 1, 2) + GroupDelay(k + 2, 2) + GroupDelay(k + 3, 2)) / 7.0
                        Next k
                        GroupDelay.Vector(2) = GroupDelayTemp
                    End If

            End Select

            'That's all folks!
            Return PDP_Calculations(MechanismList1, Frequencies, Times, MechValues, CBB, N, Filter2Avg, FilterAvg, BWareascale, AverageGroupDelay, GroupDelay, PathLoss)

        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="MechanismList1"></param>
        ''' <param name="Frequencies"></param>
        ''' <param name="Times"></param>
        ''' <param name="MechValues"></param>
        ''' <param name="CBB"></param>
        ''' <param name="N"></param>
        ''' <param name="Filter2Avg"></param>
        ''' <param name="FilterAvg"></param>
        ''' <param name="BWareascale">Bandwidth scale for area-scaled PDP (0 default, .parameter)</param>
        ''' <param name="AverageGroupDelay">Average group delay. Not relevant when only temporal results are available. </param>
        ''' <param name="GroupDelay">RealMatrix with group delay. Not relevant when only temporal results are available. </param>
        ''' <param name="PathLoss">Path loss calculated from frequency-domain data. </param>
        ''' <returns></returns>
        Private Function PDP_Calculations(ByRef MechanismList1 As MechanismList, ByRef Frequencies As RealMatrix, ByRef Times As RealMatrix,
                ByRef MechValues() As Object, ByRef CBB As ComplexMatrix, ByVal N As Integer, ByVal Filter2Avg As Double, ByVal FilterAvg As Double,
                ByVal BWareascale As Double, ByVal AverageGroupDelay As Double, ByRef GroupDelay As RealMatrix, ByVal PathLoss As Double) As Object()

            'Calculate power-delay profile and various metrics
            Dim PDP As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".waveform")
            Dim PDP_CD As New RealMatrix(MechanismList1.TimeList.NRows)     'Cumulaive power in the PDP.
            Dim PNormPDP As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".waveform")   'Normalized so that integrating PDP of a channel with S21=1 wrt time gives 1. Implies that multiplying by power gives actual PDP, with int PDP dt = power in time interval.
            Dim DiscretePNormPDP As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".waveform")   'Normalized so that integrating PDP of a channel with S21=1 wrt time gives 1. Implies that multiplying by power gives actual PDP, with int PDP dt = power in time interval.
            Dim df As Double = (Frequencies(2) - Frequencies(1)) * 1000000000.0, dt As Double = (Times(2, 1) - Times(1, 1)) * 0.000000001   'Frequency and time steps in Hz and seconds, so that it is clear how you integrate the PDP
            Dim PNormPDPscale As Double = Math.Sqrt(Filter2Avg / (N * df)) / FilterAvg   'Factor for renormalizing so that integral of PDP is the power
            'Dim DiscreteNormTimeStep As Double = MechValues(5).MechanismValue(MechanismList1)      'myNameList(5) = "Time step for discreet sum scaling in ns (.parameter)"

            'Set the thresholds
            Dim PowerThreshed As New RealMatrix(MechanismList1.TimeList.NRows)
            Dim PowerMcThreshed As New RealMatrix(MechanismList1.TimeList.NRows)
            Dim DelayAvg As Double = 0.0, PowerThreshTotal As Double = 0.0, PowerMcThreshTotal As Double = 0.0
            Dim tau_a As Double = 0.0, tau_a_fit As Double = 0.0, tau_a_index As Integer = 0, FirstPeakValue As Double = 0.0, FirstPeak As Boolean = True 'tau_a defined in ITU-% P.1407-5, page 5, section 2.2.2
            Dim tau_a_max As Double = 0.0, tau_a_max_fit As Double = 0.0, tau_a_max_index As Integer = 0   'tau_a defined as maximum peak
            Dim Threshhold As Double = Math.Pow(10.0, -Math.Abs(MechValues(1).MechanismValue(MechanismList1)) / 10.0)        'myNameList(1) = "Noise threshold (dB, .parameter)"    'The noise threshold. Values of impulse responce will be set to 0 if they are below this value for the purposes of calculating certain metrics.
            Dim DIThreshhold As Double = Math.Pow(10.0, -Math.Abs(MechValues(2).MechanismValue(MechanismList1)) / 10.0)      'myNameList(2) = "Delay-interval threshold (dB, .parameter)"
            Dim DI1 As Double = Times(Times.NRows)  'Was set to N, the number of frequencies. This was wrong, I think.
            Dim DI2 As Double = 1, DIfound As Boolean = False
            Dim MCThreshhold As Double = Math.Pow(10.0, -Math.Abs(MechValues(3).MechanismValue(MechanismList1)) / 10.0)      'myNameList(3) = "Threshold for the number of multipath components (dB, .parameter)"
            Dim MCmax As Double = 0.0
            Dim PowerLast As Double = 0.0

            'Find the peak power
            For kT As Integer = 1 To Times.NRows
                Dim Amplitude As Double = Abs(CBB(kT))  'Get both the power and thresholded power
                Dim Power As Double = Amplitude * Amplitude
                If MCmax < Power Then MCmax = Power : tau_a_max = Times(kT) : tau_a_max_index = kT 'The max power
            Next kT

            'Define the Multipath Component threshold with respect to the peak component.
            MCThreshhold = MCmax * MCThreshhold                         'Define multipath threshold with respect to peak power
            If MCThreshhold < Threshhold Then MCThreshhold = Threshhold 'Set to noise threshold if it is below the noise threshold

            'Step through the times and find the average and thresholded powers, and the avearage delay.
            For kT As Integer = 1 To Times.NRows    'Step through the times
                Dim Amplitude As Double = Abs(CBB(kT))  'Get both the power and thresholded power
                Dim Power As Double = Amplitude * Amplitude
                Dim PowerTresh As Double = Power    'The thresh-holded power
                If Power < Threshhold Then PowerTresh = 0.0
                PowerThreshed(kT) = PowerTresh      'Keep track of the thresh-holded power for later

                'Jeanne's new MCPowerThresh
                Dim McPowerThresh As Double = PowerTresh
                If McPowerThresh < MCThreshhold Then McPowerThresh = 0.0
                PowerMcThreshed(kT) = McPowerThresh

                'Get the start of the delay interval, look for first and last change in sign
                If kT > 1 Then
                    If (PowerLast - DIThreshhold) * (Power - DIThreshhold) <= 0.0 Then  'Found a change in sign, get intercept
                        'DI2 =  'The last change in sign
                        DI2 = (Times(kT - 1) + Times(kT)) / 2.0
                        If Power <> PowerLast Then DI2 = Times(kT - 1) + (DIThreshhold - PowerLast) * (Times(kT) - Times(kT - 1)) / (Power - PowerLast)
                        If Not DIfound Then
                            DI1 = DI2   'The first chang in sign
                        End If
                        DIfound = True
                    End If
                End If
                'Generate the amplitudes used to create the power-delay profile
                PDP(kT, 1) = Times(kT) : PDP(kT, 2) = Amplitude
                'Normalized PDP so that integrating PDP of a channel with S21=1 wrt time gives 1. Implies that multiplying by power gives actual PDP, with int PDP dt = power in time interval.
                PNormPDP(kT, 1) = Times(kT) : PNormPDP(kT, 2) = Amplitude / PNormPDPscale
                'Normalized PDP so that summing elements of PDP of a channel with S21=1 gives 1.
                DiscretePNormPDP(kT, 1) = Times(kT) : DiscretePNormPDP(kT, 2) = PNormPDP(kT, 2) * Math.Sqrt((Times(2) - Times(1)) * 0.000000001)
                'Rescale the normalized PDP by 1/sqrt(BWareascale)
                PNormPDP(kT, 2) = PNormPDP(kT, 2) / Math.Sqrt(BWareascale)
                'Generate the cumulitive power-delay profile
                If kT = 1 Then
                    PDP_CD(kT) = PowerTresh
                Else
                    PDP_CD(kT) = PDP_CD(kT - 1) + PowerTresh
                End If

                'Sum up quantities needed to calculate average delay
                'DelayAvg += PowerTresh * Times(kT) 
                PowerThreshTotal += PowerTresh
                DelayAvg += McPowerThresh * Times(kT) : PowerMcThreshTotal += McPowerThresh

                'tau_a defined in ITU-% P.1407-5, page 5, section 2.2.2
                'Dim tau_a As Double = 0.0, FirstPeakValue As Double = 0.0, FirstPeak As Boolean = True
                If FirstPeak Then                           'Make sure we are still on or before the first peak
                    If Power >= MCThreshhold Then   'Make sure we are on the first peak
                        If FirstPeakValue <= Power Then     'We are climbing the first peak
                            FirstPeakValue = Power          'Keep track of where we are
                            tau_a = Times(kT)
                            tau_a_index = kT
                        Else                                'We just started to descend off of the first peak
                            FirstPeak = False               'Stop looking for the first peak
                        End If
                    Else
                        If FirstPeakValue > 0.0 Then FirstPeak = False  'We were on the peak, but the power dropped to zero. So we must have descended from the peak
                    End If
                End If

                'Keep track of the power we had last time in the calculation
                PowerLast = Power

            Next kT
            'DelayAvg = DelayAvg / PowerThreshTotal  'The power-weighted delay in absolute time
            DelayAvg = DelayAvg / PowerMcThreshTotal  'The power-weighted delay in absolute time

            'find the number of multipath componenets
            Dim MCnumber As Double = 0.0
            For kT As Integer = 1 To Times.NRows - 1
                If (PowerThreshed(kT) - MCThreshhold) * (PowerThreshed(kT + 1) - MCThreshhold) <= 0.0 Then MCnumber += 0.5
            Next kT

            'Find the delay window
            Dim DWThreshhold As Double = MechValues(3).MechanismValue(MechanismList1)   'myNameList(4) = "Proportion of energy in delay window (0.90 default, .parameter)"
            If DWThreshhold < 0.5 Or DWThreshhold >= 1.0 Then DWThreshhold = 0.9
            Dim DWT1 As Double = (1.0 - DWThreshhold) / 2.0, DWT2 As Double = 1.0 - DWT1
            Dim kT_5 As Integer = 0, kT_95 As Integer = 0
            For kT As Integer = 1 To Times.NRows - 1    'Step through the times
                If (PDP_CD(kT) - DWT1 * PDP_CD(Times.NRows)) * (PDP_CD(kT + 1) - DWT1 * PDP_CD(Times.NRows)) <= 0 Then kT_5 = kT
                If (PDP_CD(kT) - DWT2 * PDP_CD(Times.NRows)) * (PDP_CD(kT + 1) - DWT2 * PDP_CD(Times.NRows)) <= 0 Then kT_95 = kT
            Next kT
            Dim t_5 As Double = 0.0, t_95 As Double = 0.0   'Default valuse if we could not find any threshhold crossings
            If kT_5 > 0 And kT_95 > 0 Then                   'We found some threshhold crossings
                If kT_5 = 1 Then kT_5 = 2
                t_5 = (Times(kT_5 + 1) + Times(kT_5)) / 2.0
                If PDP_CD(kT_5 + 1) <> PDP_CD(kT_5) Then t_5 = Times(kT_5) + (DWT1 * PDP_CD(Times.NRows) - PDP_CD(kT_5)) * (Times(kT_5 + 1) - Times(kT_5)) / (PDP_CD(kT_5 + 1) - PDP_CD(kT_5))
                t_95 = (Times(kT_95 + 1) + Times(kT_95)) / 2.0
                If PDP_CD(kT_95 + 1) <> PDP_CD(kT_95) Then t_95 = Times(kT_95) + (DWT2 * PDP_CD(Times.NRows) - PDP_CD(kT_95)) * (Times(kT_95 + 1) - Times(kT_95)) / (PDP_CD(kT_95 + 1) - PDP_CD(kT_95))
            End If

            'Check that PNormPDP is calculated correctly for S21=1
            Dim Debug As Boolean = False
            If Debug Then
                Dim Sum As Double = 0.0, Sum1 As Double = 0.0, Sum2 As Double = 0.0, Second As Boolean = True
                For kT As Integer = 1 To Times.NRows    'Step through the times
                    Sum += (PNormPDP(kT, 2) ^ 2) * dt
                    Sum1 += (PDP(kT, 2) ^ 2) * dt
                    If Second Then Sum2 += DiscretePNormPDP(kT, 2) ^ 2
                    'Second = Not Second
                Next kT
            End If

            'Find rms delay spread
            Dim RMSDelaySpread As Double = 0.0
            For kT As Integer = 1 To Times.NRows    'Step through the times
                'RMSDelaySpread += PowerThreshed(kT) * ((Times(kT) - DelayAvg) ^ 2)
                RMSDelaySpread += PowerMcThreshed(kT) * ((Times(kT) - DelayAvg) ^ 2)
            Next kT
            RMSDelaySpread = Math.Sqrt(RMSDelaySpread / PowerMcThreshTotal)


            'Package up the outputs for the MUF
            Dim myCBB As New RealMatrix(Times.NRows, 3, ".complex")
            myCBB.Vector(1) = Times : myCBB.Vector(2) = CBB.VectorRealPart(1) : myCBB.Vector(3) = CBB.VectorImagPart(1)
            'The module also returns a .variables file with the Average delay, RMS delay spread, delay window, delay interval, the number of multipath or signal components, the average group delay in ns, and the RMS path loss (in units of amplitude, not power, so look at this in dB)."
            Dim myMetrics As New RealMatrix(15, 2, ".variables")
            myMetrics(1, 1) = 1 : myMetrics(1, 2) = DelayAvg - tau_a    'Average delay with respect to first peak
            myMetrics(2, 1) = 2 : myMetrics(2, 2) = RMSDelaySpread      'RMS Delay Spread
            myMetrics(3, 1) = 3 : myMetrics(3, 2) = t_95 - t_5          'delay window
            myMetrics(4, 1) = 4 : myMetrics(4, 2) = DI2 - DI1           'delay interval
            myMetrics(5, 1) = 5 : myMetrics(5, 2) = MCnumber            'number of multipath or signal components
            myMetrics(6, 1) = 6 : myMetrics(6, 2) = AverageGroupDelay   'Average group delay
            myMetrics(7, 1) = 7 : myMetrics(7, 2) = Math.Sqrt(PathLoss)   'Average S21 (Path loss) (use dB to view in .meas file)
            myMetrics(8, 1) = 8 : myMetrics(8, 2) = DelayAvg            'Average delay in absolute time
            myMetrics(9, 1) = 9 : myMetrics(9, 2) = tau_a               'Position of first peak in absolute time
            myMetrics(10, 1) = 10 : myMetrics(10, 2) = DelayAvg - tau_a_max     'Average delay with respect to highest peak
            myMetrics(11, 1) = 11 : myMetrics(11, 2) = tau_a_max                'Position of highest peak in absolute time

            myMetrics(12, 1) = 12 : myMetrics(13, 1) = 13 : myMetrics(14, 1) = 14 : myMetrics(15, 1) = 15
            If tau_a_index > 0 Then
                tau_a_fit = PeakCenter(tau_a_index, Times, PowerThreshed)           'Fit the first arrival peak
                tau_a_max_fit = PeakCenter(tau_a_max_index, Times, PowerThreshed)   'Fit the first maximum peak
                'Add in components with respect to fitted arrival times.
                'This is more reasonable than the IUT definition when trying to get uncertainties
                myMetrics(12, 2) = DelayAvg - tau_a_fit     'Average fitted delay with respect to first peak
                myMetrics(13, 2) = tau_a_fit                'Position of first peak in absolute fitted time
                myMetrics(14, 2) = DelayAvg - tau_a_max_fit 'Average fitted  delay with respect to highest peak
                myMetrics(15, 2) = tau_a_max_fit            'Position of highest peak in absolute fitted time
            End If


            'Get returned values ready for the MUF
            Dim myReturns(5) As Object
            myReturns(0) = PDP
            myReturns(1) = myCBB
            myReturns(2) = myMetrics
            myReturns(3) = GroupDelay
            myReturns(4) = PNormPDP
            myReturns(5) = DiscretePNormPDP

            Return myReturns

        End Function


        ''' <summary>
        ''' Fit the arrival time of the first peak
        ''' </summary>
        ''' <param name="PeakIndex">Peak arrival time index from ITU definition</param>
        ''' <param name="Times">An array of the times.</param>
        ''' <param name="PowerThreshed">An array of the threshholded powers.</param>
        ''' <returns>This is much better than choosing the maximum value when picking the arrival time, as done in the ITU.
        ''' Choosing the maximum value implies integer time points, and uncertainties may not make much sense.</returns>
        Private Function PeakCenter(ByVal PeakIndex As Integer, ByRef Times As RealMatrix, ByRef PowerThreshed As RealMatrix) As Double

            'Get a reasonable array of times around the peak.
            Dim Kfirst As Integer = PeakIndex, Klast As Integer = PeakIndex, PeakMax As Double = PowerThreshed(PeakIndex)
            While Kfirst > 1 And PowerThreshed(Kfirst) / PeakMax > 0.3
                Kfirst += -1
            End While
            While Klast < PowerThreshed.NRows And PowerThreshed(Klast) / PeakMax > 0.3
                Klast += 1
            End While
            Dim PowerThreshedNearPeak As New RealMatrix(1 + Klast - Kfirst), TimesNearPeak As New RealMatrix(1 + Klast - Kfirst)
            For kT As Integer = 1 To PowerThreshedNearPeak.NRows
                PowerThreshedNearPeak(kT) = PowerThreshed((Kfirst - 1) + kT)
                TimesNearPeak(kT) = Times((Kfirst - 1) + kT)
            Next kT

            'Pick a reasonable number of points to use to get the rising and falling edges
            Dim nfit As Integer = PowerThreshedNearPeak.NRows / 4
            Dim myOrder As Integer = 0
            If nfit < 3 Then myOrder = 1

            'Find the maximimum
            If nfit < 2 Then    'Not enough data to fit the rising and falling edges. Punt.
                Return Times(PeakIndex)
            Else
                Dim Tr As Double = findtrImp_wls2(TimesNearPeak, PowerThreshedNearPeak, 0.5, nfit, -1, myOrder, 0, False)  'Rising edge
                Dim Tf As Double = findtrImp_wls2(TimesNearPeak, PowerThreshedNearPeak, 0.5, nfit, 1, myOrder, 0, False)   'Falling edge
                Return 0.5 * (Tr + Tf)  'The center of the peak
            End If

        End Function

    End Class





    ''' <summary>
    ''' Post processor for calculating power delay profile.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_PDP_TemporalInput
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub


        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Temporal PDP (.waveform)"
                myNameList(1) = "PDP noise threshold (dB, .parameter)"    'The noise threshold. Values of impulse responce will be set to 0 if they are below this value for the purposes of calculating certain metrics.
                myNameList(2) = "Delay-interval threshold (dB, .parameter)"
                myNameList(3) = "Threshold for the number of multipath components (dB, .parameter)"
                myNameList(4) = "Proportion of energy in delay window (0.90 default, .parameter)"
                myNameList(5) = "Optional user scaling factor (dB, .parameter)"

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'These are set up for 1-4 port problems
                Dim FileExtensions(4) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".waveform" : FileExtensions(4) = ".meas"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor calculates various metrics from the maximum-scaled power delay profile of the channel."
                myDescription(2) = "The power delay profile PDPamplitude is normalized so that when S21=1, the PDP is 1 at time 0."
                myDescription(4) = "The module returns a .variables file with the Average delay relative to the position of the first peak, RMS delay spread, delay window, delay interval, the number of multipath or signal components, the average group delay in ns, and the RMS path loss (in units of amplitude, not power, so look at this in dB), the average delay in absolute time, the position of the first peak in absolute time, the average delay with respect to highest peak, and the position of highest peak in absolute time. These values are followed by four calculations made with respect to fitted arrival times. This is more reasonable than the IUT definition when trying to get uncertainties. These values are the average fitted delay with respect to first peak, the position of first peak in absolute fitted time, the average fitted  delay with respect to highest peak, and the position of highest peak in absolute fitted time."
                myDescription(6) = "Written by Dylan Williams and Jeanne Quimby."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".power"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate mterics from power-delay profile"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = -1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property
        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNames(1) As String
                myFileNames(0) = "\PDPamplitude"
                myFileNames(1) = "\Metrics"
                Return myFileNames
            End Get
        End Property


        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            ''For testing parallel processing, input random delays to be sure that things get processed correctly.
            'Dim myPointer As Integer = MechanismList1.Pointer
            'If MechanismList1.Pointer > 0 And MechanismList1.Pointer Mod 2 = 0 Then
            '    System.Threading.Thread.Sleep(50)
            '    'MsgBox("Pointer input: " + myPointer.ToString, MsgBoxStyle.Information, "First time")
            '    'MsgBox("Pointer input: " + myPointer.ToString + "  Pointer output: " + MechanismList1.Pointer.ToString, MsgBoxStyle.Information, "First time")
            'End If


            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim PDP As RealMatrix : PDP = MechValues(0).getSParams(MechanismList1)   'myNameList(0) = "Temporal PDP (.waveform)"  
            Dim UserScale As Double = Math.Pow(10.0, MechValues(5).MechanismValue(MechanismList1) / 20.0) 'myNameList(5) = "Optional user scaling factor (1 default, .parameter)"
            For kT As Integer = 1 To PDP.NRows
                PDP(kT, 2) = UserScale * PDP(kT, 2)
            Next

            'Transform to complex baseband. The times are set by the user from the "run>set output times" pull-down menu.
            Dim Times As New RealMatrix(PDP.NRows), CBB As New RealMatrix(PDP.NRows)
            Times.Vector(1) = PDP.Vector(1) : CBB = PDP.Vector(2)

            'Calculate power-delay profile and various metrics
            Dim PDP_CD As New RealMatrix(Times.NRows)     'Cumulaive power in the PDP.

            'Set the thresholds
            Dim PowerThreshed As New RealMatrix(Times.NRows)
            Dim PowerMcThreshed As New RealMatrix(Times.NRows)
            Dim DelayAvg As Double = 0.0, PowerThreshTotal As Double = 0.0, PowerMcThreshTotal As Double = 0.0
            Dim tau_a As Double = 0.0, tau_a_fit As Double = 0.0, tau_a_index As Integer = 0, FirstPeakValue As Double = 0.0, FirstPeak As Boolean = True 'tau_a defined in ITU-% P.1407-5, page 5, section 2.2.2
            Dim tau_a_max As Double = 0.0, tau_a_max_fit As Double = 0.0, tau_a_max_index As Integer = 0   'tau_a defined as maximum peak
            Dim Threshhold As Double = Math.Pow(10.0, -Math.Abs(MechValues(1).MechanismValue(MechanismList1)) / 10.0)        'myNameList(1) = "Noise threshold (dB, .parameter)"    'The noise threshold. Values of impulse responce will be set to 0 if they are below this value for the purposes of calculating certain metrics.
            Dim DIThreshhold As Double = Math.Pow(10.0, -Math.Abs(MechValues(2).MechanismValue(MechanismList1)) / 10.0)      'myNameList(2) = "Delay-interval threshold (dB, .parameter)"
            Dim DI1 As Double = Times(Times.NRows)  'Was set to N, the number of frequencies. I think that this was wrong.
            Dim DI2 As Double = 1, DIfound As Boolean = False
            Dim MCThreshhold As Double = Math.Pow(10.0, -Math.Abs(MechValues(3).MechanismValue(MechanismList1)) / 10.0)      'myNameList(3) = "Threshold for the number of multipath components (dB, .parameter)"
            Dim MCmax As Double = 0.0
            Dim PowerLast As Double = 0.0

            'Find the peak power
            For kT As Integer = 1 To Times.NRows
                Dim Amplitude As Double = Abs(CBB(kT))  'Get both the power and thresholded power
                Dim Power As Double = Amplitude * Amplitude
                If MCmax < Power Then MCmax = Power : tau_a_max = Times(kT) : tau_a_max_index = kT 'The max power
            Next kT

            'Define the Multipath Component threshold with respect to the peak component.
            MCThreshhold = MCmax * MCThreshhold                         'Define multipath threshold with respect to peak power
            If MCThreshhold < Threshhold Then MCThreshhold = Threshhold 'Set to noise threshold if it is below the noise threshold

            'Step through the times and find the average and thresholded powers, and the avearage delay.
            For kT As Integer = 1 To Times.NRows    'Step through the times
                Dim Amplitude As Double = Abs(CBB(kT))  'Get both the power and thresholded power
                Dim Power As Double = Amplitude * Amplitude
                Dim PowerTresh As Double = Power    'The thresh-holded power
                If Power < Threshhold Then PowerTresh = 0.0
                PowerThreshed(kT) = PowerTresh      'Keep track of the thresh-holded power for later

                Dim McPowerThresh As Double = PowerTresh
                If McPowerThresh < MCThreshhold Then McPowerThresh = 0.0
                PowerMcThreshed(kT) = McPowerThresh

                'Get the start of the delay interval, look for first and last change in sign
                If kT > 1 Then
                    If (PowerLast - DIThreshhold) * (Power - DIThreshhold) <= 0.0 Then  'Found a change in sign, get intercept
                        'DI2 =  'The last change in sign
                        DI2 = (Times(kT - 1) + Times(kT)) / 2.0
                        If Power <> PowerLast Then DI2 = Times(kT - 1) + (DIThreshhold - PowerLast) * (Times(kT) - Times(kT - 1)) / (Power - PowerLast)
                        If Not DIfound Then
                            DI1 = DI2   'The first chang in sign
                        End If
                        DIfound = True
                    End If
                End If
                'Generate the cumulitive power-delay profile
                If kT = 1 Then
                    PDP_CD(kT) = PowerTresh
                Else
                    PDP_CD(kT) = PDP_CD(kT - 1) + PowerTresh
                End If

                'Sum up quantities needed to calculate average delay
                'DelayAvg += PowerTresh * Times(kT)
                PowerThreshTotal += PowerTresh
                DelayAvg += McPowerThresh * Times(kT) : PowerMcThreshTotal += McPowerThresh

                'tau_a defined in ITU-% P.1407-5, page 5, section 2.2.2
                'Dim tau_a As Double = 0.0, FirstPeakValue As Double = 0.0, FirstPeak As Boolean = True
                If FirstPeak Then                           'Make sure we are still on or before the first peak
                    If Power >= MCThreshhold Then   'Make sure we are on the first peak
                        If FirstPeakValue <= Power Then     'We are climbing the first peak
                            FirstPeakValue = Power          'Keep track of where we are
                            tau_a = Times(kT)
                            tau_a_index = kT
                        Else                                'We just started to descend off of the first peak
                            FirstPeak = False               'Stop looking for the first peak
                        End If
                    Else
                        If FirstPeakValue > 0.0 Then FirstPeak = False  'We were on the peak, but the power dropped to zero. So we must have descended from the peak
                    End If
                End If

                'Keep track of the power we had last time in the calculation
                PowerLast = Power

            Next kT
            'DelayAvg = DelayAvg / PowerThreshTotal  'The power-weighted delay in absolute time
            DelayAvg = DelayAvg / PowerMcThreshTotal  'The power-weighted delay in absolute time

            'find the number of multipath componenets
            Dim MCnumber As Double = 0.0
            For kT As Integer = 1 To Times.NRows - 1
                If (PowerThreshed(kT) - MCThreshhold) * (PowerThreshed(kT + 1) - MCThreshhold) <= 0.0 Then MCnumber += 0.5
            Next kT

            'Find the delay window
            Dim DWThreshhold As Double = MechValues(3).MechanismValue(MechanismList1)   'myNameList(4) = "Proportion of energy in delay window (0.90 default, .parameter)"
            If DWThreshhold < 0.5 Or DWThreshhold >= 1.0 Then DWThreshhold = 0.9
            Dim DWT1 As Double = (1.0 - DWThreshhold) / 2.0, DWT2 As Double = 1.0 - DWT1
            Dim kT_5 As Integer = 0, kT_95 As Integer = 0
            For kT As Integer = 1 To Times.NRows - 1    'Step through the times
                If (PDP_CD(kT) - DWT1 * PDP_CD(Times.NRows)) * (PDP_CD(kT + 1) - DWT1 * PDP_CD(Times.NRows)) <= 0 Then kT_5 = kT
                If (PDP_CD(kT) - DWT2 * PDP_CD(Times.NRows)) * (PDP_CD(kT + 1) - DWT2 * PDP_CD(Times.NRows)) <= 0 Then kT_95 = kT
            Next kT
            Dim t_5 As Double = 0.0, t_95 As Double = 0.0   'Default valuse if we could not find any threshhold crossings
            If kT_5 > 0 And kT_95 > 0 Then                   'We found some threshhold crossings
                If kT_5 = 1 Then kT_5 = 2
                t_5 = (Times(kT_5 + 1) + Times(kT_5)) / 2.0
                If PDP_CD(kT_5 + 1) <> PDP_CD(kT_5) Then t_5 = Times(kT_5) + (DWT1 * PDP_CD(Times.NRows) - PDP_CD(kT_5)) * (Times(kT_5 + 1) - Times(kT_5)) / (PDP_CD(kT_5 + 1) - PDP_CD(kT_5))
                t_95 = (Times(kT_95 + 1) + Times(kT_95)) / 2.0
                If PDP_CD(kT_95 + 1) <> PDP_CD(kT_95) Then t_95 = Times(kT_95) + (DWT2 * PDP_CD(Times.NRows) - PDP_CD(kT_95)) * (Times(kT_95 + 1) - Times(kT_95)) / (PDP_CD(kT_95 + 1) - PDP_CD(kT_95))
            End If

            'Find rms delay spread
            Dim RMSDelaySpread As Double = 0.0
            For kT As Integer = 1 To Times.NRows    'Step through the times
                'RMSDelaySpread += PowerThreshed(kT) * ((Times(kT) - DelayAvg) ^ 2)
                RMSDelaySpread += PowerMcThreshed(kT) * ((Times(kT) - DelayAvg) ^ 2)
            Next kT
            RMSDelaySpread = Math.Sqrt(RMSDelaySpread / PowerMcThreshTotal)


            'Package up the outputs for the MUF
            'The module also returns a .variables file with the Average delay, RMS delay spread, delay window, delay interval, the number of multipath or signal components, the average group delay in ns, and the RMS path loss (in units of amplitude, not power, so look at this in dB)."
            Dim myMetrics As New RealMatrix(15, 2, ".variables")
            myMetrics(1, 1) = 1 : myMetrics(1, 2) = DelayAvg - tau_a    'Average delay with respect to first peak

            myMetrics(2, 1) = 2 : myMetrics(2, 2) = RMSDelaySpread      'RMS Delay Spread
            ''For testing parallel processing, input random delays to be sure that things get processed correctly.
            'myMetrics(1, 2) = myPointer 'Just for test.
            'myMetrics(2, 2) = MechanismList1.Pointer 'Just for test.
            myMetrics(3, 1) = 3 : myMetrics(3, 2) = t_95 - t_5          'delay window
            myMetrics(4, 1) = 4 : myMetrics(4, 2) = DI2 - DI1           'delay interval
            myMetrics(5, 1) = 5 : myMetrics(5, 2) = MCnumber            'number of multipath or signal components
            myMetrics(6, 1) = 6 : myMetrics(6, 2) = 0   'Average group delay
            myMetrics(7, 1) = 7 : myMetrics(7, 2) = 0   'Average S21 (Path loss) (use dB to view in .meas file)
            myMetrics(8, 1) = 8 : myMetrics(8, 2) = DelayAvg            'Average delay in absolute time
            myMetrics(9, 1) = 9 : myMetrics(9, 2) = tau_a               'Position of first peak in absolute time
            myMetrics(10, 1) = 10 : myMetrics(10, 2) = DelayAvg - tau_a_max     'Average delay with respect to highest peak
            myMetrics(11, 1) = 11 : myMetrics(11, 2) = tau_a_max                'Position of highest peak in absolute time
            tau_a_fit = PeakCenter(tau_a_index, Times, PowerThreshed)           'Fit the first arrival peak
            tau_a_max_fit = PeakCenter(tau_a_max_index, Times, PowerThreshed)   'Fit the first maximum peak
            'Add in components with respect to fitted arrival times.
            'This is more reasonable than the IUT definition when trying to get uncertainties
            myMetrics(12, 1) = 12 : myMetrics(12, 2) = DelayAvg - tau_a_fit     'Average fitted delay with respect to first peak
            myMetrics(13, 1) = 13 : myMetrics(13, 2) = tau_a_fit                'Position of first peak in absolute fitted time
            myMetrics(14, 1) = 14 : myMetrics(14, 2) = DelayAvg - tau_a_max_fit 'Average fitted  delay with respect to highest peak
            myMetrics(15, 1) = 15 : myMetrics(15, 2) = tau_a_max_fit            'Position of highest peak in absolute fitted time


            'Get returned values ready for the MUF
            Dim myReturns(1) As Object
            myReturns(0) = PDP
            myReturns(1) = myMetrics

            Return myReturns

        End Function



        ''' <summary>
        ''' Fit the arrival time of the first peak
        ''' </summary>
        ''' <param name="PeakIndex">Peak arrival time index from ITU definition</param>
        ''' <param name="Times">An array of the times.</param>
        ''' <param name="PowerThreshed">An array of the threshholded powers.</param>
        ''' <returns>This is much better than choosing the maximum value when picking the arrival time, as done in the ITU.
        ''' Choosing the maximum value implies integer time points, and uncertainties may not make much sense.</returns>
        Private Function PeakCenter(ByVal PeakIndex As Integer, ByRef Times As RealMatrix, ByRef PowerThreshed As RealMatrix) As Double

            'Get a reasonable array of times around the peak.
            Dim Kfirst As Integer = PeakIndex, Klast As Integer = PeakIndex, PeakMax As Double = PowerThreshed(PeakIndex)
            While Kfirst > 1 And PowerThreshed(Kfirst) / PeakMax > 0.3
                Kfirst += -1
            End While
            While Klast < PowerThreshed.NRows And PowerThreshed(Klast) / PeakMax > 0.3
                Klast += 1
            End While
            Dim PowerThreshedNearPeak As New RealMatrix(1 + Klast - Kfirst), TimesNearPeak As New RealMatrix(1 + Klast - Kfirst)
            For kT As Integer = 1 To PowerThreshedNearPeak.NRows
                PowerThreshedNearPeak(kT) = PowerThreshed((Kfirst - 1) + kT)
                TimesNearPeak(kT) = Times((Kfirst - 1) + kT)
            Next kT

            'Pick a reasonable number of points to use to get the rising and falling edges
            Dim nfit As Integer = PowerThreshedNearPeak.NRows / 4
            Dim myOrder As Integer = 0
            If nfit < 3 Then myOrder = 1

            'Find the maximimum
            If nfit < 2 Then    'Not enough data to fit the rising and falling edges. Punt.
                Return Times(PeakIndex)
            Else
                Dim Tr As Double = findtrImp_wls2(TimesNearPeak, PowerThreshedNearPeak, 0.5, nfit, -1, myOrder, 0, False)  'Rising edge
                Dim Tf As Double = findtrImp_wls2(TimesNearPeak, PowerThreshedNearPeak, 0.5, nfit, 1, myOrder, 0, False)   'Falling edge
                Return 0.5 * (Tr + Tf)  'The center of the peak
            End If

        End Function

    End Class


    ''' <summary>
    ''' Post processor for adding uncertainties to uncalibrated S-paraemter data.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AddUncertainties_Switch
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myMeasExt As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Measurements to be corrected (.s2p)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Calibration matrix scattering-parameter (.s4p)"    'Has 4x4 s-parameters of the second-tier calibrations matrices.
                myNameList(1) = "Switch terms (.switch)"    'Has 4x4 s-parameters of the second-tier calibrations matrices.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'These are set up for 2 port sparameter problems. Don't allow for .w2p files.
                Dim FileExtensions(3) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".switch" : FileExtensions(2) = ".s2p" : FileExtensions(3) = ".s4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Two-Tier Interior Crosstalk Calibration Model"
                PullDownList(1) = "Conventional Calibration Model"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Add uncertainties to calibrated data"
                'PullDownList(1) = "Correct uncalibrated data and add uncertainties"
                'PullDownList(2) = "Uncorrect calibrated data and add uncertainties"
                'PullDownList(3) = "Add uncertainties to uncalibrated data"
                'PullDownList(4) = "Do not correct or add uncertainties"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Don't normalize phase of .wnp fundamentals to zero"
                'PullDownList(1) = "Normalize phase of .wnp fundamentals to zero"
                'PullDownList(2) = "Convert .wnp files to .snp files"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor corrects uncorrected 2-port scattering-parameter data that must be corrected with switch terms. Corrected measurements may have been calibrated by conventional calibration software packages that do not support uncertainty estimates. The uncertainties are taken from the solution.meas file containing the .s4p scattering-parameter matrix defining the VNA calibration and its uncertainties. The corrected data files to which the uncertainties are added are put in the lower box."
                myDescription(2) = "The uncertainties are captured as the difference between a set of perturbed calibrations and the nominal calibration. The solution.meas file may be created with a single run of the VNA Uncertainty Calculator, or by combining a set of second-tier calibrations generated in combine with the ""Run>Estimate error in single measurement"" option set. The uncertainties are usually valid only for a particular calibration approach and setup that has already been modeled in the uncertainty framework. See the help file for more information. The default frequency list is determined from the data to be corrected in the lower input box of this post processor."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Correct uncalibrated scattering-parameter data"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = -1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the input calibration
            Dim myRealMatrix2 As RealMatrix : myRealMatrix2 = MechValues(1).getSParams(MechanismList1)   'This is the input calibration
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MultipleModelInput(0).getSParams(MechanismList1)  'This is the corrected data to be calibrated.

            'Read in the calibration and the measurement
            Dim myCalCols As Integer = myRealMatrix0.NCols
            Dim myMeasCols As Integer = myRealMatrix1.NCols

            'Check the input to see if the file types are compatible.
            If myRealMatrix0.NPorts <> 4 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The calibration matrix was not a 4-port scattering-parameter matrix" : Return ToArray(myRealMatrix1)
            If myRealMatrix1.NPorts <> 2 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The corrected data was not a 2-port scattering-parameter matrix" : Return ToArray(myRealMatrix1)

            'Interpolate the calibration to the frequencies of the input data.
            Dim myCalibration As New RealMatrix(myRealMatrix0.Vector(1).NRows, myCalCols, ".s4p")
            myCalibration.Fill(myRealMatrix0)
            'If we have a zero-frequency point, this must be DC data. In this case, put in transparent error boxes.
            If myCalibration(1, 1) = 0.0 Then
                For kk As Integer = 2 To myCalibration.NCols
                    myCalibration(1, kk) = 0.0
                Next kk
                '4-port calibration matrix, 2-port data
                myCalibration(1, 6) = 1.0       'S13
                myCalibration(1, 18) = 1.0      'S31
                myCalibration(1, 16) = 1.0      'S24
                myCalibration(1, 28) = 1.0      'S42
            End If
            'myCalibration.InterpolationFrequencyList(MechanismList1.MagnitudePhaseInterpolationIndex) = myRealMatrix1.Vector(1)

            ''If this is the first time, set the presolution in MechanismList1.
            'If MechanismList1.InitializeFlag Then
            '    MechanismList1.PreSolution = myCalibration
            'End If

            'Also store this calibration in the presolution in MechanismList2.
            Dim MechanismList2 As New MechanismList(MechanismList1.FrequencyList, 6.95, -0.01)  'This Mechanism list will have the difference calibration.
            MechanismList2.PreSolution = myCalibration 'MINUS PreSolution from MechanismList1
            MechanismList2.SwitchTerms = myRealMatrix2  'Add in the switch terms.

            'Put the input scattering parameters into an S-parameter structure and calibrate them with the difference calibration.
            Dim myInputMeasurement As New RealMatrix(myRealMatrix1.Vector(1).NRows, myMeasCols, myMeasExt)
            myInputMeasurement.Fill(myRealMatrix1)
            '1) = "Correct uncalibrated data and add uncertainties"
            myInputMeasurement.Calibrate(MechanismList2, myPullDownSelection1 = 0)      'Calibrate with the pertrubed calibration.

            'That's all folks!
            Return ToArray(myInputMeasurement)

        End Function

    End Class


    ''' <summary>
    ''' Post processor for adding uncertainties to calibrated data.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AddUncertainties
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myMeasExt As String = ""
        Private myUnpreturbedCalibration As New RealMatrix(1)

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Measurements to be corrected"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Calibration matrix scattering-parameter (.meas)"    'Has 4x4 s-parameters of the second-tier calibrations matrices.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'These are set up for 1-4 port problems
                Dim FileExtensions(10) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".s6p" : FileExtensions(2) = ".s8p"
                For k As Integer = 1 To 4
                    FileExtensions(2 * k + 1) = ".s" + k.ToString + "p"
                    FileExtensions(2 * k + 2) = ".w" + k.ToString + "p"
                Next k
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Two-Tier Interior Crosstalk Calibration Model"
                PullDownList(1) = "Conventional Calibration Model"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(4) As String
                PullDownList(0) = "Add uncertainties to calibrated data"
                PullDownList(1) = "Correct uncalibrated data and add uncertainties"
                PullDownList(2) = "Uncorrect calibrated data and add uncertainties"
                PullDownList(3) = "Add uncertainties to uncalibrated data"
                PullDownList(4) = "Do not correct or add uncertainties"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Don't normalize phase of .wnp fundamentals to zero"
                PullDownList(1) = "Normalize phase of .wnp fundamentals to zero"
                PullDownList(2) = "Convert .wnp files to .snp files"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor adds uncertainties to corrected or uncorrected data. Corrected measurements may have been calibrated by conventional calibration software packages that do not support uncertainty estimates. The uncertainties are taken from the solution.meas file containing the scattering-parameter matrix defining the VNA calibration and its uncertainties. The corrected data files to which the uncertainties are added are put in the lower box."
                myDescription(2) = "The uncertainties are captured as the difference between a set of perturbed calibrations and the nominal calibration. The solution.meas file may be created with a single run of the VNA Uncertainty Calculator, or by combining a set of second-tier calibrations generated in combine with the ""Run>Estimate error in single measurement"" option set. The uncertainties are usually valid only for a particular calibration approach and setup that has already been modeled in the uncertainty framework. See the help file for more information. The default frequency list is determined from the data to be corrected in the lower input box of this post processor."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return myMeasExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Correct or add uncertainties to calibrated data"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = -1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the input calibration
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MultipleModelInput(0).getSParams(MechanismList1)  'This is the corrected data to be calibrated.

            'Read in the calibration and the measurement
            Dim myCalCols As Integer = myRealMatrix0.NCols, myCalExt As String = myRealMatrix0.DataType
            Dim myMeasCols As Integer = myRealMatrix1.NCols
            myMeasExt = myRealMatrix1.DataType

            'Check the input to see if the file types are compatible.
            Select Case myRealMatrix0.NPorts
                Case 2  '1-port data in, 2x2 calibration matrix
                    If myRealMatrix1.NPorts <> 1 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The corrected data was not a 1-port scattering-parameter or wave matrix" : Return ToArray(myRealMatrix1)
                Case 4  '2-port data in, 4x4 calibration matrix
                    If myRealMatrix1.NPorts <> 2 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The corrected data was not a 2-port scattering-parameter or wave matrix" : Return ToArray(myRealMatrix1)
                Case 6  '3-port data in, 6x6 calibration matrix
                    If myRealMatrix1.NPorts <> 3 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The corrected data was not a 3-port scattering-parameter or wave matrix" : Return ToArray(myRealMatrix1)
                Case 8  '4-port data in, 8x8 calibration matrix
                    If myRealMatrix1.NPorts <> 4 Then MechanismList1.FatalError = True : MechanismList1.ErrorReport = "The corrected data was not a 4-port scattering-parameter or wave matrix" : Return ToArray(myRealMatrix1)
                Case Else
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Only 1, 2, 3, or 4 port calibrations allowed." : Return ToArray(myRealMatrix1)
            End Select

            'Interpolate the calibration to the frequencies of the input data.
            Dim myCalibration As New RealMatrix(myRealMatrix0.Vector(1).NRows, myCalCols, myCalExt)
            myCalibration.Fill(myRealMatrix0)
            'If we have a zero-frequency point, this must be DC data. In this case, put in transparent error boxes.
            If myCalibration(1, 1) = 0.0 Then
                For kk As Integer = 2 To myCalibration.NCols
                    myCalibration(1, kk) = 0.0
                Next kk
                Select Case myRealMatrix0.NPorts
                    Case 2  '2-port calibration matrix, 1-port data
                        myCalibration(1, 4) = 1.0       'S21
                        myCalibration(1, 6) = 1.0      'S12
                    Case 4  '4-port calibration matrix, 2-port data
                        myCalibration(1, 6) = 1.0       'S13
                        myCalibration(1, 18) = 1.0      'S31
                        myCalibration(1, 16) = 1.0      'S24
                        myCalibration(1, 28) = 1.0      'S42
                    Case 6  '6-port calibration matrix, 3-port data
                        myCalibration(1, 8) = 1.0       'S14
                        myCalibration(1, 22) = 1.0      'S25
                        myCalibration(1, 36) = 1.0      'S36
                        myCalibration(1, 38) = 1.0      'S41
                        myCalibration(1, 52) = 1.0      'S52
                        myCalibration(1, 66) = 1.0      'S63
                    Case 8  '8-port calibration matrix, 4-port data
                        myCalibration(1, 10) = 1.0      'S15
                        myCalibration(1, 28) = 1.0      'S26
                        myCalibration(1, 46) = 1.0      'S37
                        myCalibration(1, 64) = 1.0      'S48
                        myCalibration(1, 66) = 1.0      'S51
                        myCalibration(1, 84) = 1.0      'S62
                        myCalibration(1, 102) = 1.0     'S73
                        myCalibration(1, 120) = 1.0     'S84
                End Select
            End If
            'myCalibration.InterpolationFrequencyList(MechanismList1.MagnitudePhaseInterpolationIndex) = myRealMatrix1.Vector(1)

            'Set the presolution in MechanismList1 to the unperturbed calibration.
            If MechanismList1.InitializeFlag Then
                myUnpreturbedCalibration.Fill(myCalibration)
            End If
            MechanismList1.PreSolution = myUnpreturbedCalibration   'Always set the presolution to the unperturbed calibration.

            'Also store this calibration in the presolution in MechanismList2.
            Dim MechanismList2 As New MechanismList(MechanismList1.FrequencyList, 6.95, -0.01)  'This Mechanism list will have the difference calibration.
            MechanismList2.PreSolution = myCalibration 'MINUS PreSolution from MechanismList1

            'Put the input scattering parameters into an S-parameter structure and calibrate them with the difference calibration.
            Dim myInputMeasurement As New RealMatrix(myRealMatrix1.Vector(1).NRows, myMeasCols, myMeasExt)
            myInputMeasurement.Fill(myRealMatrix1)
            Select Case myPullDownSelection2
                Case -1, 0  '0) = "Add uncertainties to calibrated data"
                    myInputMeasurement.UnCalibrate(MechanismList1, myPullDownSelection1 = 0)    'Uncalibrate with the nominal calibration.
                    myInputMeasurement.Calibrate(MechanismList2, myPullDownSelection1 = 0)      'Recalibrate with the pertrubed calibration.
                Case 1      '1) = "Correct uncalibrated data and add uncertainties"
                    myInputMeasurement.Calibrate(MechanismList2, myPullDownSelection1 = 0)      'Calibrate with the pertrubed calibration.
                Case 2      '2) = "Uncorrect calibrated data and add uncertainties"
                    myInputMeasurement.UnCalibrate(MechanismList2, myPullDownSelection1 = 0)    'Uncalibrate with the pertrubed calibration.
                Case 3      '3) = "Add uncerrtainties to uncalibrated data
                    myInputMeasurement.Calibrate(MechanismList1, myPullDownSelection1 = 0)      'Calibrate with the nominal calibration.
                    myInputMeasurement.UnCalibrate(MechanismList2, myPullDownSelection1 = 0)    'Uncalibrate with the pertrubed calibration.
                Case Else   'Do nothing
            End Select

            If InStr(myInputMeasurement.DataType, ".w") > 0 Then  'This is a .wnp file. Set the phase of the first frequency to zero?
                Select Case myPullDownSelection3
                    Case -1, 0   'Do nothing
                    Case 1  'Normalize funamental phase
                        Call NormalizeFundamental(myInputMeasurement, "")
                    Case 2  'Save .snp file
                        myInputMeasurement = myInputMeasurement.WnP_to_SnP
                        myMeasExt = myInputMeasurement.DataType
                End Select
            End If

            'That's all folks!
            Return ToArray(myInputMeasurement)

        End Function

    End Class


    ''' <summary>
    ''' Post processor for Calculating RLGC from characteristic impedance from gamma.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_RLGC
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Effective Dielectric Constant (.complex)"              'effective dielectric constant.
                myNameList(1) = "Characteristic Impedance (ohms, .complex)"              'Characteristic impedance.
                'myNameList(1) = "Capacitance per unit length (pf/cm)"               'Used to estimate Z0 from effective dielectric constant
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".meas_archive"
                'FileExtensions(3) = ".parameter" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor calculates the per-unit-length parameters R, L, G, C from the characteristic impedance of a transmission line from the effective dielectric constant and the capactitance per unit length of the line. "
                myDescription(2) = "The units are Frequency (GHz), R (ohms/m), L (H/m), G (S/m), C (F/m)."
                myDescription(4) = "We recently added the relative phase constant and loss (dB/cm)."
                myDescription(6) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".complex"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calcuate R, L, G, C from Z0 and effective dielectric constant"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property




        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(1) As String
                OutputNames(0) = "\RLGC"
                OutputNames(1) = "\PropagationConst"
                Return OutputNames
            End Get
        End Property



        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the input effective dielectric constant
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)   'This is the characteristic impedance

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 3 Then MechanismList1.ErrorReport = "The effective dielectric contant file did not have three columns" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0)
            If myRealMatrix1.NCols <> 3 Then MechanismList1.ErrorReport = "The characteristic impedance file did not have three columns" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0)

            Dim Outputs(1) As Object
            Dim myOutputMatrix As New RealMatrix(myRealMatrix0.NRows, 5, ".complex")
            myOutputMatrix.Vector(1) = myRealMatrix0.Vector(1)
            Dim myOutputMatrixLoss As New RealMatrix(myRealMatrix0.NRows, 3, ".complex")
            myOutputMatrixLoss.Vector(1) = myRealMatrix0.Vector(1)
            Outputs(0) = myOutputMatrix : Outputs(1) = myOutputMatrixLoss

            For k As Integer = 1 To myRealMatrix0.NRows

                Dim omega As Double = 2.0 * Math.PI * MechanismList1.FrequencyList(k) * 1000000000.0 '1/s
                Dim GAMMA As Complex = ModelModule.GammaFromEpsEff(toComplex(myRealMatrix0(k, 2), myRealMatrix0(k, 3)), MechanismList1.FrequencyList(k))
                Dim Z0 As Complex = toComplex(myRealMatrix1(k, 2), myRealMatrix1(k, 3))

                'Find R, L, G, C
                Dim X As Complex = GAMMA * Z0
                myOutputMatrix(k, 2) = X.Re   'ohms/m
                myOutputMatrix(k, 3) = X.Im / omega   'H/m
                X = GAMMA / Z0
                myOutputMatrix(k, 4) = X.Re   'S/m
                myOutputMatrix(k, 5) = X.Im / omega   'F/m

                'From MultiCal
                '8114    Temp=Gamma/(.20958450*Freq(Ifreq))
                '8116    Eps(Ifreq,0)=-Temp*Temp
                '8118    Prop(Ifreq)=CMPLX(IMAG(Temp),8.6858896*REAL(Gamma))
                'Result is Phase Constant (relative) and Loss (dB/cm)
                '20.95845 is (2 pi / c) * 10^9, with the 10^9 needed because f is in GHz
                myOutputMatrixLoss(k, 2) = GAMMA.Im / (20.95845 * MechanismList1.FrequencyList(k))      'Phase Constant (relative)
                'Gamma is in m^-1. But the MultiCal formula was written for cm^-1.
                myOutputMatrixLoss(k, 3) = 0.086858896 * GAMMA.Re                                       'Loss (dB/cm)

            Next

            'That's all folks!
            Return Outputs

        End Function

    End Class

    ''' <summary>
    ''' Post processor for Calculating characteristic impedance from gamma.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Z0Gamma
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Effective Dielectric Constant (.complex)"              'effective dielectric constant.
                myNameList(1) = "Capacitance per unit length (pf/cm)"               'Used to estimate Z0 from effective dielectric constant
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(5) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".parameter"
                FileExtensions(3) = ".meas_archive" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calculates the characteristic impedance of a transmission line from the effective dielectric constant and the capactitance per unit length of the line. "
                myDescription(2) = "See D. F. Williams and R. B. Marks, ""Transmission Line Capacitance Measurement,"" IEEE Microwave and Guided Wave Letters, vol. 1, no. 9, pp. 243-245, Sept. 1991 and R. B. Marks and D. F. Williams, ""Characteristic Impedance Determination using Propagation Constant Measurement,"" IEEE Microwave and Guided Wave Letters, vol. 1, no. 6, pp. 141-143, June 1991."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".complex"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calcuate Z0 from effective dielectric constant"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the input effective dielectric constant
            Dim C As Double = MechValues(1).MechanismValue(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 3 Then MechanismList1.ErrorReport = "The effective dielectric contant file did not have three columns" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0)
            If C <= 0.0 Then MechanismList1.ErrorReport = "The capactiance was not positive" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0)

            Dim myOutputMatrix0 As RealMatrix = Z0GammaFromEpsEff(myRealMatrix0, C)
            Dim myOutputMatrix As New RealMatrix(myRealMatrix0.NRows, 3, ".complex")
            myOutputMatrix.Vector(1) = myOutputMatrix0.Vector(1)
            myOutputMatrix.Vector(2) = myOutputMatrix0.Vector(2)
            myOutputMatrix.Vector(3) = myOutputMatrix0.Vector(3)

            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for adjusting coupling coefficients to account for required excess line lengths.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AdjustCouplingCoef
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Calibration matrix scattering-parameters (.meas)"      'Has 4x4 s-parameters of the second-tier calibrations matrices.
                myNameList(1) = "Distance between cross-talk standards"                 'Used to estimate effective dielectric constant
                myNameList(2) = "Substrate thickness"                                   'Used to estimate effective dielectric constant
                myNameList(3) = "Substrate relative dielectric constant"                'Used to estimate effective dielectric constant
                myNameList(4) = "Spacer thickness"                                   'Used to estimate effective dielectric constant
                myNameList(5) = "Spacer relative dielectric constant"                'Used to estimate effective dielectric constant
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(13) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".s2p" : FileExtensions(2) = ".s4p" : FileExtensions(3) = ".s6p" : FileExtensions(4) = ".s8p"
                FileExtensions(5) = ".s10p" : FileExtensions(6) = ".s12p" : FileExtensions(7) = ".s14p" : FileExtensions(8) = ".s16p"
                FileExtensions(9) = ".complex" : FileExtensions(10) = ".parameter"
                FileExtensions(11) = ".meas_archive" : FileExtensions(12) = ".sumofparameters" : FileExtensions(13) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(7) As String
                PullDownList(0) = "2-port measurement data (4x4 calibration matrix)"
                PullDownList(1) = "3-port measurement data (6x6 calibration matrix)"
                PullDownList(2) = "4-port measurement data (8x8 calibration matrix)"
                PullDownList(3) = "5-port measurement data (10x10 calibration matrix)"
                PullDownList(4) = "6-port measurement data (12x12 calibration matrix)"
                PullDownList(5) = "7-port measurement data (14x14 calibration matrix)"
                PullDownList(6) = "8-port measurement data (16x26 calibration matrix)"
                PullDownList(7) = "StatistiCAL solution vector"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor uses a parallel-plate model to correct to first order for the additional length between cross-talk standards present in the cross-talk standards but absent when measureing the DUT. "
                myDescription(2) = "The coupling is modeled as a surface wave propagating in the substrate with a spacer between the substrate and the chuck. Only the coupling terms are adjusted. Current experiments on the utility of this correction are inconclusive."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".s2p"
                Select Case myPullDownSelection1
                    Case 0, -1  '2-port data, 4x4 calibration matrix
                        myExt = ".s4p"
                    Case 1      '3-port data, 6x6 calibration matrix
                        myExt = ".s6p"
                    Case 2      '4-port data, 8x8 calibration matrix
                        myExt = ".s8p"
                    Case 3      '5-port data, 10c10 calibration matrix
                        myExt = ".s10p"
                    Case 4      '6-port data, 12x12 calibration matrix
                        myExt = ".s12p"
                    Case 5      '7-port data, 14x14 calibration matrix
                        myExt = ".s14p"
                    Case 6      '8-port data, 16x16 calibration matrix
                        myExt = ".s16p"
                    Case 7      'StatistiCAL solution vector
                        myExt = ".complex"
                End Select
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "First-order correction for distance between cross-talk standards"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the input calibration
            Dim myDistance As Double = MechValues(1).MechanismValue(MechanismList1)     'myNameList(1) = "Distance between cross-talk standards"                 'Used to estimate effective dielectric constant
            Dim mySubstrateThickness As Double = MechValues(2).MechanismValue(MechanismList1)     'myNameList(2) = "Substrate thickness"                                   'Used to estimate effective dielectric constant
            Dim mySubstrateEps As Double = MechValues(3).MechanismValue(MechanismList1)     'myNameList(3) = "Substrate relative dielectric constant"                'Used to estimate effective dielectric constant
            Dim mySpacerThickness As Double = MechValues(4).MechanismValue(MechanismList1)     'myNameList(4) = "Spacer thickness"                                   'Used to estimate effective dielectric constant
            Dim mySpacerEps As Double = MechValues(5).MechanismValue(MechanismList1)     'myNameList(5) = "Spacer relative dielectric constant"                'Used to estimate effective dielectric constant

            'Check the input to see if it has the right number of columns.
            Dim myCalCols As Integer = 33, myCalExt As String = ".s4p", myCalN As Integer = 4
            Select Case myPullDownSelection1
                Case 0, -1  '2-port data in, 4x4 calibration matrix
                    If myRealMatrix0.NCols <> 33 Then MechanismList1.ErrorReport = "The calibration file was not a 4x4 scattering-parameter matrix" : Return ToArray(myRealMatrix0)
                    myCalCols = 33 : myCalExt = ".s4p" : myCalN = 4
                Case 1      '3-port data in, 6x6 calibration matrix
                    If myRealMatrix0.NCols <> 73 Then MechanismList1.ErrorReport = "The calibration file was not a 6x6 scattering-parameter matrix" : Return ToArray(myRealMatrix0)
                    myCalCols = 73 : myCalExt = ".s6p" : myCalN = 6
                Case 2      '4-port data in, 8x8 calibration matrix
                    If myRealMatrix0.NCols <> 129 Then MechanismList1.ErrorReport = "The calibration file was not a 8x8 scattering-parameter matrix" : Return ToArray(myRealMatrix0)
                    myCalCols = 129 : myCalExt = ".s8p" : myCalN = 8
                Case 3      '5-port data in, 10x10 calibration matrix
                    If myRealMatrix0.NCols <> 201 Then MechanismList1.ErrorReport = "The calibration file was not a 10x10 scattering-parameter matrix" : Return ToArray(myRealMatrix0)
                    myCalCols = 201 : myCalExt = ".s8p" : myCalN = 8
                Case 4      '6-port data in, 12x12 calibration matrix
                    If myRealMatrix0.NCols <> 289 Then MechanismList1.ErrorReport = "The calibration file was not a 12x12 scattering-parameter matrix" : Return ToArray(myRealMatrix0)
                    myCalCols = 289 : myCalExt = ".s8p" : myCalN = 8
                Case 5      '7-port data in, 14x14 calibration matrix
                    If myRealMatrix0.NCols <> 393 Then MechanismList1.ErrorReport = "The calibration file was not a 14x14 scattering-parameter matrix" : Return ToArray(myRealMatrix0)
                    myCalCols = 393 : myCalExt = ".s8p" : myCalN = 8
                Case 6      '8-port data in, 16x16 calibration matrix
                    If myRealMatrix0.NCols <> 513 Then MechanismList1.ErrorReport = "The calibration file was not a 8x8 scattering-parameter matrix" : Return ToArray(myRealMatrix0)
                    myCalCols = 513 : myCalExt = ".s8p" : myCalN = 8
                Case 7  'StatistiCAL solution vector.
                    If myRealMatrix0.NCols <> 41 Then MechanismList1.ErrorReport = "The calibration file was not a StatistiCAL solution vector." : Return ToArray(myRealMatrix0)
                    myCalCols = 41 : myCalExt = ".txt" : myCalN = 0
            End Select
            If mySubstrateEps < 1.0 Then MechanismList1.ErrorReport = "Substrate relative dielectric constant less than 1.0" : Return ToArray(myRealMatrix0)
            If mySpacerEps < 1.0 Then MechanismList1.ErrorReport = "Spacer relative dielectric constant less than 1.0" : Return ToArray(myRealMatrix0)
            If mySubstrateThickness < 0.0 Then MechanismList1.ErrorReport = "Substrate thickness less than 0" : Return ToArray(myRealMatrix0)
            If mySpacerThickness < 0.0 Then MechanismList1.ErrorReport = "Spacer thickness less than 0" : Return ToArray(myRealMatrix0)
            If mySubstrateThickness = 0.0 And mySpacerThickness = 0.0 Then MechanismList1.ErrorReport = "Substrate and spacer thickness equal 0" : Return ToArray(myRealMatrix0)

            'Update the coupling terms.
            Dim myOutputMatrix As New RealMatrix(myRealMatrix0.NRows, myRealMatrix0.NCols, myRealMatrix0.DataType)
            myOutputMatrix.Fill(myRealMatrix0)  'make a copy

            'Work on the coupling terms.
            For k As Integer = 1 To myRealMatrix0.NRows 'Step through the frequencies.

                'Set up the problem
                Dim Freq As Double = myRealMatrix0(k, 1)
                Dim c As Double = 299792458.0   'm/s
                myOutputMatrix(k, 1) = Freq
                Dim k0 As Double = 2.0 * Math.PI * (Freq * 1000000000.0) / c
                Dim EffectiveDielectricConstant As Double = mySubstrateEps  'This is the default if we don't have two layers
                If mySubstrateThickness = 0.0 Then EffectiveDielectricConstant = mySpacerEps

                'Solve for the EffectiveDielectricConstant
                If mySubstrateThickness > 0.0 And mySpacerThickness > 0.0 Then

                    'Set up the problem variables
                    Dim K1 As Double = mySubstrateEps, K2 As Double = mySpacerEps
                    Dim t As Double = mySubstrateThickness, dminust As Double = mySpacerThickness
                    If mySubstrateEps < mySpacerEps Then    'Swap the roles of the two variables if the spacer has a larger dielectric constant
                        K2 = mySubstrateEps : K1 = mySpacerEps
                        dminust = mySubstrateThickness : t = mySpacerThickness
                    End If

                    'Set up the limits of the solution search
                    Dim hmax As Double = Math.Sqrt(K1 - K2) * k0, QmaxInf As Boolean = True, Qmax As Double = -1.0  'Corresponds to kdmin=0, q<0
                    Dim hmin As Double = 0.0, QminInf As Boolean = True, Qmin As Double = 1.0                       'Corresponds to kdmax=(pi/2)/t, q>0
                    Dim temp As Double = (K1 - K2) * k0 * k0 - (1.0 / (t * t)) * (Math.PI * Math.PI / 4.0)
                    If temp > 0.0 Then hmin = Math.Sqrt(temp)
                    Dim htol As Double = (hmax - hmin) * 0.000001
                    Dim hguess As Double = 0.0, kdguess As Double = 0.0, q As Double = 0.0

                    'Iterate to a solution
                    While hmax - hmin > htol
                        hguess = (hmax + hmin) / 2.0
                        kdguess = Math.Sqrt((K1 - K2) * k0 * k0 - hguess * hguess)
                        q = (kdguess / K1) * Math.Tan(kdguess * t) - (hguess / K2) * Math.Tanh(hguess * dminust)    '+ infinity at kdmax; hmin
                        If q > 0.0 Then 'kdguess is closer to kdmax;hmin
                            hmin = hguess : Qmin = q : QminInf = False  'This is the best guess that we have now for hmin
                        Else
                            hmax = hguess : Qmax = q : QmaxInf = False
                        End If
                    End While

                    'Calculate the effective dielectric constant
                    hguess = (hmax + hmin) / 2.0
                    kdguess = Math.Sqrt((K1 - K2) * k0 * k0 - hguess * hguess)
                    Dim Beta1 As Double = Math.Sqrt(K1 * k0 * k0 - kdguess * kdguess)
                    Dim Beta2 As Double = Math.Sqrt(K2 * k0 * k0 + hguess * hguess)
                    Dim Beta As Double = (Beta1 + Beta2) / 2.0
                    EffectiveDielectricConstant = Beta * Beta / (k0 * k0)

                End If

                'Create the factor we multiply by
                Dim lambda As Double = c / (Math.Sqrt(EffectiveDielectricConstant) * Freq * 1000000000.0)
                Dim theta = 2.0 * Math.PI * myDistance / lambda
                Dim myMultiplicationFactor As New Complex(1.0, 0.0)
                myMultiplicationFactor = Complex_Number_Class.Exp(toComplex(0.0, +theta))   'We would use a negative theta here to add delay. But we want to subtract the delay, so we use positive phase.

                If myCalN > 0 Then  'An .sxp file

                    'Step through the coupling terms and adjust them
                    Dim SMatrix As New ComplexMatrix(myCalN, myCalN)
                    SMatrix = myRealMatrix0.SMatrix(k)

                    For kRow As Integer = 1 To SMatrix.NRows
                        For kCol As Integer = 1 To SMatrix.NRows
                            'If XTalk term then multiply SMatrix(kRow,kCol) by myMultiplicationFactor
                            If kRow <> kCol Then    'Eliminate any reflection coefficients
                                If kRow < kCol Then 'See if kRow=kCol-myCalN/2
                                    If kRow <> kCol - myCalN / 2 Then SMatrix(kRow, kCol) = SMatrix(kRow, kCol) * myMultiplicationFactor
                                Else
                                    If kCol <> kRow - myCalN / 2 Then SMatrix(kRow, kCol) = SMatrix(kRow, kCol) * myMultiplicationFactor
                                End If
                            End If
                        Next kCol
                    Next kRow

                    'Update the result
                    myOutputMatrix.SMatrix(k) = SMatrix

                Else    'A StatistiCAL solution file

                    'Just correct the four crosstalk terms at the end of the solution vector
                    For kCol As Integer = 34 To 40 Step 2
                        Dim InputXtalk As New Complex(myRealMatrix0(k, kCol), myRealMatrix0(k, kCol + 1))
                        InputXtalk = InputXtalk * myMultiplicationFactor
                        myOutputMatrix(k, kCol) = InputXtalk.Re
                        myOutputMatrix(k, kCol + 1) = InputXtalk.Im
                    Next kCol

                End If

            Next k

            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for interpolating data to a common grid.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Interpolate
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myResultExtension As String = ".s2p"

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input measurements to be interpolated below."
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Target grid"    'Has target grid.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(45) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".model_archive" : FileExtensions(8) = ".cascade_archive" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                FileExtensions(13) = ".complex"
                For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                    FileExtensions(14 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                    FileExtensions(15 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                Next i1
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor interpolates multiple files to a target grid. By default the target grid is supplied by the first input to the post processor. This target grid can be overridden with the Run>Set frequencies pull-down menu."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, .s4p, etc.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return myResultExtension
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Interpolate to a fixed grid"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MultipleModelInput(0).getSParams(MechanismList1)  'This is the corrected data to be calibrated.
            myResultExtension = myRealMatrix1.DataType

            'Interpolate the calibration to the frequencies of the input data.
            Dim myResult As New RealMatrix(myRealMatrix1.NRows, myRealMatrix1.NCols, myResultExtension)
            myResult.Fill(myRealMatrix1)
            myResult.InterpolationFrequencyList(MechanismList1.MagnitudePhaseInterpolationIndex) = myRealMatrix1.Vector(1)

            'That's all folks!
            Return ToArray(myResult)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for adapter removal
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AdapterRemoval
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Left 4x4 scattering-parameter calibration matrix (.meas)"    'Has 4x4 s-parameters at first reference plane
                myNameList(1) = "Right 4x4 scattering-parameter calibration matrix (.meas)"    'Has 4x4 s-parameters at first reference plane
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".s4p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor finds the scattering parameters of an adapter from two calibrations. The first calibration is performed just to the left of the adapter. The second is performed just to the right of the adapter. The two calibrations do not have to be performed in the same media."
                myDescription(2) = "The first estimate for the adapter scattering parameters comes from the difference of the left calibrations port 1 error box (port 1 VNA terms only) and the right calibration port 1 error box (port 1 VNA terms and adapter). The second estimate for the adapter scattering parameters comes from the difference of the left calibrations port 2 error box (adapter and port 1 VNA terms) and the right calibrations port 2 error box (port 2 VNA terms only). The two estimates are then averaged. The default frequency list is determined from the first input to the post processor."
                myDescription(4) = "The approach was developed by Arkadiusz Lewandowski. The module was authored by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "NIST adapter removal"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 33 Then MechanismList1.ErrorReport = "The first input to the NIST Adapter Post Processor was not a 4x4 scattering-parameter matrix"
            If myRealMatrix1.NCols <> 33 Then MechanismList1.ErrorReport = "The second input to the NIST Adapter Post Processor was not a 4x4 scattering-parameter matrix"
            If myRealMatrix1.NRows <> myRealMatrix0.NRows Then MechanismList1.ErrorReport = "The first and second inputs to the NIST Adapter Post Processor do not have the same number of rows"
            Dim SameFreqs As Boolean = True
            For i As Integer = 1 To myRealMatrix0.NRows
                If myRealMatrix0(i, 1) <> myRealMatrix1(i, 1) Then SameFreqs = False
            Next
            If Not SameFreqs Then MechanismList1.ErrorReport = "The frequencies in the first and second inputs to the NIST Adapter Removal Post Processor do not have the same inputs"

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")
            Dim S1 As New ComplexMatrix(2, 2), S2 As New ComplexMatrix(2, 2), T1 As New ComplexMatrix(2, 2), T2 As New ComplexMatrix(2, 2)
            Dim S As New ComplexMatrix(2, 2), T As New ComplexMatrix(2, 2)
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)
            Dim S12_last As New Complex(1.0, 0.0), ratio As New Complex(1.0, 0.0)   'Track the phases.

            For i As Integer = 1 To myRealMatrix0.NRows

                'Get the scattering parameters of the left error box from the left calibration
                'This one has just the vna terms
                S1(1, 1) = toComplex(myRealMatrix0(i, 2), myRealMatrix0(i, 3))      'S1_11=S11
                S1(2, 1) = toComplex(myRealMatrix0(i, 18), myRealMatrix0(i, 19))    'S1_21=S31
                S1(1, 2) = toComplex(myRealMatrix0(i, 6), myRealMatrix0(i, 7))      'S1_21
                S1(2, 2) = toComplex(myRealMatrix0(i, 22), myRealMatrix0(i, 23))    'S1_22=S33
                'Get the scattering parameters of the left error box from the right calibration. 
                'This one has the VNA terms and the adapter
                S2(1, 1) = toComplex(myRealMatrix1(i, 2), myRealMatrix1(i, 3))      'S1_11
                S2(2, 1) = toComplex(myRealMatrix1(i, 18), myRealMatrix1(i, 19))    'S1_21
                S2(1, 2) = toComplex(myRealMatrix1(i, 6), myRealMatrix1(i, 7))      'S1_21
                S2(2, 2) = toComplex(myRealMatrix1(i, 22), myRealMatrix1(i, 23))    'S1_22
                'Get the esitmate for the scattering parameters of the adapter
                T1 = TFromS(S1) : T2 = TFromS(S2) : T = (T1 ^ -1) * T2 : S = SFromT(T)

                'Get the scattering parameters of the right error box from the left calibration
                'This one has the adapter and the vna terms
                S1(1, 1) = toComplex(myRealMatrix0(i, 32), myRealMatrix0(i, 33))  'S2_11=S44
                S1(2, 1) = toComplex(myRealMatrix0(i, 16), myRealMatrix0(i, 17))  'S2_21=S24
                S1(1, 2) = toComplex(myRealMatrix0(i, 28), myRealMatrix0(i, 29))  'S2_21=S42
                S1(2, 2) = toComplex(myRealMatrix0(i, 12), myRealMatrix0(i, 13))  'S2_22=S22
                'Get the scattering parameters of the right error box from the right calibration. 
                'This one has just the VNA terms
                S2(1, 1) = toComplex(myRealMatrix1(i, 32), myRealMatrix1(i, 33))  'S2_11=S44
                S2(2, 1) = toComplex(myRealMatrix1(i, 16), myRealMatrix1(i, 17))  'S2_21=S24
                S2(1, 2) = toComplex(myRealMatrix1(i, 28), myRealMatrix1(i, 29))  'S2_21=S42
                S2(2, 2) = toComplex(myRealMatrix1(i, 12), myRealMatrix1(i, 13))  'S2_22=S22
                'Get the estimate for the scattering parameters of the adapter and average it with the prior result
                T1 = TFromS(S1) : T2 = TFromS(S2) : T = T1 * (T2 ^ -1) : S = 0.5 * (S + SFromT(T))

                'Track the phases
                ratio = S(2, 1) / S12_last
                If ratio.Re < 0.0 Then      'Looks like a phase jump!
                    S(2, 1) = -S(2, 1) : S(1, 2) = -S(1, 2)
                End If
                S12_last = S(2, 1)

                'Now take advantage of the reciprocity of the results, and average S12 and S21
                S(2, 1) = 0.5 * (S(2, 1) + S(1, 2)) : S(1, 2) = S(2, 1)

                'Stuff the average results into the output.
                myRealMatrixResult.SMatrix(i) = S

            Next i

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for standard adapter removal
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AdapterRemoval_STD
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Outer coaxial 4x4 scattering-parameter calibration matrix (.meas)"    'Has 4x4 s-parameters at first coaxial reference plane
                myNameList(1) = "Inner on-wafer 4x4 scattering-parameter calibration matrix (.meas)"    'Has 4x4 s-parameters at second on-wafer reference plane
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".s4p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "S-Parameters of left probe"
                PullDownList(1) = "S-Parameters of right probe"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor finds the scattering parameters of a probe from two calibrations. The first outer calibration is performed in coax or rectangular waveguide. The probes are then added, and the second calibration is performed on the wafer."
                myDescription(2) = "The default frequency list is determined from the first input to the post processor."
                myDescription(4) = "The approach follows an approach developed by Arkadiusz Lewandowski. The module was authored by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "NIST on-wafer adapter removal"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)  'Outer coax calibration
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)  'Inner on-wafer calibration

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 33 Then MechanismList1.ErrorReport = "The first input to the NIST Adapter Post Processor was not a 4x4 scattering-parameter matrix"
            If myRealMatrix1.NCols <> 33 Then MechanismList1.ErrorReport = "The second input to the NIST Adapter Post Processor was not a 4x4 scattering-parameter matrix"
            If myRealMatrix1.NRows <> myRealMatrix0.NRows Then MechanismList1.ErrorReport = "The first and second inputs to the NIST Adapter Post Processor do not have the same number of rows"
            Dim SameFreqs As Boolean = True
            For i As Integer = 1 To myRealMatrix0.NRows
                If myRealMatrix0(i, 1) <> myRealMatrix1(i, 1) Then SameFreqs = False
            Next
            If Not SameFreqs Then MechanismList1.ErrorReport = "The frequencies in the first and second inputs to the NIST Adapter Removal Post Processor do not have the same inputs"

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")
            Dim S1 As New ComplexMatrix(2, 2), S2 As New ComplexMatrix(2, 2), T1 As New ComplexMatrix(2, 2), T2 As New ComplexMatrix(2, 2)
            Dim S As New ComplexMatrix(2, 2), T As New ComplexMatrix(2, 2)
            Dim SP1 As New ComplexMatrix(2, 2), SP2 As New ComplexMatrix(2, 2)
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)
            Dim S12_last As New Complex(1.0, 0.0), ratio As New Complex(1.0, 0.0)   'Track the phases.
            For i As Integer = 1 To myRealMatrix0.NRows

                'Get the scattering parameters of the left error box from the left calibration
                'This one has just the vna terms
                S1(1, 1) = toComplex(myRealMatrix0(i, 2), myRealMatrix0(i, 3))      'S1_11=S11
                S1(2, 1) = toComplex(myRealMatrix0(i, 18), myRealMatrix0(i, 19))    'S1_21=S31
                S1(1, 2) = toComplex(myRealMatrix0(i, 6), myRealMatrix0(i, 7))      'S1_21
                S1(2, 2) = toComplex(myRealMatrix0(i, 22), myRealMatrix0(i, 23))    'S1_22=S33
                'Get the scattering parameters of the left error box from the right calibration. 
                'This one has the VNA terms and the adapter
                S2(1, 1) = toComplex(myRealMatrix1(i, 2), myRealMatrix1(i, 3))      'S1_11
                S2(2, 1) = toComplex(myRealMatrix1(i, 18), myRealMatrix1(i, 19))    'S1_21
                S2(1, 2) = toComplex(myRealMatrix1(i, 6), myRealMatrix1(i, 7))      'S1_21
                S2(2, 2) = toComplex(myRealMatrix1(i, 22), myRealMatrix1(i, 23))    'S1_22
                'Get the esitmate for the scattering parameters of the adapter
                T1 = TFromS(S1) : T2 = TFromS(S2) : T = (T1 ^ -1) * T2 : SP1 = SFromT(T)

                'Get the scattering parameters of the right error box from the left calibration
                'This one has the adapter and the vna terms
                S1(1, 1) = toComplex(myRealMatrix0(i, 32), myRealMatrix0(i, 33))  'S2_11=S44
                S1(2, 1) = toComplex(myRealMatrix0(i, 16), myRealMatrix0(i, 17))  'S2_21=S24
                S1(1, 2) = toComplex(myRealMatrix0(i, 28), myRealMatrix0(i, 29))  'S2_21=S42
                S1(2, 2) = toComplex(myRealMatrix0(i, 12), myRealMatrix0(i, 13))  'S2_22=S22
                'Get the scattering parameters of the right error box from the right calibration. 
                'This one has just the VNA terms
                S2(1, 1) = toComplex(myRealMatrix1(i, 32), myRealMatrix1(i, 33))  'S2_11=S44
                S2(2, 1) = toComplex(myRealMatrix1(i, 16), myRealMatrix1(i, 17))  'S2_21=S24
                S2(1, 2) = toComplex(myRealMatrix1(i, 28), myRealMatrix1(i, 29))  'S2_21=S42
                S2(2, 2) = toComplex(myRealMatrix1(i, 12), myRealMatrix1(i, 13))  'S2_22=S22
                'Get the estimate for the scattering parameters of the adapter and average it with the prior result
                T1 = TFromS(S1) : T2 = TFromS(S2) : T = T2 * (T1 ^ -1) : SP2 = SFromT(T)

                'Select which result to send back.
                Select Case myPullDownSelection1
                    Case 0  'Left probe
                        S.Fill(SP1)
                    Case 1  'Right probe
                        S.Fill(SP2)
                End Select

                'Track the phases
                ratio = S(2, 1) / S12_last
                If ratio.Re < 0.0 Then      'Looks like a phase jump!
                    S(2, 1) = -S(2, 1) : S(1, 2) = -S(1, 2)
                End If
                S12_last = S(2, 1)


                'Now take advantage of the reciprocity of the results, and average S12 and S21
                S(2, 1) = 0.5 * (S(2, 1) + S(1, 2)) : S(1, 2) = S(2, 1)

                'Stuff the average results into the output.
                myRealMatrixResult.SMatrix(i) = S

            Next i

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for Bauer and Penfield adapter removal
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AdapterRemoval_BP
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Second-tier 4x4 scattering-parameter calibration matrix (.meas)"    'Has 4x4 s-parameters at first reference plane
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".s4p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Correct for phase jumps."
                PullDownList(1) = "Use phase in second-tier calibration."
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor performs a Bauer-and-Penfiled-type adapter removal. To implement the routine, first perform a first-tier calibration and add the adapter to be characterized to port 1. Then perform a second-tier calibration with a port-1 reference plane at the output of the adapter. This second-tier calibration generates the 4x4 calibration solution that is input into this routine. The two calibrations do not have to be performed in the same media."
                myDescription(2) = "This routine is really just a convinience, and serves to pick out the 2x2 scattering parameters of the adapter from the 4x4 scattering parameters of the second-tier calibration. The default frequency list is determined from the first input to the post processor."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Bauer-and-Penfield-style adapter removal"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 33 Then MechanismList1.ErrorReport = "The input was not a 4x4 scattering-parameter matrix"

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")
            Dim S1 As New ComplexMatrix(2, 2), T As New ComplexMatrix(2, 2)
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)
            Dim S12_last As New Complex(1.0, 0.0), ratio As New Complex(1.0, 0.0)

            For i As Integer = 1 To myRealMatrix0.NRows

                'Get the scattering parameters of the left error box from the left calibration
                'This one has just the vna terms
                S1(1, 1) = toComplex(myRealMatrix0(i, 2), myRealMatrix0(i, 3))      'S1_11=S11
                S1(2, 1) = toComplex(myRealMatrix0(i, 18), myRealMatrix0(i, 19))    'S1_21=S31
                S1(1, 2) = toComplex(myRealMatrix0(i, 6), myRealMatrix0(i, 7))      'S1_21
                S1(2, 2) = toComplex(myRealMatrix0(i, 22), myRealMatrix0(i, 23))    'S1_22=S33

                'Now take advantage of the reciprocity of the results, and average S12 and S21
                S1(2, 1) = 0.5 * (S1(2, 1) + S1(1, 2)) : S1(1, 2) = S1(2, 1)

                'Try to correct phase jumps
                If myPullDownSelection1 = 0 Then    'But only if the user wanted to.
                    ratio = S1(2, 1) / S12_last
                    If ratio.Re < 0.0 Then       'Looks like a phase jump!
                        S1(2, 1) = -S1(2, 1) : S1(1, 2) = -S1(1, 2)
                    End If
                    S12_last = S1(2, 1)
                End If

                'Stuff the average results into the output.
                myRealMatrixResult.SMatrix(i) = S1

            Next i

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for fitting measured data
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_FitMeasuredData
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myDistributionLimits() As Double
        Private myAllowForceNewValues() As Boolean
        Private myForceNewValues() As Boolean
        Private myNewValues() As Double
        <NonSerialized> Private myModel As Object
        Private myFirstTime As Boolean = True
        Private myMechanismListModel As MechanismList
        Private myForcedValuesCount As Integer = 0
        Private myX() As Double 'Has the values of X from the first time around
        Private myXDistLimit() As Double 'Has the range of X values from the 
        Private myScales() As Double 'Has the scale factors for X from the nominal values of X and the Distribution limits of X
        Private myRealMatrix0 As RealMatrix 'The measurements.
        Private mMax As Integer             'The maximum index that we fit to.
        Private mMin As Integer             'The maximum index that we replace to.

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Dim f_Post_FitMeasuredData As Post_FitMeasuredData = f.Deserialize(m)
            'Manually update all of the nonserializable objects
            If Not IsNothing(myModel) Then f_Post_FitMeasuredData.myModel = myModel.clone
            Return f_Post_FitMeasuredData
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Corrected S-parameter measurements to be fitted (.meas)"    'Has 2x2 measurements of the corrected s-parameters to be fitted
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Fit both ports"
                PullDownList(1) = "Fit port 1 only"
                PullDownList(2) = "Fit port 2 only"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String   'No second pulldown list please
                PullDownList(0) = "Gradient stopping condition"
                PullDownList(1) = "Norm stopping condition"
                PullDownList(2) = "Delta x stopping condition"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(13) As String 'Set the frequency over which the fit is performed
                PullDownList(0) = "Fit over all frequencies."
                PullDownList(1) = "Fit from 5 MHz to 20 MHz, replace measurements below 5 MHz."
                PullDownList(2) = "Fit from 10 MHz to 50 MHz, replace measurements below 10 MHz."
                PullDownList(3) = "Fit from 20 MHz to 100 MHz, replace measurements below 20 MHz."
                PullDownList(4) = "Fit from 50 MHz to 200 MHz, replace measurements below 50 MHz."
                PullDownList(5) = "Fit from 100 MHz to 500 MHz, replace measurements below 100 MHz."
                PullDownList(6) = "Fit from 200 MHz to 1 GHz, replace measurements below 200 MHz."
                PullDownList(7) = "Fit from 500 MHz to 2 GHz, replace measurements below 500 MHz."
                PullDownList(8) = "Fit from 1 GHz to 5 GHz, replace measurements below 1 GHz."
                PullDownList(9) = "Fit from 2 GHz to 10 GHz, replace measurements below 2 GHz."
                PullDownList(10) = "Fit from 5 GHz to 20 GHz, replace measurements below 5 GHz."
                PullDownList(11) = "Fit from 10 GHz to 50 GHz, replace measurements below 10 GHz."
                PullDownList(12) = "Fit from 20 GHz to 100 GHz, replace measurements below 20 GHz."
                PullDownList(13) = "Fit from 50 GHz to 200 GHz, replace measurements below 50 GHz."
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "Location of model or cascade"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor fits a model to the corrected scattering parameters of one-port calibration standards. The target frequencies are set in the Run>Set frequencies pull-down menu."
                myDescription(2) = "Parameters in the model you want to fit should be set so that they can be varied. The uncertainties in the parameters of the model will be used to set the scales used in the optimization algorithm."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "NIST physical-model fitting routine."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            'myRealMatrix0 = MechValues(0).myBase1Result(MechanismList1)
            myRealMatrix0 = MechValues(0).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "The first input to the NIST Physical-Model-Fit Post Processor was not a 2x2 scattering-parameter matrix"

            If myFirstTime Then

                'Check that we have a valid file name for the model or cascade we will use to model the measurements
                If Not My.Computer.FileSystem.FileExists(myTextBoxContents) Then
                    MechanismList1.ErrorReport = "The model " + myTextBoxContents + " does not exist!"
                    Dim myRealMatrixResult1 As New RealMatrix(myRealMatrix0.NRows, 9)
                    Return ToArray(myRealMatrixResult1) : Exit Function
                End If
                If Path.GetExtension(myTextBoxContents).ToLower <> ".model" And Path.GetExtension(myTextBoxContents).ToLower <> ".model_archive" And Path.GetExtension(myTextBoxContents).ToLower <> ".cascade" And Path.GetExtension(myTextBoxContents).ToLower <> ".cascade_archive" Then
                    MechanismList1.ErrorReport = "The file " + myTextBoxContents + " does not have the correct extension."
                    Dim myRealMatrixResult1 As New RealMatrix(myRealMatrix0.NRows, 9)
                    Return ToArray(myRealMatrixResult1) : Exit Function
                End If

                'File exists. Read in the XML for the model.
                Dim Doc As New XmlDocument
                Doc.Load(myTextBoxContents)
                Call CustomFormControls.CorrectPaths(Doc, myTextBoxContents)
                Call ExpandXMLMenu(Doc)                 'Extend the document to the children.
                'Build the mechanism list for the model from the mechanisms and measurements
                Dim RootElement As XmlElement = Doc.DocumentElement
                Dim MechanismListModel As New MechanismList(MechanismList1.FrequencyList, 6.95, -0.01, MechanismList1.IsMonteCarloSimulation)
                MechanismListModel.EpsEff = MechanismList1.EpsEff
                Call ExternalReadInMechanismsFromXML(RootElement, MechanismListModel)
                MechanismListModel.CalibrationEngineWillForceValues = True
                MechanismListModel.DLLPath = MechanismList1.DLLPath
                myMechanismListModel = MechanismListModel

                'Get and save the list of values and distribution limits.
                myDistributionLimits = MechanismListModel.DistributionLimit
                myAllowForceNewValues = MechanismListModel.AllowForceNewValue
                myNewValues = MechanismListModel.NewValue

                'Creat an instance of the model or cascade.
                Select Case Path.GetExtension(myTextBoxContents).ToLower
                    Case ".model", ".model_archive"
                        myModel = New ModelSupport(Doc, MechanismList1.DLLPath)
                    Case ".cascade", ".cascade_archive"
                        myModel = New CascadeSupport(Doc, MechanismList1.DLLPath)
                End Select

                'Count up the number of values we can force.
                myForcedValuesCount = 0
                For k As Integer = 0 To myAllowForceNewValues.Count - 1
                    If myAllowForceNewValues(k) Then myForcedValuesCount = myForcedValuesCount + 1
                Next k

                ReDim myX(myForcedValuesCount - 1), myXDistLimit(myForcedValuesCount - 1), myScales(myForcedValuesCount - 1)
                Dim myForcedValuesIndex As Integer = -1
                For k As Integer = 0 To myAllowForceNewValues.Count - 1
                    If myAllowForceNewValues(k) Then
                        myForcedValuesIndex = myForcedValuesIndex + 1
                        myX(myForcedValuesIndex) = myNewValues(k)
                        myXDistLimit(myForcedValuesIndex) = myDistributionLimits(k)
                        myScales(myForcedValuesIndex) = Math.Abs(myDistributionLimits(k)) + Math.Abs(myNewValues(k))
                        If myScales(myForcedValuesIndex) = 0.0 Then myScales(myForcedValuesIndex) = 1.0 'No reasonable scale factor, so just use one.
                    End If
                Next k

                'Run the model once with the Initialize flag set true to set everything.
                Dim myRealMatrixResultX As New RealMatrix(myRealMatrix0.NRows, 9)
                myRealMatrixResultX = myModel.getSParams(myMechanismListModel)

                'Now set the initialize flag to false to let the force-new-values work.
                myMechanismListModel.InitializeFlag = False

            End If

            'Start from our best guess for X. X is normalize by the scales.
            Dim X(myForcedValuesCount - 1) As Double
            For k As Integer = 0 To myForcedValuesCount - 1
                X(k) = myX(k) / myScales(k)
            Next k

            'Set up for iterative solution by initializing the variables.
            Dim n As Integer = myForcedValuesCount   'The dimension of the vector being iterated on

            Dim epsg As Double = 0.0    '||G||<EpsG is satisfied, where G=gradient
            If myPullDownSelection2 = 0 Then epsg = 0.0000000001
            Dim epsf As Double = 0.0    'stop if |F(k+1)-F(k)|<=EpsF*max{|F(k)|,|F(k+1)|,1}
            If myPullDownSelection2 = 1 Then epsf = 0.0000000001
            Dim epsx As Double = 0.0  'stop if change in x is less than epsx
            If myPullDownSelection2 = 2 Then epsx = 0.0000000001
            Dim maxits As Integer = 0    'stop if number of iterations exceeds this
            Dim state As minlmstate = New XAlglib.minlmstate() ' initializer can be dropped, but compiler will issue warning
            Dim rep As minlmreport = New XAlglib.minlmreport() ' initializer can be dropped, but compiler will issue warning

            'Figure out the range over which the measurements are fitted.
            mMax = myRealMatrix0.NRows   'The default range for fitting the measurements (full range, all are fitted)
            mMin = myRealMatrix0.NRows   'The default range for replacing the measurements with function values (full range, all are fitted)
            Select Case myPullDownSelection3
                Case 1  'Fit from 5 MHz to 20 MHz, replace measurements below 5 MHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 0.02 Then mMax = i
                        If myRealMatrix0(i, 1) < 0.005 Then mMin = i
                    Next i
                Case 2  'Fit from 10 MHz to 50 MHz, replace measurements below 10 MHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 0.05 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 0.01 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 3  'Fit from 20 MHz to 100 MHz, replace measurements below 20 MHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 0.1 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 0.02 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 4  'Fit from 50 MHz to 200 MHz, replace measurements below 50 MHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 0.2 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 0.05 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 5  'Fit from 100 MHz to 500 MHz, replace measurements below 100 MHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 0.5 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 0.1 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 6  'Fit from 200 MHz to 1 GHz, replace measurements below 200 MHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 1.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 0.2 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 7  'Fit from 500 MHz to 2 GHz, replace measurements below 500 MHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 2.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 0.5 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 8  'Fit from 1 GHz to 5 GHz, replace measurements below 1 GHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 5.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 1.0 Then mMax = myRealMatrix0(i, 1)
                    Next i
                Case 9  'Fit from 2 GHz to 10 GHz, replace measurements below 2 GHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 10.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 2.0 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 10  'Fit from 5 GHz to 20 GHz, replace measurements below 5 GHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 20.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 5.0 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 11  'Fit from 10 GHz to 50 GHz, replace measurements below 10 GHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 50.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 10.0 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 12  'Fit from 20 GHz to 100 GHz, replace measurements below 20 GHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 100.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 20.0 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case 13  'Fit from 50 GHz to 200 GHz, replace measurements below 50 GHz.
                    For i As Integer = 1 To myRealMatrix0.NRows
                        If myRealMatrix0(i, 1) <= 200.0 Then mMax = myRealMatrix0(i, 1)
                        If myRealMatrix0(i, 1) < 50.0 Then mMin = myRealMatrix0(i, 1)
                    Next i
                Case Else
            End Select
            'Figure out how many variables we will be optimizing.
            Dim m As Integer = mMax     'The dimension of the returned function (the difference between the modeled and the measured scattering parameters)
            If myPullDownSelection3 > 0 Then m = mMax - mMin
            If myPullDownSelection1 > 0 Then
                m = 2 * m 'Since we will only be fitting on one port.
            Else
                m = 4 * m 'Since we will be fitting on both ports.
            End If
            If mMin > mMax Then mMin = mMax

            'Check for case in which no frequencies are being used in the optimization
            If m < 2 Then
                MechanismList1.ErrorReport = "No frequencies available for fitting; fit not performed."
                MechanismList1.FatalError = True
                Return ToArray(myRealMatrix0)
            End If

            'Call the iterative algorithm
            XAlglib.minlmcreatev(n, m, X, 0.001, state)    'm,x,differentiation step,state
            XAlglib.minlmsetcond(state, epsg, epsf, epsx, maxits)
            XAlglib.minlmoptimize(state, AddressOf function1_fvec, Nothing, Nothing)
            XAlglib.minlmresults(state, X, rep)

            If myFirstTime Then
                'Save the iterated result, so that we always start at a good starting point from here on out.
                For k As Integer = 0 To myForcedValuesCount - 1
                    myX(k) = X(k) * myScales(k)
                Next k
            End If

            'Form the S-parameters of the model from the best estimate for X
            'Stuff the forced values back into the mechanism list, and enable the forcing mechanism.
            Dim myForcedValuesIndex1 As Integer = -1
            Dim ForceNewValue(myAllowForceNewValues.Count - 1) As Boolean
            For k As Integer = 0 To myAllowForceNewValues.Count - 1
                ForceNewValue(k) = False
                If myAllowForceNewValues(k) Then
                    myForcedValuesIndex1 = myForcedValuesIndex1 + 1
                    myMechanismListModel.NewValue(k) = X(myForcedValuesIndex1) * myScales(myForcedValuesIndex1)
                    ForceNewValue(k) = True
                End If
            Next k
            myMechanismListModel.ForceNewValue = ForceNewValue

            'Calculate the final result after iteration.
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)
            myRealMatrixResult = myModel.getSParams(myMechanismListModel)
            If myPullDownSelection3 > 0 Then 'Only use the function values from 1 to mMin. From mMin+1 to myRealMatrix0.NRows use the measurements.
                For i As Integer = mMin + 1 To myRealMatrix0.NRows
                    myRealMatrixResult.SMatrix(i) = myRealMatrix0.SMatrix(i)
                Next i
            End If

            'Plot the model and measurements on the same graph.
            If myFirstTime Then

                'Set up the maximum and step size for graphs if choice is obvious.
                Dim XMAx As Double = 0.0, XStep As Double = 0.0
                If myRealMatrixResult(1, 1) < 10.0 Then XMAx = myRealMatrixResult(myRealMatrixResult.NRows, 1)
                If XMAx = 110.0 Then XStep = 10.0

                'Create the magnitude graph
                Dim magPlot As New Plot("Frequency (GHz)", "Magnitude (dB)", "Comparison of measured and modeled scattering parameters", , XMAx, XStep)
                'Plot Model S11
                Dim Sij As New RealMatrix(myRealMatrixResult.NRows)
                Dim k As Integer = 2
                If myPullDownSelection1 < 2 Then
                    Sij = dB(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S11")
                End If
                'Plot Model S22
                k = 8
                If myPullDownSelection1 <> 1 Then
                    Sij = dB(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S22")
                End If
                'Plot Measurement S11
                k = 2
                If myPullDownSelection1 < 2 Then
                    Sij = dB(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S11")
                End If
                'Plot Measurement S22
                k = 8
                If myPullDownSelection1 <> 1 Then
                    Sij = dB(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S22")
                End If
                magPlot.Show()

                'Create the phase graph
                Dim phasePlot As New Plot("Frequency (GHz)", "Phase (degrees)", "Comparison of measured and modeled scattering parameters", , XMAx, XStep)
                'Plot Model S11
                k = 2
                If myPullDownSelection1 < 2 Then
                    Sij = Phase(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S11")
                End If
                'Plot Model S22
                k = 8
                If myPullDownSelection1 <> 1 Then
                    Sij = Phase(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S22")
                End If
                'Plot Measurement S11
                k = 2
                If myPullDownSelection1 < 2 Then
                    Sij = Phase(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S11")
                End If
                'Plot Measurement S22
                k = 8
                If myPullDownSelection1 <> 1 Then
                    Sij = Phase(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S22")
                End If
                phasePlot.Show()

            End If

            myFirstTime = False   'Only do setup once.

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

        Public Sub function1_fvec(ByVal x As Double(), ByVal fi As Double(), ByVal obj As Object)

            Dim n As Integer = -1

            'Stuff the forced values back into the mechanism list, and enable the forcing mechanism.
            Dim myForcedValuesIndex As Integer = -1
            Dim ForceNewValue(myAllowForceNewValues.Count - 1) As Boolean
            For k As Integer = 0 To myAllowForceNewValues.Count - 1
                ForceNewValue(k) = False
                If myAllowForceNewValues(k) Then
                    myForcedValuesIndex = myForcedValuesIndex + 1
                    myMechanismListModel.NewValue(k) = x(myForcedValuesIndex) * myScales(myForcedValuesIndex)
                    ForceNewValue(k) = True
                End If
            Next k
            myMechanismListModel.ForceNewValue = ForceNewValue

            'Find the model result.
            Dim myRealMatrixResult As New RealMatrix(myMechanismListModel.FrequencyList.NRows, 9)
            myRealMatrixResult = myModel.getSParams(myMechanismListModel)

            'Return the difference between the model and the measurement to the optimizer.
            Dim FirstPoint As Integer = 1
            If myPullDownSelection3 > 0 Then FirstPoint = mMin + 1
            For i1 As Integer = FirstPoint To myRealMatrix0.NRows
                Dim j1 As Integer = 2
                If myPullDownSelection1 < 2 Then
                    n = n + 1
                    fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    j1 = 3 : n = n + 1
                    fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                End If
                If myPullDownSelection1 <> 1 Then
                    j1 = 8 : n = n + 1
                    fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    j1 = 9 : n = n + 1
                    fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                End If
            Next i1

        End Sub

    End Class

    ''' <summary>
    ''' Post processor for fitting measured data
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_FitMeasuredDataBetter
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myDistributionLimits() As Double
        Private myAllowForceNewValues() As Boolean
        Private myForceNewValues() As Boolean
        Private myNewValues() As Double
        Private myMechanismNames() As String    'All of the Mechanism names
        Private myMechanismNamesThatChange() As String  'Only the ones that can change
        <NonSerializedAttribute> Private myModel As Object
        Private myFirstTime As Boolean = True
        Private myMechanismListModel As MechanismList
        Private myForcedValuesCount As Integer = 0
        Private myX() As Double 'Has the values of X from the first time around
        Private myXDistLimit() As Double 'Has the range of X values from the 
        Private myScales() As Double 'Has the scale factors for X from the nominal values of X and the Distribution limits of X
        Private myRealMatrix0 As RealMatrix 'The measurements.
        Private mMax As Integer             'The maximum index that we fit to.
        Private mMin As Integer             'The maximum index that we replace to.

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Dim f_Post_FitMeasuredDataBetter As Post_FitMeasuredDataBetter = f.Deserialize(m)
            'Manually update all of the nonserializable objects
            If Not IsNothing(myModel) Then f_Post_FitMeasuredDataBetter.myModel = myModel.clone
            Return f_Post_FitMeasuredDataBetter
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(4) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Corrected S-parameter measurements to be fitted (.meas)"    'Has 2x2 measurements of the corrected s-parameters to be fitted
                myNameList(1) = "Start fit at (GHz, .parameter)"    'Frequency at which we start the fit
                myNameList(2) = "Stop fit at (GHz, .parameter)"    'Frequency at which we stop the fit
                myNameList(3) = "Start using measured data in output file at (GHz, .parameter)"    'Frequency at which we start using the measured data
                myNameList(4) = "Stop using measured data in output file at (GHz, .parameter)"    'Frequency at which we start using the measured data
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter" : FileExtensions(4) = ".sumofparameters"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(6) As String
                PullDownList(0) = "Fit reflection coefficient of both ports"
                PullDownList(1) = "Fit reflection coefficient of port 1 only"
                PullDownList(2) = "Fit reflection coefficient of port 2 only"
                PullDownList(3) = "Fit all scattering parameters"
                PullDownList(4) = "Fit transmission coefficient S21 and S12"
                PullDownList(5) = "Fit transmission coefficient S21"
                PullDownList(6) = "Fit transmission coefficient S12"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String   'No second pulldown list please
                PullDownList(0) = "Gradient stopping condition"
                PullDownList(1) = "Norm stopping condition"
                PullDownList(2) = "Delta x stopping condition"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing 'Set the frequency over which the fit is performed
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "Location of model or cascade"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(8) As String
                myDescription(0) = "This post processor fits a model to the corrected scattering parameters of one-port or two-port devices."
                myDescription(2) = "Parameters in the model you want to fit should be set so that they can be varied. The uncertainties in the parameters of the model will be used to set the scales used in the optimization algorithm."
                myDescription(4) = "The post processor will save the optimized scattering parameters in a .s2p file and the optimized mechanism values in a .variables file. The names of the optimized mechanisms can be found in the model directory in the file OptimizedMechanismNames.txt."
                myDescription(6) = "Default frequency list comes from the scattering-parameter input. This is a more flexible version of the original NIST physical-model fitting routine, and allows fitting of models with transmission. "
                myDescription(8) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Improved version of NIST physical-model fitting routine."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNames(1 + myMechanismNamesThatChange.Length) As String
                myFileNames(0) = "\ModelFit"
                myFileNames(1) = "\MechanismValues"
                'myMechanismNamesThatChange
                For k As Integer = 0 To myMechanismNamesThatChange.Length - 1
                    Dim ShortName As String = myMechanismNamesThatChange(k).Replace(":", "_").Replace("/", "_").Replace("\", "_").Replace(".", "_")
                    If InStrRev(ShortName, "_parameter") = ShortName.Length - 9 And ShortName.Length > 20 Then    'Looks like we have a long file name.
                        ShortName = Left(ShortName, ShortName.Length - 10)  'Get rid fo the .parameter
                        If InStrRev(ShortName, "_") > 0 And InStrRev(ShortName, "_") < ShortName.Length Then     'Seems we also can shorten further
                            ShortName = Mid(ShortName, InStrRev(ShortName, "_") + 1)
                        End If
                    End If
                    myFileNames(2 + k) = "\" + ShortName
                Next k
                Return myFileNames
            End Get
        End Property


        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            'myRealMatrix0 = MechValues(0).myBase1Result(MechanismList1)
            myRealMatrix0 = MechValues(0).getSParams(MechanismList1)

            'Get start and stop frequencies
            Dim FStart As Double = MechValues(1).MechanismValue(MechanismList1) 'Frequency at which we start the fit
            Dim FStop As Double = MechValues(2).MechanismValue(MechanismList1)  'Frequency at which we stop the fit
            Dim FStartMeas As Double = MechValues(3).MechanismValue(MechanismList1) 'Frequency at which we start using the measured data
            Dim FStopMeas As Double = MechValues(4).MechanismValue(MechanismList1)  'Frequency at which we stop using the measured data

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "The first input to the NIST Physical-Model-Fit Post Processor was not a 2x2 scattering-parameter matrix" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function

            If myFirstTime Then

                'Check that we have a valid file name for the model or cascade we will use to model the measurements
                If Not My.Computer.FileSystem.FileExists(myTextBoxContents) Then
                    MechanismList1.ErrorReport = "The model " + myTextBoxContents + " does not exist!"
                    MechanismList1.FatalError = True
                    Dim myRealMatrixResult1 As New RealMatrix(myRealMatrix0.NRows, 9)
                    Return ToArray(myRealMatrixResult1) : Exit Function
                End If
                If Path.GetExtension(myTextBoxContents).ToLower <> ".model" And Path.GetExtension(myTextBoxContents).ToLower <> ".model_archive" And Path.GetExtension(myTextBoxContents).ToLower <> ".cascade" And Path.GetExtension(myTextBoxContents).ToLower <> ".cascade_archive" Then
                    MechanismList1.ErrorReport = "The file " + myTextBoxContents + " does not have the correct extension."
                    MechanismList1.FatalError = True
                    Dim myRealMatrixResult1 As New RealMatrix(myRealMatrix0.NRows, 9)
                    Return ToArray(myRealMatrixResult1) : Exit Function
                End If

                'File exists. Read in the XML for the model.
                Dim Doc As New XmlDocument
                Doc.Load(myTextBoxContents)
                Call CustomFormControls.CorrectPaths(Doc, myTextBoxContents)
                Call ExpandXMLMenu(Doc)                 'Extend the document to the children.
                'Build the mechanism list for the model from the mechanisms and measurements
                Dim RootElement As XmlElement = Doc.DocumentElement
                Dim MechanismListModel As New MechanismList(MechanismList1.FrequencyList, 6.95, -0.01, MechanismList1.IsMonteCarloSimulation)
                MechanismListModel.EpsEff = MechanismList1.EpsEff
                Call ExternalReadInMechanismsFromXML(RootElement, MechanismListModel)
                MechanismListModel.CalibrationEngineWillForceValues = True
                MechanismListModel.DLLPath = MechanismList1.DLLPath
                myMechanismListModel = MechanismListModel

                'Get and save the list of values and distribution limits.
                myDistributionLimits = MechanismListModel.DistributionLimit
                myAllowForceNewValues = MechanismListModel.AllowForceNewValue
                myNewValues = MechanismListModel.NewValue
                myMechanismNames = MechanismListModel.ListOfNames

                'Creat an instance of the model or cascade.
                Select Case Path.GetExtension(myTextBoxContents).ToLower
                    Case ".model", ".model_archive"
                        myModel = New ModelSupport(Doc, MechanismList1.DLLPath)
                    Case ".cascade", ".cascade_archive"
                        myModel = New CascadeSupport(Doc, MechanismList1.DLLPath)
                End Select

                'Count up the number of values we can force.
                myForcedValuesCount = 0
                For k As Integer = 0 To myAllowForceNewValues.Count - 1
                    If myAllowForceNewValues(k) Then myForcedValuesCount = myForcedValuesCount + 1
                Next k

                'Alert user that we don't have anything to force.
                If myForcedValuesCount = 0 Then MsgBox("Error: No mechanisms were set up to be forced. Cannot do optimization.", MsgBoxStyle.Exclamation, "Fit Measured Data")

                ReDim myX(myForcedValuesCount - 1), myXDistLimit(myForcedValuesCount - 1), myScales(myForcedValuesCount - 1), myMechanismNamesThatChange(myForcedValuesCount - 1)
                Dim myForcedValuesIndex As Integer = -1, myScaleWarning As Boolean = False
                For k As Integer = 0 To myAllowForceNewValues.Count - 1
                    If myAllowForceNewValues(k) Then
                        myForcedValuesIndex = myForcedValuesIndex + 1
                        myX(myForcedValuesIndex) = myNewValues(k)
                        myMechanismNamesThatChange(myForcedValuesIndex) = myMechanismNames(k)
                        myXDistLimit(myForcedValuesIndex) = myDistributionLimits(k)
                        myScales(myForcedValuesIndex) = Math.Abs(myDistributionLimits(k)) + Math.Abs(myNewValues(k))
                        If myScales(myForcedValuesIndex) = 0.0 Then
                            myScales(myForcedValuesIndex) = 1.0 'No reasonable scale factor, so just use one.
                            If Not myScaleWarning Then
                                MsgBox("Warning: Distribution limit for forced mechanism " + myMechanismNames(k) + " is zero." + vbCrLf + "Don't know how to set scale for this variable." + vbCrLf + "Optimizer will likely fail.", MsgBoxStyle.Exclamation, "Fit Measured Data")
                                myScaleWarning = True
                            End If
                        End If
                    End If
                Next k

                'Run the model once with the Initialize flag set true to set everything.
                Dim myRealMatrixResultX As New RealMatrix(myRealMatrix0.NRows, 9)
                myRealMatrixResultX = myModel.getSParams(myMechanismListModel)

                'Now set the initialize flag to false to let the force-new-values work.
                myMechanismListModel.InitializeFlag = False

            End If

            'Start from our best guess for X. X is normalize by the scales.
            Dim X(myForcedValuesCount - 1) As Double
            For k As Integer = 0 To myForcedValuesCount - 1
                X(k) = myX(k) / myScales(k)
            Next k

            'Set up for iterative solution by initializing the variables.
            Dim n As Integer = myForcedValuesCount   'The dimension of the vector being iterated on

            Dim epsg As Double = 0.0    '||G||<EpsG is satisfied, where G=gradient
            If myPullDownSelection2 = 0 Then epsg = 0.0000000001
            Dim epsf As Double = 0.0    'stop if |F(k+1)-F(k)|<=EpsF*max{|F(k)|,|F(k+1)|,1}
            If myPullDownSelection2 = 1 Then epsf = 0.0000000001
            Dim epsx As Double = 0.0  'stop if change in x is less than epsx
            If myPullDownSelection2 = 2 Then epsx = 0.0000000001
            Dim maxits As Integer = 0    'stop if number of iterations exceeds this
            Dim state As minlmstate = New XAlglib.minlmstate() ' initializer can be dropped, but compiler will issue warning
            Dim rep As minlmreport = New XAlglib.minlmreport() ' initializer can be dropped, but compiler will issue warning

            'Figure out the range over which the measurements are fitted.
            mMax = myRealMatrix0.NRows   'The default range for fitting the measurements (full range, all are fitted)
            mMin = 1   'The default range for replacing the measurements with function values (full range, all are fitted)            
            For i As Integer = 1 To myRealMatrix0.NRows
                If myRealMatrix0(i, 1) <= FStop Then mMax = i
                If myRealMatrix0(i, 1) < FStart Then mMin = i
            Next i

            'Figure out how many variables we will be optimizing.
            Dim m As Integer = (mMax - mMin) + 1
            Select Case myPullDownSelection1
                Case 0, 4
                    m = 4 * m 'Since we will be fitting on both ports.
                Case 1, 2, 5, 6
                    m = 2 * m 'Since we will only be fitting on one port.
                Case 3
                    m = 8 * m 'Since we will be fitting all the scattering parameters.
            End Select
            If mMin > mMax Then mMin = mMax

            'Check for case in which no frequencies are being used in the optimization
            If m < 2 Then
                MechanismList1.ErrorReport = "No frequencies available for fitting; fit not performed."
                MechanismList1.FatalError = True
                Return ToArray(myRealMatrix0)
            End If

            'Call the iterative algorithm
            XAlglib.minlmcreatev(n, m, X, 0.001, state)    'm,x,differentiation step,state
            XAlglib.minlmsetcond(state, epsg, epsf, epsx, maxits)
            XAlglib.minlmoptimize(state, AddressOf function2_fvec, Nothing, Nothing)
            XAlglib.minlmresults(state, X, rep)

            If myFirstTime Then
                'Save the iterated result, so that we always start at a good starting point from here on out.
                For k As Integer = 0 To myForcedValuesCount - 1
                    myX(k) = X(k) * myScales(k)
                Next k
            End If

            'Form the S-parameters of the model from the best estimate for X
            'Stuff the forced values back into the mechanism list, and enable the forcing mechanism.
            Dim myForcedValuesIndex1 As Integer = -1
            Dim ForceNewValue(myAllowForceNewValues.Count - 1) As Boolean
            'Save the best estimate of X while we are at it
            Dim myMechanismValuesAsParameter As New RealMatrix(myForcedValuesCount, 2, ".variables")
            For k As Integer = 0 To myAllowForceNewValues.Count - 1
                ForceNewValue(k) = False
                If myAllowForceNewValues(k) Then
                    myForcedValuesIndex1 = myForcedValuesIndex1 + 1
                    myMechanismListModel.NewValue(k) = X(myForcedValuesIndex1) * myScales(myForcedValuesIndex1)
                    ForceNewValue(k) = True
                    myMechanismValuesAsParameter(myForcedValuesIndex1 + 1, 1) = myForcedValuesIndex1
                    myMechanismValuesAsParameter(myForcedValuesIndex1 + 1, 2) = X(myForcedValuesIndex1) * myScales(myForcedValuesIndex1)
                End If
            Next k
            myMechanismListModel.ForceNewValue = ForceNewValue

            'Calculate the final result after iteration.
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)
            myRealMatrixResult = myModel.getSParams(myMechanismListModel)
            'Fill in measurements where requested by the user
            For i As Integer = 1 To myRealMatrix0.NRows
                If myRealMatrix0(i, 1) >= FStartMeas And myRealMatrix0(i, 1) <= FStopMeas Then myRealMatrixResult.SMatrix(i) = myRealMatrix0.SMatrix(i)
            Next i

            'Plot the model and measurements on the same graph.
            If myFirstTime Then

                'Save the mechanism names
                Dim MechNameFile As String = MechanismList1.SaveDirectory + "\OptimizedMechanismNames.txt"
                Dim myStreamWriter As New StreamWriter(MechNameFile)
                myStreamWriter.WriteLine("! List of optimized mechanism names and thier indices for " + myTextBoxContents)
                For k1 As Integer = 0 To myForcedValuesCount - 1
                    myStreamWriter.WriteLine(k1.ToString + vbTab + myMechanismNamesThatChange(k1))
                Next k1
                myStreamWriter.Close()

                'Set up the maximum and step size for graphs if choice is obvious.
                Dim XMAx As Double = 0.0, XStep As Double = 0.0
                If myRealMatrixResult(1, 1) < 10.0 Then XMAx = myRealMatrixResult(myRealMatrixResult.NRows, 1)
                If XMAx = 110.0 Then XStep = 10.0


                'Create the magnitude graph
                Dim magPlot As New Plot("Frequency (GHz)", "Magnitude (dB)", "Comparison of measured and modeled scattering parameters", , XMAx, XStep)
                'Plot Model S11
                Dim Sij As New RealMatrix(myRealMatrixResult.NRows)
                Dim k As Integer = 2
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 1 OrElse myPullDownSelection1 = 3 Then
                    Sij = dB(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S11")
                End If
                'Plot Model S22
                k = 8
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 2 OrElse myPullDownSelection1 = 3 Then
                    Sij = dB(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S22")
                End If
                'Plot Model S21
                k = 4
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 5 Then
                    Sij = dB(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S21")
                End If
                'Plot Model S12
                k = 6
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 6 Then
                    Sij = dB(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S12")
                End If
                'Plot Measurement S11
                k = 2
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 1 OrElse myPullDownSelection1 = 3 Then
                    Sij = dB(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S11")
                End If
                'Plot Measurement S22
                k = 8
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 2 OrElse myPullDownSelection1 = 3 Then
                    Sij = dB(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S22")
                End If
                'Plot Measurement S21
                k = 4
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 5 Then
                    Sij = dB(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S21")
                End If
                'Plot Measurement S12
                k = 6
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 6 Then
                    Sij = dB(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S12")
                End If
                magPlot.Show()

                'Create the phase graph
                Dim phasePlot As New Plot("Frequency (GHz)", "Phase (degrees)", "Comparison of measured and modeled scattering parameters", , XMAx, XStep)
                'Plot Model S11
                k = 2
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 1 OrElse myPullDownSelection1 = 3 Then
                    Sij = Phase(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S11")
                End If
                'Plot Model S22
                k = 8
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 2 OrElse myPullDownSelection1 = 3 Then
                    Sij = Phase(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S22")
                End If
                'Plot Model S21
                k = 4
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 5 Then
                    Sij = Phase(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S21")
                End If
                'Plot Model S12
                k = 6
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 6 Then
                    Sij = Phase(myRealMatrixResult.Vector(k) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Model S12")
                End If
                'Plot Measurement S11
                k = 2
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 1 OrElse myPullDownSelection1 = 3 Then
                    Sij = Phase(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S11")
                End If
                'Plot Measurement S22
                k = 8
                If myPullDownSelection1 = 0 OrElse myPullDownSelection1 = 2 OrElse myPullDownSelection1 = 3 Then
                    Sij = Phase(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S22")
                End If
                'Plot Measurement S21
                k = 4
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 5 Then
                    Sij = Phase(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S21")
                End If
                'Plot Measurement S12
                k = 6
                If myPullDownSelection1 = 3 OrElse myPullDownSelection1 = 4 OrElse myPullDownSelection1 = 6 Then
                    Sij = Phase(myRealMatrix0.Vector(k) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(k + 1))
                    phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement S12")
                End If
                phasePlot.Show()


            End If

            myFirstTime = False   'Only do setup once. 

            'That's all folks! 
            Dim ArrayOut(1 + myMechanismNamesThatChange.Length) As Object
            ArrayOut(0) = myRealMatrixResult
            ArrayOut(1) = myMechanismValuesAsParameter
            'myMechanismNamesThatChange
            For k As Integer = 0 To myMechanismNamesThatChange.Length - 1
                ArrayOut(2 + k) = New RealMatrix(1, 2, ".variables")   '\" + myMechanismNamesThatChange(k)
                ArrayOut(2 + k)(1, 2) = 1
                ArrayOut(2 + k)(1, 2) = myMechanismValuesAsParameter(k + 1, 2)
            Next k
            Return ArrayOut

        End Function

        Public Sub function2_fvec(ByVal x As Double(), ByVal fi As Double(), ByVal obj As Object)

            Dim n As Integer = -1

            'Stuff the forced values back into the mechanism list, and enable the forcing mechanism.
            Dim myForcedValuesIndex As Integer = -1
            Dim ForceNewValue(myAllowForceNewValues.Count - 1) As Boolean
            For k As Integer = 0 To myAllowForceNewValues.Count - 1
                ForceNewValue(k) = False
                If myAllowForceNewValues(k) Then
                    myForcedValuesIndex = myForcedValuesIndex + 1
                    myMechanismListModel.NewValue(k) = x(myForcedValuesIndex) * myScales(myForcedValuesIndex)
                    ForceNewValue(k) = True
                End If
            Next k
            myMechanismListModel.ForceNewValue = ForceNewValue

            'Find the model result.
            Dim myRealMatrixResult As New RealMatrix(myMechanismListModel.FrequencyList.NRows, 9)
            myRealMatrixResult = myModel.getSParams(myMechanismListModel)

            'Return the difference between the model and the measurement to the optimizer.
            For i1 As Integer = mMin To mMax
                Dim j1 As Integer
                Select Case myPullDownSelection1
                    Case 0  'Since we will be fitting the reflection coefficients on both ports.
                        j1 = 2 : n = n + 1      'S11
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 3 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 8 : n = n + 1      'S22
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 9 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    Case 1  'Since we will only be fitting the reflection coefficient on port 1.
                        j1 = 2 : n = n + 1      'S11
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 3 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    Case 2  'Since we will only be fitting the reflection coefficient on port 2.
                        j1 = 8 : n = n + 1      'S22
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 9 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    Case 3  'Since we will be fitting all the scattering parameters.
                        j1 = 2 : n = n + 1      'S11
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 3 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 8 : n = n + 1      'S22
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 9 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 4 : n = n + 1      'S21
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 5 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 6 : n = n + 1      'S12
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 7 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    Case 4  'Since we will be fitting the transmission coefficients S21 and S12.
                        j1 = 4 : n = n + 1      'S21
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 5 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 6 : n = n + 1      'S12
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 7 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    Case 5  'Since we will only be fitting the transmission coefficient S21.
                        j1 = 4 : n = n + 1      'S21
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 5 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                    Case 6  'Since we will only be fitting the transmission coefficient S12.
                        j1 = 6 : n = n + 1      'S12
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                        j1 = 7 : n = n + 1
                        fi(n) = myRealMatrixResult(i1, j1) - myRealMatrix0(i1, j1)
                End Select
            Next i1

        End Sub

    End Class

    ''' <summary>
    ''' Post processor for calculating the calibration comparison metric from error boxes.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_CalibrationComparison
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Port 1 2x2 error box."    '
                myNameList(1) = "Port 2 2x2 error box."     '
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calculates the calibration comparison metric for two 2x2 error boxes. Port 1 of both error boxes are assumed to point towards the VNA."
                myDescription(2) = "Output format: Col 1 = frequency, Col 2 = Standard calibration comparison metric, Col 3 = Reflection only, Col 4 = Transmission only. The default frequency list is determined from the first input to the post processor."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calibration-comparison metric."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we have two sets of input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "The input was not a 2x2 scattering-parameter matrix" : MechanismList1.FatalError = True
            If myRealMatrix1.NCols <> 9 Then MechanismList1.ErrorReport = "The input was not a 2x2 scattering-parameter matrix" : MechanismList1.FatalError = True
            If myRealMatrix0.NRows <> myRealMatrix1.NRows Then MechanismList1.ErrorReport = "The lengths of the input matrices are not equal" : MechanismList1.FatalError = True

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 5) : myRealMatrixResult.DataType = ".complex"
            Dim S0 As New ComplexMatrix(2, 2), T0 As New ComplexMatrix(2, 2)
            Dim S1 As New ComplexMatrix(2, 2), T1 As New ComplexMatrix(2, 2)
            Dim T As New ComplexMatrix(2, 2), One As New ComplexMatrix(2, 2)
            One(1, 1) = toComplex(1.0, 0.0) : One(2, 2) = toComplex(1.0, 0.0)
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)
            For i As Integer = 1 To myRealMatrix0.NRows

                S0 = myRealMatrix0.SMatrix(i)
                S1 = myRealMatrix1.SMatrix(i)

                'Stuff the calibration comparison results into the output.
                myRealMatrixResult(i, 2) = WorstCase(S0, S1, 0)
                myRealMatrixResult(i, 3) = WorstCase(S0, S1, 1)
                myRealMatrixResult(i, 4) = WorstCase(S0, S1, 2)

            Next i

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

        Private Function WorstCase(ByVal M1 As ComplexMatrix, ByVal M2 As ComplexMatrix, ByVal Selection As Integer) As Double

            'M1 and M2 are the matrices M1=X X^-1 and M2=Y Y^-1
            Dim DX As New ComplexMatrix(2, 2) : Dim DY As New ComplexMatrix(2, 2)
            Dim d As New Complex : Dim E(4) As Double

            'DX=X X^-1 - I and DY=Y Y^-1 - I
            DX = TFromS(M1) : DX(1, 1) = DX(1, 1) - 1.0 : DX(2, 2) = DX(2, 2) - 1.0 'X X^-1 - I
            DY = TFromS(M2) : DY(1, 1) = DY(1, 1) - 1.0 : DY(2, 2) = DY(2, 2) - 1.0 'Y Y^-1 - I

            'Put together the worst-case error
            E(1) = Abs(DX(1, 1) - DX(2, 2)) + Abs(DX(2, 1)) + Abs(DX(1, 2)) + Abs(DY(2, 1))     '(15)
            E(2) = Abs(DY(1, 1) - DX(2, 2)) + Abs(DX(2, 1)) + Abs(DY(2, 1))                     '(16)
            E(3) = Abs(DX(1, 1) - DY(2, 2)) + Abs(DY(2, 1)) + Abs(DX(2, 1))                     '(17)
            E(4) = Abs(DY(1, 1) - DY(2, 2)) + Abs(DY(2, 1)) + Abs(DY(1, 2)) + Abs(DX(2, 1))     '(18)

            WorstCase = 0.0                                                                     'Calculate max of errors
            Select Case Selection
                Case 1  'Reflect only
                    If E(1) > WorstCase Then WorstCase = E(1)
                    If E(4) > WorstCase Then WorstCase = E(4)
                Case 2  'Transmission only
                    If E(2) > WorstCase Then WorstCase = E(2)
                    If E(3) > WorstCase Then WorstCase = E(3)
                Case Else   'Transmssion/reflect (default)
                    If E(1) > WorstCase Then WorstCase = E(1)
                    If E(2) > WorstCase Then WorstCase = E(2)
                    If E(3) > WorstCase Then WorstCase = E(3)
                    If E(4) > WorstCase Then WorstCase = E(4)
            End Select

            Return WorstCase

        End Function

    End Class

    ''' <summary>
    ''' Post processor for calculating matrix norms when comparing scattering parameters
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_SParamErrors
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Input 2x2 scattering parameters."    'The input scattering parameters to be analyzed.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor creates a measurement with the uncertainties for the input scattering parameters. This allows you to look at the errors in models and cascades. The default frequency list is determined from the first input to the post processor."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Scattering-parameter uncertainties"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we have two sets of input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "The input was not a 2x2 scattering-parameter matrix" : MechanismList1.FatalError = True

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrixResult.DataType = ".s2p"

            myRealMatrixResult.Fill(myRealMatrix0)

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for converting .s4p files to scattering-parameter matrices.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_ConvertToErrorBox
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Solution matrix for two-port calibration (.s4p)"    'The input .s4p file
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".s4p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Convert port 1 error box"
                PullDownList(1) = "Convert port 2 error box"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor extracts the 2x2 error boxes from a 4x4 error box describing a 2-port VNA calibration. The second error box is already reversed so that port 1 of both error boxes point toward the VNA. The default frequency list is determined from the first input to the post processor."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Get error box."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we have two sets of input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 33 Then MechanismList1.ErrorReport = "The input was not a 2x2 scattering-parameter matrix" : MechanismList1.FatalError = True

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrixResult.DataType = ".s2p"
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)
            For i As Integer = 1 To myRealMatrix0.NRows

                If myPullDownSelection1 = 0 Then    'Get port 1 error box
                    myRealMatrixResult(i, 2) = myRealMatrix0(i, 2)  'S11
                    myRealMatrixResult(i, 3) = myRealMatrix0(i, 3)
                    myRealMatrixResult(i, 4) = myRealMatrix0(i, 18)  'S21
                    myRealMatrixResult(i, 5) = myRealMatrix0(i, 19)
                    myRealMatrixResult(i, 6) = myRealMatrix0(i, 6)  'S12
                    myRealMatrixResult(i, 7) = myRealMatrix0(i, 7)
                    myRealMatrixResult(i, 8) = myRealMatrix0(i, 22)  'S22
                    myRealMatrixResult(i, 9) = myRealMatrix0(i, 23)
                Else    'Get port 2 error box. Note that S11 comes from S44. These are already reversed!
                    myRealMatrixResult(i, 2) = myRealMatrix0(i, 32)  'S11
                    myRealMatrixResult(i, 3) = myRealMatrix0(i, 33)
                    myRealMatrixResult(i, 4) = myRealMatrix0(i, 16)  'S21
                    myRealMatrixResult(i, 5) = myRealMatrix0(i, 17)
                    myRealMatrixResult(i, 6) = myRealMatrix0(i, 28)  'S12
                    myRealMatrixResult(i, 7) = myRealMatrix0(i, 29)
                    myRealMatrixResult(i, 8) = myRealMatrix0(i, 12)  'S22
                    myRealMatrixResult(i, 9) = myRealMatrix0(i, 13)
                End If

            Next i

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class



    ''' <summary>
    ''' Post processor for extracting a .w1p file from a .wnp file.
    ''' </summary>
    ''' <remarks>Useful for comb-generator measurements</remarks>
    <Serializable()> Public Class Post_Extract_w1p_from_wnp
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Comb-generator measurement (.wnp)"    'The input .wnp file
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".w2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                FileExtensions(3) = ".w3p" : FileExtensions(4) = ".w4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "HPR connected to port 1"
                PullDownList(1) = "HPR connected to port 2"
                PullDownList(2) = "HPR connected to port 3"
                PullDownList(3) = "HPR connected to port 4"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Source drive on port 1"
                PullDownList(1) = "Source drive on port 2"
                PullDownList(2) = "Source drive on port 3"
                PullDownList(3) = "Source drive on port 4"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor extracts a .w1p file from a .wnp file. This is useful when measuring a Harmonic Phase Reference with drive on some other port."
                myDescription(2) = "The default frequency list is determined from the first input to the post processor."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".w1p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Extract .w1p file from HPR .wnp measurement."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we have two sets of input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)

            'Check the input to see if it is a .w2p, .w3p or .w4p file.
            If myRealMatrix0.DataType <> ".w2p" And myRealMatrix0.DataType <> ".w3p" And myRealMatrix0.DataType <> ".w4p" Then MechanismList1.ErrorReport = "The input was not a .w2p, .w3p or a .w4p wave file." : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0)

            'Form the .w1p output file
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 5) : myRealMatrixResult.DataType = ".w1p"
            'Select the set of columns we will copy over
            Dim NPorts As Integer = myRealMatrix0.NPorts, CGPort As Integer = myPullDownSelection1 + 1, SourcePort As Integer = myPullDownSelection2 + 1
            If CGPort < 1 Then CGPort = 1
            If SourcePort < 1 Then SourcePort = 1
            'Check the input to see if it is a .w2p, .w3p or .w4p file.
            If NPorts = 0 Or CGPort > NPorts Or SourcePort > NPorts Then MechanismList1.ErrorReport = "Invalid port selection." : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0)

            'Calculate the first column to transfer
            Dim NCol As Integer = 2 + (CGPort - 1) * 4 + (SourcePort - 1) * 4 * NPorts

            'Do it!
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)  'The frequencies.
            'The data
            For kk As Integer = 1 To myRealMatrix0.NRows

                myRealMatrixResult(kk, 2) = myRealMatrix0(kk, NCol)
                myRealMatrixResult(kk, 3) = myRealMatrix0(kk, NCol + 1)
                myRealMatrixResult(kk, 4) = myRealMatrix0(kk, NCol + 2)
                myRealMatrixResult(kk, 5) = myRealMatrix0(kk, NCol + 3)

            Next kk

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class


    ''' <summary>
    ''' Post processor for converting wnp measurements to snp measurements.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_WnP_To_SnP
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Wave file (.wnp)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(17) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas_archive"
                For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                    FileExtensions(i1 + 1) = ".w" + i1.ToString + "p"
                Next i1
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(7) As String
                PullDownList(0) = "1 port"
                PullDownList(1) = "2 port"
                PullDownList(2) = "3 port"
                PullDownList(3) = "4 port"
                PullDownList(4) = "5 port"
                PullDownList(5) = "6 port"
                PullDownList(6) = "7 port"
                PullDownList(7) = "8 port"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String   'No second pulldown list please
                PullDownList(0) = "Standard single-ended"
                PullDownList(1) = "Differential (even number of ports only)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor converts a series of wave measurements, each with the drive turned on at one of the ports, into scattering-parameter measurements."
                myDescription(1) = "The calculation assumes that the device being measured is linear. The default frequency list is determined from the first input to the post processor."
                myDescription(2) = "Differential scattering parameters can be calculated when the number of ports is even. The definitions used can be found in Allan Huynh, Pär Håkansson and Shaofang Gong, Mixed-Mode S-Parameter Conversion for Networks with Coupled Differential Signals, Proc. 37th European Microwave Conference, pp. 238-241, October 2007 and in Andrea Ferrero and Marco Pirola, Generalized Mixed-Mode S-Parameters, IEEE Trans. Microwave Theory Tech., pp. 458-463, vol. 54, no. 1, January 2006."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s" + (myPullDownSelection1 + 1).ToString + "p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate scattering parameters from .wnp files"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim NPorts As Integer = myPullDownSelection1 + 1
            Dim mySParameters1 As New RealMatrix(MechanismList1.FrequencyList.NRows, 1)

            If NPorts < 1 Then
                MechanismList1.ErrorReport = "The ports were not set." : MechanismList1.FatalError = True
                Return ToArray(mySParameters1)
            End If

            'Ready to go
            Dim mySParameters As RealMatrix, myRealMatrix As RealMatrix

            myRealMatrix = MechValues(0).getSParams(MechanismList1)   'This is the input .wnp matrix
            If myRealMatrix.NCols <> 1 + 4 * NPorts * NPorts Then MechanismList1.ErrorReport = "The number of columns in the .wnp file was incorrect." : MechanismList1.FatalError = True : Return ToArray(mySParameters1)
            If myRealMatrix.DataType <> ".w" + NPorts.ToString + "p" Then MechanismList1.ErrorReport = "The data type " + myRealMatrix.DataType + " of the .wnp file was incorrect." : MechanismList1.FatalError = True : Return ToArray(mySParameters1)
            If myRealMatrix.NRows <> MechanismList1.FrequencyList.NRows Then MechanismList1.ErrorReport = "The number of frequencies in the .wnp files are inconsistent." : MechanismList1.FatalError = True : Return ToArray(mySParameters1)

            'Convert the wave parameters to scattering parameters
            mySParameters = myRealMatrix.WnP_to_SnP 'WnP_to_SnP(myRealMatrix)

            Dim myNports As Integer = mySParameters.NPorts
            If myPullDownSelection2 = 1 And 2 * CInt(myNports / 2) = myNports And myNports > 0 Then    'Transform to differential

                Dim F As New Complex(1.0 / Math.Sqrt(2.0), 0.0)
                Dim M1 As New ComplexMatrix(myNports, myNports), M1inv As New ComplexMatrix(myNports, myNports)
                For k As Integer = 1 To myNports / 2
                    M1(k, 2 * k - 1) = F : M1(k, 2 * k) = -F
                    M1(k + (myNports / 2), 2 * k - 1) = F : M1(k + (myNports / 2), 2 * k) = F
                Next k
                M1inv = M1 ^ -1
                For k As Integer = 1 To mySParameters.NRows
                    mySParameters.SMatrix(k) = M1 * mySParameters.SMatrix(k) * M1inv
                Next k

            End If

            Return ToArray(mySParameters)

        End Function


    End Class


    ''' <summary>
    ''' Post processor for converting wnp measurements to snp measurements.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_WnP_To_SnP_Improved
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myExtension As String = ""  'Gets updated when we run the module

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Wave files (.wnp)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList() As String = Nothing   'The list of mechanism (model parameter) names for this model.
                'myNameList(0) = "Wave file (.wnp)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(17) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas_archive"
                For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                    FileExtensions(i1 + 1) = ".w" + i1.ToString + "p"
                Next i1
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "1 port"
                'PullDownList(1) = "2 port"
                'PullDownList(2) = "3 port"
                'PullDownList(3) = "4 port"
                'PullDownList(4) = "5 port"
                'PullDownList(5) = "6 port"
                'PullDownList(6) = "7 port"
                'PullDownList(7) = "8 port"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String   'No second pulldown list please
                PullDownList(0) = "Standard single-ended"
                PullDownList(1) = "Differential (even number of ports only)"
                PullDownList(2) = "Extract switch terms"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(5) As String
                myDescription(0) = "This post processor converts a series of wave measurements, each with the drive turned on at one of the ports, into scattering-parameter measurements."
                myDescription(1) = "The calculation assumes that the device being measured is linear. The default frequency list is determined from the first input to the post processor."
                myDescription(2) = "Differential scattering parameters can be calculated when the number of ports is even. The definitions used can be found in Allan Huynh, Pär Håkansson and Shaofang Gong, Mixed-Mode S-Parameter Conversion for Networks with Coupled Differential Signals, Proc. 37th European Microwave Conference, pp. 238-241, October 2007 and in Andrea Ferrero and Marco Pirola, Generalized Mixed-Mode S-Parameters, IEEE Trans. Microwave Theory Tech., pp. 458-463, vol. 54, no. 1, January 2006."
                myDescription(3) = "It is also possible to extract the switch terms from this post processor. However, .wnp measurements and the converted .snp measurements should not be corrected with these switch terms because the switch-term information is already considered when .wnp data is transformed to .snp data."
                myDescription(5) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return myExtension
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate scattering parameters from .wnp files"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = -1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Ready to go
            Dim mySParameters As RealMatrix, myRealMatrix As RealMatrix
            myRealMatrix = MultipleModelInput(0).getSParams(MechanismList1)   'This is the input .wnp matrix

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim NPorts As Integer = myRealMatrix.NPorts
            Dim mySParameters1 As New RealMatrix(MechanismList1.FrequencyList.NRows, 1)

            If NPorts < 1 Then
                MechanismList1.ErrorReport = "The number of ports was zero." : MechanismList1.FatalError = True
                Return ToArray(mySParameters1)
            End If


            If myRealMatrix.NCols <> 1 + 4 * NPorts * myRealMatrix.NDrive Then MechanismList1.ErrorReport = "The number of columns in the .wnp file was incorrect." : MechanismList1.FatalError = True : Return ToArray(mySParameters1)
            If myRealMatrix.DataType <> ".w" + NPorts.ToString + "p" Then MechanismList1.ErrorReport = "The data type " + myRealMatrix.DataType + " of the .wnp file was incorrect." : MechanismList1.FatalError = True : Return ToArray(mySParameters1)
            If myRealMatrix.NRows <> MechanismList1.FrequencyList.NRows Then MechanismList1.ErrorReport = "The number of frequencies in the .wnp files are inconsistent." : MechanismList1.FatalError = True : Return ToArray(mySParameters1)

            Select Case myPullDownSelection2

                Case 0  'Scattering parameters
                    'Convert the wave parameters to scattering parameters
                    mySParameters = myRealMatrix.WnP_to_SnP 'WnP_to_SnP(myRealMatrix)
                    myExtension = ".s" + NPorts.ToString + "p"

                Case 1  'Differential scattering parameters
                    'Convert the wave parameters to scattering parameters
                    mySParameters = myRealMatrix.WnP_to_SnP 'WnP_to_SnP(myRealMatrix)
                    myExtension = ".s" + NPorts.ToString + "p"

                    Dim myNports As Integer = mySParameters.NPorts
                    If 2 * CInt(myNports / 2) = myNports And myNports > 0 Then    'Transform to differential

                        Dim F As New Complex(1.0 / Math.Sqrt(2.0), 0.0)
                        Dim M1 As New ComplexMatrix(myNports, myNports), M1inv As New ComplexMatrix(myNports, myNports)
                        For k As Integer = 1 To myNports / 2
                            M1(k, 2 * k - 1) = F : M1(k, 2 * k) = -F
                            M1(k + (myNports / 2), 2 * k - 1) = F : M1(k + (myNports / 2), 2 * k) = F
                        Next k
                        M1inv = M1 ^ -1
                        For k As Integer = 1 To mySParameters.NRows
                            mySParameters.SMatrix(k) = M1 * mySParameters.SMatrix(k) * M1inv
                        Next k

                    End If

                Case Else  'Switch terms
                    Dim SwitchCols As Integer = Math.Max(9, 1 + 2 * myRealMatrix.NPorts * myRealMatrix.NPorts)
                    mySParameters = New RealMatrix(myRealMatrix.NRows, SwitchCols, ".switch")
                    myExtension = ".switch"
                    mySParameters.Vector(1) = myRealMatrix.Vector(1)  'Frequencies
                    For kPort As Integer = 1 To myRealMatrix.NPorts
                        Dim DrivePort As Integer = kPort + 1 : If DrivePort > NPorts Then DrivePort = 1 'The drive port from which the power is supplied to kPort
                        For kRow As Integer = 1 To myRealMatrix.NRows
                            Dim aWave As New Complex(myRealMatrix(kRow, 2 + 4 * (kPort - 1) + 4 * (DrivePort - 1) * NPorts), myRealMatrix(kRow, 3 + 4 * (kPort - 1) + 4 * (DrivePort - 1) * NPorts))
                            Dim bWave As New Complex(myRealMatrix(kRow, 4 + 4 * (kPort - 1) + 4 * (DrivePort - 1) * NPorts), myRealMatrix(kRow, 5 + 4 * (kPort - 1) + 4 * (DrivePort - 1) * NPorts))
                            Dim SwitchTerm As Complex = aWave / bWave
                            mySParameters(kRow, 2 + 2 * (kPort - 1)) = SwitchTerm.Re  'Real part of switch term
                            mySParameters(kRow, 3 + 2 * (kPort - 1)) = SwitchTerm.Im
                        Next kRow
                    Next kPort

            End Select

            Return ToArray(mySParameters)

        End Function


    End Class


    ' ''' <summary>
    ' ''' This function converts a .wnp wave-paramter file to a .snp scattering-parameter file
    ' ''' </summary>
    ' ''' <param name="WnP">The input .wnp file.</param>
    ' ''' <returns>The .snp scattering-parameter file.</returns>
    ' ''' <remarks>The caller should take care that the data type of the .wnp file is set correctly.</remarks>
    'Public Function WnP_to_SnP1(ByVal WnP As RealMatrix) As RealMatrix

    '    Dim NPorts As Integer = WnP.NPorts

    '    If WnP.DataType <> ".w" + NPorts.ToString + "p" Then
    '        Throw New ApplicationException("WnP_to_SnP: Wrong data type " + WnP.DataType)
    '    End If

    '    Dim mySParameters As New RealMatrix(WnP.NRows, 1 + 2 * NPorts * NPorts, ".s" + NPorts.ToString + "p")
    '    mySParameters.InitializeAsSParams() : mySParameters.Vector(1) = WnP.Vector(1)

    '    'Step through the frequencies
    '    For k As Integer = 1 To WnP.NRows

    '        'Assemble the A and B matrices
    '        Dim A As New ComplexMatrix(NPorts, NPorts), B As New ComplexMatrix(NPorts, NPorts), S As New ComplexMatrix(NPorts, NPorts)
    '        For i As Integer = 1 To NPorts
    '            For j As Integer = 1 To NPorts
    '                A(j, i) = toComplex(WnP(k, 2 + 4 * (j - 1) + 4 * NPorts * (i - 1)), WnP(k, 3 + 4 * (j - 1) + 4 * NPorts * (i - 1)))
    '                B(j, i) = toComplex(WnP(k, 4 + 4 * (j - 1) + 4 * NPorts * (i - 1)), WnP(k, 5 + 4 * (j - 1) + 4 * NPorts * (i - 1)))
    '            Next j
    '        Next i

    '        'Solve for the scattering matrices
    '        S = B * (A ^ -1)

    '        'Stuff them into a matrix that holds the results
    '        mySParameters.SMatrix(k) = S

    '    Next k

    '    Return mySParameters

    'End Function

    ''' <summary>
    ''' Post processor for calibrating a reciever with a known source.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_SourceCalibratesReceiver
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(4) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Complex spectrum of the source (.complex,.meas)"
                myNameList(1) = "Reflection coefficient of the source (.s1p,.s2p,.meas)"
                myNameList(2) = "Scattering parameters of the adapter between source and receiver (.s2p,.meas)"
                myNameList(3) = "Complex spectrum measured by the receiver (.complex,.meas)"
                myNameList(4) = "Reflection coefficient of the receiver (.s1p,.s2p,.meas)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(8) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".s1p" : FileExtensions(3) = ".s2p" : FileExtensions(4) = ".meas_archive"   'This is the list of aceptable file extensions for the control.
                FileExtensions(5) = ".model" : FileExtensions(6) = ".model_archive" : FileExtensions(7) = ".cascade" : FileExtensions(8) = ".cascade_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Source gamma in S11 (.s2p)"
                PullDownList(1) = "Source gamma in S22 (.s2p)"
                PullDownList(2) = "Source gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(4) As String
                PullDownList(0) = "Receiver gamma in S11 (.s2p)"
                PullDownList(1) = "Receiver gamma in S22 (.s2p)"
                PullDownList(2) = "Receiver gamma in .s1p file"
                PullDownList(3) = "Return source/adapter gamma in .s1p file"
                PullDownList(4) = "Return source/adapter spectrum response"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Source on adapter port 1" : PullDownList(1) = "Source on adapter port 2 (reversed)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calculates the response of a receiver from the measurement of a known source."
                myDescription(1) = "All of the inputs and outputs are complex frequency-domain spectra. The default frequency list is determined from the complex spectrum measured by the receiver."
                myDescription(2) = "You can also use the middle pull-down menu to save the reflection coefficient and response of the source/adapter combination."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Select Case myPullDownSelection2
                    Case 3  'Return source/adapter gamma in .s1p file
                        Return ".s1p"
                    Case Else
                        Return ".complex"
                End Select
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calibrate receiver with known source"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim SourceGamma As RealMatrix, SourceSpectrum As RealMatrix
            Dim SourceSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim AdapterSParameters As RealMatrix
            Dim ReceiverGamma As RealMatrix, ReceiverSpectrum As RealMatrix
            Dim ReceiverSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")

            'Create a vector of ones. This will be useful later
            Dim One As New RealMatrix(MechanismList1.FrequencyList.NRows, 1)
            For i As Integer = 1 To One.NRows
                One(i) = 1.0
            Next i

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            SourceSpectrum = MechValues(0).getSParams(MechanismList1)
            If SourceSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            SourceGamma = MechValues(1).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            SourceSParameters.Vector(1) = MechanismList1.FrequencyList  'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            SourceSParameters.Vector(4) = SourceSpectrum.Vector(2)      'Fill in S21
            SourceSParameters.Vector(5) = SourceSpectrum.Vector(3)      'Fill in S21
            Select Case myPullDownSelection1
                Case 0, -1  'Gamma in S11
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in S11
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in S11
                Case 1  'Gamma in S22
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(8)    'Fill in S22 from Gamma in S22
                    SourceSParameters.Vector(9) = SourceGamma.Vector(9)    'Fill in S22 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If SourceGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in .s1p file
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The first pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Read in the adapter S-parameter matrix
            AdapterSParameters = MechValues(2).getSParams(MechanismList1)
            If AdapterSParameters.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the adapter S-Parameters must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            Select Case myPullDownSelection3
                Case -1, 0  'Normal adapter
                Case 1  'Reversed adapter
                    AdapterSParameters.ReversePorts()
                Case Else   'Error
                    MechanismList1.ErrorReport = "The third pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Read in the receiver inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            ReceiverSpectrum = MechValues(3).getSParams(MechanismList1)
            If ReceiverSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            ReceiverGamma = MechValues(4).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            ReceiverSParameters.Vector(1) = MechanismList1.FrequencyList    'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            ReceiverSParameters.Vector(4) = One                             'Set S21 = 1.0
            Select Case myPullDownSelection2
                Case 0, -1  'Gamma in S11
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)   'Fill in S11 from Gamma in S11
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)   'Fill in S11 from Gamma in S11
                Case 1  'Gamma in S22
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(8)    'Fill in S11 from Gamma in S22
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(9)    'Fill in S11 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If ReceiverGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)    'Fill in S11 from Gamma in .s1p file
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)    'Fill in S11 from Gamma in .s1p file
                Case 3, 4   'Returning only source parameters. Don't do anything.
                Case Else   'Error
                    MechanismList1.ErrorReport = "The second pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Cascade the source, adapter, and receiver scattering parameters
            Dim TotalResponse As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            TotalResponse.InitializeAsSParams() : TotalResponse.Vector(1) = MechanismList1.FrequencyList    'always fill in the frequency list or the automatic interpolation routines will create trouble for you
            TotalResponse = TotalResponse.CascadeSParameters(SourceSParameters)
            TotalResponse = TotalResponse.CascadeSParameters(AdapterSParameters)
            If myPullDownSelection2 < 3 Then TotalResponse = TotalResponse.CascadeSParameters(ReceiverSParameters) 'If > 3 we are returning source parameters.

            If myPullDownSelection2 < 3 Then    'Determine reciever response

                'Determine the reciever response
                Dim ReceiverResponse As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
                If myPullDownSelection2 = 3 Then ReceiverResponse.DataType = ".s1p"
                ReceiverResponse.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
                For i As Integer = 1 To MechanismList1.FrequencyList.NRows
                    Dim S21Input As New Complex(TotalResponse(i, 4), TotalResponse(i, 5))   'The signal in S21 sent into the reciever
                    Dim Received As New Complex(ReceiverSpectrum(i, 2), ReceiverSpectrum(i, 3)) 'The complex spectrum measured by the receiver
                    Dim Response As New Complex(0.0, 0.0)
                    If S21Input.Re = 0.0 And S21Input.Im = 0.0 Then 'Check for zero input
                        MechanismList1.ErrorReport = "The signal from the source at " + MechanismList1.FrequencyList(i).ToString + " GHz is zero."
                        Response = 1.0  'There is no good choice here.
                    Else
                        Response = Received / S21Input  'Calculate the response of the receiver
                    End If
                    ReceiverResponse(i, 2) = Response.Re : ReceiverResponse(i, 3) = Response.Im
                Next i

                'That's all folks!
                Return ToArray(ReceiverResponse)

            ElseIf myPullDownSelection2 = 3 Then    'Return source/adapter gamma in .s1p file

                Dim S22 As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".s1p")
                S22.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
                S22.Vector(2) = TotalResponse.Vector(8) : S22.Vector(3) = TotalResponse.Vector(9)   'The reflection coefficient of the source and adapter.
                Return ToArray(S22)

            Else        'myPullDownSelection2 = 4,  Return source/adapter spectrum response

                Dim TransmitterResponce As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
                TransmitterResponce.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
                TransmitterResponce.Vector(2) = TotalResponse.Vector(4) : TransmitterResponce.Vector(3) = TotalResponse.Vector(5)   'The signal S21 sent into the reciever.
                Return ToArray(TransmitterResponce)

            End If

        End Function


    End Class

    ''' <summary>
    ''' Post processor for calibrating a reciever with a known source.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_SourceCalibratesReceiver_withAutoCor
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(13) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Complex photodiode spectrum (.complex,.meas)"
                myNameList(1) = "Reflection coefficient of the photodiode (.s1p,.s2p,.meas)"
                myNameList(2) = "Scattering parameters of the adapter between photodiode and scope (.s2p,.meas)"
                myNameList(3) = "Complex spectrum measured by the scope (.complex,.meas)"
                myNameList(4) = "Reflection coefficient of the scope (.s1p,.s2p,.meas)"
                myNameList(5) = "Complex spectrum of the laser pulses from autocorrelator (.complex,.meas)"
                myNameList(6) = "Phase-response distribution multiplier (.parameter, nominal value=0)"
                myNameList(7) = "Time-scale multiplier (.parameter, nominal value = 1)"
                myNameList(8) = "Laser repetition rate (.parameter)"
                myNameList(9) = "Photocurrent (.parameter)"
                myNameList(10) = "Complex swept-sine spectrum (.complex,.meas)"
                myNameList(11) = "Lowest frequency to apply swept-sine calibration (.parameter)"
                myNameList(12) = "Highest frequency to apply swept-sine calibration (set < 0 to ignore swept sine data, .parameter)"
                myNameList(13) = "Normalize photodiode response with scope DC calibration at this frequency (.parameter, set < 0 to use photocurrent to normalize photodiode response)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(9) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".s1p" : FileExtensions(3) = ".s2p" : FileExtensions(4) = ".meas_archive"   'This is the list of aceptable file extensions for the control.
                FileExtensions(5) = ".model" : FileExtensions(6) = ".model_archive" : FileExtensions(7) = ".cascade" : FileExtensions(8) = ".cascade_archive" : FileExtensions(9) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Source gamma in S11 (.s2p)"
                PullDownList(1) = "Source gamma in S22 (.s2p)"
                PullDownList(2) = "Source gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Scope gamma in S11 (.s2p)"
                PullDownList(1) = "Scope gamma in S22 (.s2p)"
                PullDownList(2) = "Scope gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Source on adapter port 1" : PullDownList(1) = "Source on adapter port 2 (reversed)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calculates the response of a scope from the measurement of an EOS photodiode, and includes the spectrum of the laser pulses."
                myDescription(1) = "All of the inputs and outputs are complex frequency-domain spectra. The default frequency list is determined from the complex spectrum measured by the scope."
                myDescription(2) = "You can also use the middle pull-down menu to save the reflection coefficient and response of the source/adapter combination."
                myDescription(4) = "Proceedure developed by Paul Hale. Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Select Case myPullDownSelection2
                    Case 3  'Return source/adapter gamma in .s1p file
                        Return ".s1p"
                    Case Else
                        Return ".complex"
                End Select
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calibrate receiver with EOS photodiode"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim SourceGamma As RealMatrix, SourceSpectrum As RealMatrix, AutoCorSpectrum As RealMatrix, SweptSineSpectrum As RealMatrix
            Dim SourceSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim AdapterSParameters As RealMatrix
            Dim ReceiverGamma As RealMatrix, ReceiverSpectrum As RealMatrix
            Dim ReceiverSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")

            'Create a vector of ones. This will be useful later
            Dim One As New RealMatrix(MechanismList1.FrequencyList.NRows, 1)
            For i As Integer = 1 To One.NRows
                One(i) = 1.0
            Next i

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            'Source Spectrum
            SourceSpectrum = MechValues(0).getSParams(MechanismList1)
            If SourceSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            SourceSpectrum.Vector(2) = SourceSpectrum.Vector(2) * 1000000000  'convert from V/C*Hz to V/C*GHz
            SourceSpectrum.Vector(3) = SourceSpectrum.Vector(3) * 1000000000  'convert from V/C*Hz to V/C*GHz

            '*****************************************
            'ToDo
            'Move normalization at fnorm or by swept sine to after where receiver has been deconvolved
            'Keep photocurrent normalization here
            '**********************************************

            'The laser and autocorrelation
            Dim PhaseDist As Double = MechValues(6).MechanismValue(MechanismList1)      'Phase-response distribution (.parameter, nominal value=0)
            Dim TimeScaleDist As Double = MechValues(7).MechanismValue(MechanismList1)  'Time-scale multiplier (.parameter, nominal value = 1)
            If TimeScaleDist = 0.0 Then MechanismList1.ErrorReport = "The time-scale multiplier is set to 0." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            AutoCorSpectrum = MechValues(5).getSParams(MechanismList1)                  'Complex spectrum of the laser response (.complex,.meas)
            If AutoCorSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the auto-correlation spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            Dim AutoCorSpectrum1 As New RealMatrix(AutoCorSpectrum.NRows, 3, ".complex")    'The perturbed autocorrelation spectrum
            AutoCorSpectrum1.Vector(1) = AutoCorSpectrum.Vector(1)                          'Map back to the origional time grid into this variable
            AutoCorSpectrum.Vector(1) = (1.0 / TimeScaleDist) * AutoCorSpectrum.Vector(1)   'Scale the frequency scale
            AutoCorSpectrum1.Vector(2) = Linterp(AutoCorSpectrum1.Vector(1), AutoCorSpectrum.Vector(2), AutoCorSpectrum.Vector(1))  'Interpolate the results to the new time scale
            AutoCorSpectrum1.Vector(3) = Linterp(AutoCorSpectrum1.Vector(1), AutoCorSpectrum.Vector(3), AutoCorSpectrum.Vector(1))

            'The photodiode current
            Dim LaserRepRate As Double = MechValues(8).MechanismValue(MechanismList1)  'Laser repetition rate (.parameter)
            Dim PhotoCurrent As Double = MechValues(9).MechanismValue(MechanismList1)  'Photocurrent (.parameter) in A

            Dim PhotodiodeNormFreq As Double = MechValues(13).MechanismValue(MechanismList1)  'Frequency at which the photodiode response will be overridden and set to 1. Use absolute photodiode cal if < 0

            'The Swept-sine calibration
            Dim LowFreq As Double = MechValues(11).MechanismValue(MechanismList1)   'Lowest frequency to use swept sine calibration (.parameter)
            Dim HighFreq As Double = MechValues(12).MechanismValue(MechanismList1)  'Highest frequency to use swept sine calibration (.parameter)
            SweptSineSpectrum = MechValues(10).getSParams(MechanismList1)           'Complex swept-sine spectrum (.complex,.meas)

            'Correct the source spectrum with the photodiode, also account for the autocorrelation.
            For k As Integer = 1 To AutoCorSpectrum1.NRows
                Dim AutoCor As New Complex(AutoCorSpectrum1(k, 2), PhaseDist * AutoCorSpectrum1(k, 3))  'OK for small phases
                'AutoCor comes in with units of V/C-Hz. Multiply by coulombs / pulse for this experiment.
                AutoCor = AutoCor * PhotoCurrent / (LaserRepRate * 1000000000)  'laser rep rate must be in Hz since current is C/s  
                Dim SourceSpect As New Complex(SourceSpectrum(k, 2), SourceSpectrum(k, 3))
                SourceSpect = SourceSpect * AutoCor         'We'll divide by this later on
                SourceSpectrum(k, 2) = SourceSpect.Re : SourceSpectrum(k, 3) = SourceSpect.Im
            Next k

            'Set the scope response to 1 at PhotodiodeNormFreq if it is >= 0
            ' If PhotodiodeNormFreq >= 0.0 Then
            'Find the closest frequency to PhotodiodeNormFreq
            'Dim k As Integer = 1
            'Do Until SourceSpectrum(k, 1) >= PhotodiodeNormFreq
            'k = k + 1
            'Loop
            'If SourceSpectrum(k, 1) = PhotodiodeNormFreq Then  'just normalize to this frequency
            'Dim MagNormFreq As Double = Math.Sqrt(SourceSpectrum(k, 2) ^ 2 + SourceSpectrum(k, 3) ^ 2)
            'For k1 As Integer = 1 To SourceSpectrum.NRows
            'SourceSpectrum(k1, 2) = SourceSpectrum(k1, 2) / MagNormFreq
            ' SourceSpectrum(k1, 3) = SourceSpectrum(k1, 3) / MagNormFreq
            'Next
            'Else 'interpolate to get response at correct frequency

            'End If
            'End If

            ''Override the amplitude calibration with the swept-sine calibration if we have it
            'If HighFreq >= 0.0 And LowFreq >= 0 And HighFreq >= LowFreq Then
            ''placeholder
            'End If

            'Source reflection Coefficient
            SourceGamma = MechValues(1).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            SourceSParameters.Vector(1) = MechanismList1.FrequencyList  'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            SourceSParameters.Vector(4) = SourceSpectrum.Vector(2)      'Fill in S21
            SourceSParameters.Vector(5) = SourceSpectrum.Vector(3)      'Fill in S21
            Select Case myPullDownSelection1
                Case 0, -1  'Gamma in S11
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in S11
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in S11
                Case 1  'Gamma in S22
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(8)    'Fill in S22 from Gamma in S22
                    SourceSParameters.Vector(9) = SourceGamma.Vector(9)    'Fill in S22 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If SourceGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in .s1p file
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The first pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Read in the adapter S-parameter matrix
            AdapterSParameters = MechValues(2).getSParams(MechanismList1)
            If AdapterSParameters.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the adapter S-Parameters must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            Select Case myPullDownSelection3
                Case -1, 0  'Normal adapter
                Case 1  'Reversed adapter
                    AdapterSParameters.ReversePorts()
                Case Else   'Error
                    MechanismList1.ErrorReport = "The third pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Read in the receiver inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            ReceiverSpectrum = MechValues(3).getSParams(MechanismList1)
            If ReceiverSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            ReceiverGamma = MechValues(4).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            ReceiverSParameters.Vector(1) = MechanismList1.FrequencyList    'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            ReceiverSParameters.Vector(4) = One                             'Set S21 = 1.0
            Select Case myPullDownSelection2
                Case 0, -1  'Gamma in S11
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)   'Fill in S11 from Gamma in S11
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)   'Fill in S11 from Gamma in S11
                Case 1  'Gamma in S22
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(8)    'Fill in S11 from Gamma in S22
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(9)    'Fill in S11 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If ReceiverGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)    'Fill in S11 from Gamma in .s1p file
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)    'Fill in S11 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The second pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Cascade the source, adapter, and receiver scattering parameters
            Dim TotalResponse As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            TotalResponse.InitializeAsSParams() : TotalResponse.Vector(1) = MechanismList1.FrequencyList    'always fill in the frequency list or the automatic interpolation routines will create trouble for you
            TotalResponse = TotalResponse.CascadeSParameters(SourceSParameters)
            TotalResponse = TotalResponse.CascadeSParameters(AdapterSParameters)
            TotalResponse = TotalResponse.CascadeSParameters(ReceiverSParameters) 'If > 3 we are returning source parameters.

            'Determine the reciever response
            Dim ReceiverResponse As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            ReceiverResponse.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            For i As Integer = 1 To MechanismList1.FrequencyList.NRows
                Dim S21Input As New Complex(TotalResponse(i, 4), TotalResponse(i, 5))   'The signal in S21 sent into the reciever
                Dim Received As New Complex(ReceiverSpectrum(i, 2), ReceiverSpectrum(i, 3)) 'The complex spectrum measured by the receiver
                Dim Response As New Complex(0.0, 0.0)
                If S21Input.Re = 0.0 And S21Input.Im = 0.0 Then 'Check for zero input
                    MechanismList1.ErrorReport = "The signal from the source at " + MechanismList1.FrequencyList(i).ToString + " GHz is zero."
                    Response = 1.0  'There is no good choice here.
                Else
                    Response = Received / S21Input  'Calculate the response of the receiver
                End If
                ReceiverResponse(i, 2) = Response.Re : ReceiverResponse(i, 3) = Response.Im
            Next i
            '************************
            'ToDo   normalization to a frequency or to swept sine moved here
            'Set the scope response to 1 at PhotodiodeNormFreq if it is >= 0
            If PhotodiodeNormFreq >= 0.0 Then
                'Find the closest frequency to PhotodiodeNormFreq
                Dim k As Integer = 1
                Do Until ReceiverResponse(k, 1) >= PhotodiodeNormFreq
                    k = k + 1
                Loop
                If ReceiverResponse(k, 1) = PhotodiodeNormFreq Then  'just normalize to this frequency
                    Dim MagNormFreq As Double = Math.Sqrt(ReceiverResponse(k, 2) ^ 2 + ReceiverResponse(k, 3) ^ 2)
                    For k1 As Integer = 1 To ReceiverResponse.NRows
                        ReceiverResponse(k1, 2) = ReceiverResponse(k1, 2) / MagNormFreq
                        ReceiverResponse(k1, 3) = ReceiverResponse(k1, 3) / MagNormFreq
                    Next
                Else 'interpolate to get response at correct frequency
                    'Not implemented yet

                End If
            End If

            'Override the amplitude calibration with the swept-sine calibration if we have it
            If HighFreq >= 0.0 And LowFreq >= 0 And HighFreq >= LowFreq Then
                'placeholder - not implemented yet
            End If
            '******************************************





            'That's all folks!
            Return ToArray(ReceiverResponse)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for calibrating a source with a known reciever.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_ReceiverCalibratesSource
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(4) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Reflection coefficient of the source (.s1p,.s2p,.meas)"
                myNameList(1) = "Scattering parameters of the adapter between source and receiver (.s2p,.meas)"
                myNameList(2) = "Complex spectrum measured by the receiver (.complex,.meas)"
                myNameList(3) = "Reflection coefficient of the receiver (.s1p,.s2p,.meas)"
                myNameList(4) = "Receiver impulse response (.complex,.meas)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(8) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".s1p" : FileExtensions(3) = ".s2p" : FileExtensions(4) = ".meas_archive"
                FileExtensions(5) = ".model" : FileExtensions(6) = ".model_archive" : FileExtensions(7) = ".cascade" : FileExtensions(8) = ".cascade_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Source gamma in S11 (.s2p)"
                PullDownList(1) = "Source gamma in S22 (.s2p)"
                PullDownList(2) = "Source gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Receiver gamma in S11 (.s2p)"
                PullDownList(1) = "Receiver gamma in S22 (.s2p)"
                PullDownList(2) = "Receiver gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Source on adapter port 1" : PullDownList(1) = "Source on adapter port 2 (reversed)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor calculates the signal generated by a source from the measured response of the receiver."
                myDescription(1) = "All of the inputs and outputs are complex frequency-domain spectra. The default frequency list is determined from the complex spectrum measured by the receiver."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calibrate signal from source with calibrated receiver"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim SourceGamma As RealMatrix
            Dim SourceSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim AdapterSParameters As RealMatrix
            Dim ReceiverGamma As RealMatrix, ReceiverSpectrum As RealMatrix, RecieverResponseSpectrum As RealMatrix
            Dim ReceiverSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")

            'Create a vector of ones. This will be useful later
            Dim One As New RealMatrix(MechanismList1.FrequencyList.NRows, 1)
            For i As Integer = 1 To One.NRows
                One(i) = 1.0
            Next i

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            SourceGamma = MechValues(0).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            SourceSParameters.Vector(1) = MechanismList1.FrequencyList  'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            SourceSParameters.Vector(4) = One      'Set S21 to one
            Select Case myPullDownSelection1
                Case 0  'Gamma in S11
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in S11
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in S11
                Case 1  'Gamma in S22
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(8)    'Fill in S22 from Gamma in S22
                    SourceSParameters.Vector(9) = SourceGamma.Vector(9)    'Fill in S22 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If SourceGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in .s1p file
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The first pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            End Select

            'Read in the adapter S-parameter matrix
            AdapterSParameters = MechValues(1).getSParams(MechanismList1)
            If AdapterSParameters.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the adapter S-Parameters must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            Select Case myPullDownSelection3
                Case -1, 0  'Normal adapter
                Case 1  'Reversed adapter
                    AdapterSParameters.ReversePorts()
                Case Else   'Error
                    MechanismList1.ErrorReport = "The third pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            End Select

            'Read in the receiver inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            ReceiverSpectrum = MechValues(2).getSParams(MechanismList1)
            If ReceiverSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            RecieverResponseSpectrum = MechValues(4).getSParams(MechanismList1)
            If RecieverResponseSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver response spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            ReceiverGamma = MechValues(3).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            ReceiverSParameters.Vector(1) = MechanismList1.FrequencyList    'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            ReceiverSParameters.Vector(4) = RecieverResponseSpectrum.Vector(2)  'Set S21 = RecieverResponseSpectrum
            ReceiverSParameters.Vector(5) = RecieverResponseSpectrum.Vector(3)  'Set S21 = RecieverResponseSpectrum
            Select Case myPullDownSelection2
                Case 0, -1  'Gamma in S11
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)   'Fill in S11 from Gamma in S11
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)   'Fill in S11 from Gamma in S11
                Case 1  'Gamma in S22
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(8)    'Fill in S11 from Gamma in S22
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(9)    'Fill in S11 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If ReceiverGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)    'Fill in S11 from Gamma in .s1p file
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)    'Fill in S11 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The second pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            End Select

            'Cascade the source, adapter, and receiver scattering parameters
            Dim TotalResponse As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            TotalResponse.InitializeAsSParams() : TotalResponse.Vector(1) = MechanismList1.FrequencyList    'always fill in the frequency list or the automatic interpolation routines will create trouble for you
            TotalResponse = TotalResponse.CascadeSParameters(SourceSParameters)
            TotalResponse = TotalResponse.CascadeSParameters(AdapterSParameters)
            TotalResponse = TotalResponse.CascadeSParameters(ReceiverSParameters)

            'Determine the reciever response
            Dim SourceSignal As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            SourceSignal.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            For i As Integer = 1 To MechanismList1.FrequencyList.NRows
                Dim S21Input As New Complex(TotalResponse(i, 4), TotalResponse(i, 5))   'S21 of the adapter and the reciever response
                Dim Received As New Complex(ReceiverSpectrum(i, 2), ReceiverSpectrum(i, 3)) 'The complex spectrum measured by the receiver
                Dim Response As New Complex(0.0, 0.0)
                If S21Input.Re = 0.0 And S21Input.Im = 0.0 Then 'Check for zero input
                    MechanismList1.ErrorReport = "The signal from the source at " + MechanismList1.FrequencyList(i).ToString + " GHz is zero."
                    Response = 1.0  'There is no good choice here.
                Else
                    Response = Received / S21Input  'Calculate the response of the receiver
                End If
                SourceSignal(i, 2) = Response.Re : SourceSignal(i, 3) = Response.Im
            Next i

            'That's all folks!
            Return ToArray(SourceSignal)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for adding mismatch and power-meter efficiency corrections to heterodyne measurements.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_HeterodyneMismatchCorrection
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Reflection coefficient of the photodiode (.s1p,.s2p,.meas)"
                myNameList(1) = "Scattering parameters of the adapter between photodiode and power meter (.s2p,.meas)"
                myNameList(2) = "Uncorrected power-normalized photodiode response (.power,.meas)"
                myNameList(3) = "Power-meter reflection coefficient (.s1p,.s2p,.meas)"
                myNameList(4) = "Power-meter efficiency or calibration factor (.complex,.meas)"
                myNameList(5) = "Power-meter reflection coefficient (set to 0 if using CF) (.s1p,.s2p,.meas)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(8) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".s1p" : FileExtensions(3) = ".s2p" : FileExtensions(4) = ".meas_archive"
                FileExtensions(5) = ".model" : FileExtensions(6) = ".power" : FileExtensions(7) = ".cascade" : FileExtensions(8) = ".cascade_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Photodiode gamma in S11 (.s2p)"
                PullDownList(1) = "Photodiode gamma in S22 (.s2p)"
                PullDownList(2) = "Photodiode gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Power-meter gamma in S11 (.s2p)"
                PullDownList(1) = "Power-meter gamma in S22 (.s2p)"
                PullDownList(2) = "Power-meter gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Photodiode on adapter port 1" : PullDownList(1) = "Photodiode on adapter port 2 (reversed)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor calculates the power-normalized response of a photodiode measured in the NIST heterodyne system from the efficiency of the power meter and the mismatch between the power meter and the photodiode."
                myDescription(1) = "The output is a power-normalized response of the photodiode. The default frequency list is determined from the uncorrected power-normalized photodiode response."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".power"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Correct power-normalized photodiode response"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim SourceGamma As RealMatrix
            Dim SourceSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim AdapterSParameters As RealMatrix
            'ReceiverGamma1 is same as ReceiverGamma when the power meter efficiency is entered. It should be set to 0 when calibration factor is entered.
            Dim ReceiverGamma As RealMatrix, ReceiverGamma1 As RealMatrix, ReceiverSpectrum As RealMatrix, RecieverResponseSpectrum As RealMatrix
            Dim ReceiverSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")

            'Create a vector of ones. This will be useful later
            Dim One As New RealMatrix(MechanismList1.FrequencyList.NRows, 1)
            For i As Integer = 1 To One.NRows
                One(i) = 1.0
            Next i

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            SourceGamma = MechValues(0).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            SourceSParameters.Vector(1) = MechanismList1.FrequencyList  'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            SourceSParameters.Vector(4) = One      'Set S21 to one
            Select Case myPullDownSelection1
                Case 0  'Gamma in S11
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in S11
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in S11
                Case 1  'Gamma in S22
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(8)    'Fill in S22 from Gamma in S22
                    SourceSParameters.Vector(9) = SourceGamma.Vector(9)    'Fill in S22 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If SourceGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in .s1p file
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The first pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            End Select

            'Read in the adapter S-parameter matrix
            AdapterSParameters = MechValues(1).getSParams(MechanismList1)
            If AdapterSParameters.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the adapter S-Parameters must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            Select Case myPullDownSelection3
                Case -1, 0  'Normal adapter
                Case 1  'Reversed adapter
                    AdapterSParameters.ReversePorts()
                Case Else   'Error
                    MechanismList1.ErrorReport = "The third pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            End Select

            'Read in the receiver inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            ReceiverSpectrum = MechValues(2).getSParams(MechanismList1)
            If ReceiverSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the power-normalized resonse of the photodiode must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            RecieverResponseSpectrum = MechValues(4).getSParams(MechanismList1)
            If RecieverResponseSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the power-meter efficiency must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            ReceiverGamma = MechValues(3).getSParams(MechanismList1)
            ReceiverGamma1 = MechValues(5).getSParams(MechanismList1)
            'Fill in the source S-parameter matrix
            ReceiverSParameters.Vector(1) = MechanismList1.FrequencyList    'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            'ReceiverSParameters.Vector(4) = RecieverResponseSpectrum.Vector(2)  'Set S21 = RecieverResponseSpectrum
            'ReceiverSParameters.Vector(5) = RecieverResponseSpectrum.Vector(3)  'Set S21 = RecieverResponseSpectrum
            'Set S21 = sqrt of calibration factor = efficiency * (1-|Gpm|^2)
            For k As Integer = 1 To ReceiverSParameters.NRows
                Dim Efficiency As New Complex(RecieverResponseSpectrum(k, 2), RecieverResponseSpectrum(k, 3))   'Power-meter effieicncy
                Dim MMcor As New Complex(ReceiverGamma1(k, 2), ReceiverGamma1(k, 3))    'Power-meter gamma
                If myPullDownSelection2 = 1 Then MMcor = toComplex(ReceiverGamma1(k, 8), ReceiverGamma1(k, 9))
                ReceiverSParameters(k, 4) = Math.Sqrt(Abs(Efficiency * (toComplex(1.0, 0.0) - Abs(MMcor * MMcor))))
            Next k
            Select Case myPullDownSelection2
                Case 0, -1  'Gamma in S11
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)   'Fill in S11 from Gamma in S11
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)   'Fill in S11 from Gamma in S11
                Case 1  'Gamma in S22
                    If ReceiverGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(8)    'Fill in S11 from Gamma in S22
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(9)    'Fill in S11 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If ReceiverGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the receiver gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(ReceiverSpectrum)
                    ReceiverSParameters.Vector(2) = ReceiverGamma.Vector(2)    'Fill in S11 from Gamma in .s1p file
                    ReceiverSParameters.Vector(3) = ReceiverGamma.Vector(3)    'Fill in S11 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The second pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceGamma)
            End Select

            'Cascade the source, adapter, and receiver scattering parameters
            Dim TotalResponse As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            TotalResponse.InitializeAsSParams() : TotalResponse.Vector(1) = MechanismList1.FrequencyList    'always fill in the frequency list or the automatic interpolation routines will create trouble for you
            TotalResponse = TotalResponse.CascadeSParameters(SourceSParameters)
            TotalResponse = TotalResponse.CascadeSParameters(AdapterSParameters)
            TotalResponse = TotalResponse.CascadeSParameters(ReceiverSParameters)

            'Determine the reciever response
            Dim SourceSignal As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".power")
            SourceSignal.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            For i As Integer = 1 To MechanismList1.FrequencyList.NRows
                Dim S21Input As New Complex(TotalResponse(i, 4), TotalResponse(i, 5))   'S21 of the adapter and the reciever response
                Dim Received As New Complex(ReceiverSpectrum(i, 2), ReceiverSpectrum(i, 3)) 'The complex spectrum measured by the receiver
                Received = Complex_Number_Class.Sqrt(Received)  'Take the square root, as heterodyne input is power normalized
                Dim Response As New Complex(0.0, 0.0)
                If S21Input.Re = 0.0 And S21Input.Im = 0.0 Then 'Check for zero input
                    MechanismList1.ErrorReport = "The signal from the source at " + MechanismList1.FrequencyList(i).ToString + " GHz is zero."
                    Response = 1.0  'There is no good choice here.
                Else
                    Response = Received / S21Input  'Calculate the response of the receiver
                End If
                'SourceSignal(i, 2) = Response.Re : SourceSignal(i, 3) = Response.Im
                SourceSignal(i, 2) = Abs(Response * Response)   'The output is also a power-normalized response
            Next i

            'That's all folks!
            Return ToArray(SourceSignal)

        End Function


    End Class

    ''' <summary>
    ''' Post processor adds adapters to recievers and sources.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_SourceReceiverAdapterAddition
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(2) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Complex spectrum of the source or receiver (.complex,.meas)"
                myNameList(1) = "Reflection coefficient of the source or receiver (.s1p,.s2p,.meas)"
                myNameList(2) = "Scattering parameters of the adapter connected to the source or receiver (.s2p,.meas)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(8) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".s1p" : FileExtensions(3) = ".s2p" : FileExtensions(4) = ".meas_archive"   'This is the list of aceptable file extensions for the control.
                FileExtensions(5) = ".model" : FileExtensions(6) = ".model_archive" : FileExtensions(7) = ".cascade" : FileExtensions(8) = ".cascade_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Source or receiver gamma in S11 (.s2p)"
                PullDownList(1) = "Source or receiver gamma in S22 (.s2p)"
                PullDownList(2) = "Source or receiver gamma in .s1p file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Return gamma of source or receiver and adapter in .s1p file"
                PullDownList(1) = "Return spectral response of source or receiver and adapter in .complex file"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Source or receiver on adapter port 1"
                PullDownList(1) = "Source or receiver on adapter port 2 (reversed)"
                PullDownList(2) = "Source or receiver on adapter port 1 and de-embed adapter"
                PullDownList(3) = "Source or receiver on adapter port 2 (reversed) and de-embed adapter"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor cascades an adapter onto the response of a source or receiver from the measurement of a known source."
                myDescription(1) = "All of the inputs and outputs are complex frequency-domain spectra. The default frequency list is determined from the complex spectrum of the source or receiver."
                myDescription(2) = "You can also use the middle pull-down menu to save the reflection coefficient and response of the source or reciever and adapter combination."
                myDescription(3) = "The right-most pull-down menu is used to control embedding and de-embedding of the adapter. The default selection adds the adapter to the source."
                myDescription(4) = "When you are de-embedding an adapter from the measurement of the source or reciever with the adapter, the responce and reflection coeffiecient of the source or reciever you enter into the menu will be the response and reflection coefficient of the adapter connected to the source or reciever."
                myDescription(6) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Select Case myPullDownSelection2
                    Case 0  'Return source/adapter gamma in .s1p file
                        Return ".s1p"
                    Case Else
                        Return ".complex"
                End Select
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Cascade adapter on source or receiver"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim SourceGamma As RealMatrix, SourceSpectrum As RealMatrix
            Dim SourceSParameters As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim AdapterSParameters As RealMatrix

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            SourceSpectrum = MechValues(0).getSParams(MechanismList1)
            If SourceSpectrum.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source or receiver spectrum must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            SourceGamma = MechValues(1).getSParams(MechanismList1)
            'Fill in the source or receiver S-parameter matrix
            SourceSParameters.Vector(1) = MechanismList1.FrequencyList  'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
            SourceSParameters.Vector(4) = SourceSpectrum.Vector(2)      'Fill in S21
            SourceSParameters.Vector(5) = SourceSpectrum.Vector(3)      'Fill in S21
            Select Case myPullDownSelection1
                Case 0, -1  'Gamma in S11
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in S11
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in S11
                Case 1  'Gamma in S22
                    If SourceGamma.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s2p file must be 9." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(8)    'Fill in S22 from Gamma in S22
                    SourceSParameters.Vector(9) = SourceGamma.Vector(9)    'Fill in S22 from Gamma in S22
                Case 2  'Gamma in .s1p file
                    If SourceGamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the source gamma .s1p file must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
                    SourceSParameters.Vector(8) = SourceGamma.Vector(2)    'Fill in S22 from Gamma in .s1p file
                    SourceSParameters.Vector(9) = SourceGamma.Vector(3)    'Fill in S22 from Gamma in .s1p file
                Case Else   'Error
                    MechanismList1.ErrorReport = "The first pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Read in the adapter S-parameter matrix
            AdapterSParameters = MechValues(2).getSParams(MechanismList1)
            If AdapterSParameters.NCols <> 9 Then MechanismList1.ErrorReport = "The number of columns in the adapter S-Parameters must be 3." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            Select Case myPullDownSelection3
                Case -1, 0  'Normal adapter
                Case 1  'Reversed adapter
                    AdapterSParameters.ReversePorts()
                Case 2  'Normal adapter and de-embed
                    AdapterSParameters.Invert()
                Case 3  'Reversed adapter and de-embed
                    AdapterSParameters.ReversePorts()
                    AdapterSParameters.Invert()
                Case Else   'Error
                    MechanismList1.ErrorReport = "The third pull-down selection is not valid." : MechanismList1.FatalError = True : Return ToArray(SourceSpectrum)
            End Select

            'Cascade the source and adapter
            SourceSParameters = SourceSParameters.CascadeSParameters(AdapterSParameters)

            'Return result
            Select Case myPullDownSelection2

                Case -1, 0  'Return gamma of source or receiver and adapter in .s1p file

                    'Determine the reciever gamma
                    Dim ReceiverGamma As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".s1p")
                    ReceiverGamma.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
                    ReceiverGamma.Vector(2) = SourceSParameters.Vector(8)        'Real part of S22
                    ReceiverGamma.Vector(3) = SourceSParameters.Vector(9)        'Imag part of S22
                    Return ToArray(ReceiverGamma)

                Case Else   'Return spectral response of source or receiver and adapter in .complex file

                    'Determine the reciever response
                    Dim ReceiverResponse As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
                    ReceiverResponse.Vector(1) = MechanismList1.FrequencyList   'Fill in the frequency list (always fill in the frequency list or the automatic interpolation routines will create trouble for you)
                    ReceiverResponse.Vector(2) = SourceSParameters.Vector(4)        'Real part of S21
                    ReceiverResponse.Vector(3) = SourceSParameters.Vector(5)        'Imag part of S21
                    Return ToArray(ReceiverResponse)

            End Select

        End Function


    End Class

    ''' <summary>
    ''' Post processor for mapping arbitrary frequency results to time
    ''' </summary>
    ''' <remarks>Inputs in the frequency domain, ooutputs in the time domain. Calls FrequencyToTime.</remarks>
    <Serializable()> Public Class Post_FrequencyToTime
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input single-sided spectrum (.complex)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Pulse start time (.parameter)"
                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(9) As String : FileExtensions(0) = ".meas" 'This is the list of aceptable file extensions for the control.
                FileExtensions(1) = ".meas_archive" : FileExtensions(2) = ".complex" : FileExtensions(3) = ".parameter"
                FileExtensions(4) = ".s1p" : FileExtensions(5) = ".s2p" : FileExtensions(6) = ".w1p" : FileExtensions(7) = ".w2p" : FileExtensions(8) = ".w3p" : FileExtensions(9) = ".w4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(49) As String
                For kk As Integer = 0 To 49
                    PullDownList(kk) = "Input from complex-data column " + (kk + 1).ToString
                Next
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Do not reset pulse start time"
                PullDownList(1) = "Move pulse by ""Pulse start time"" above"
                PullDownList(2) = "Reset pulse centroid to ""Pulse start time"" above"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String 'Fourier transform type
                PullDownList(0) = "Single-sided spectrum of finite-energy signal."
                PullDownList(1) = "Discrete voltage-wave spectrum of repetative voltage-waves measured by Agilent VNAs."
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(7) As String
                myDescription(0) = "This post processor approximates the time-domain representation of a finite-energy pulse from the upper-half of its Fourier spectrum."
                myDescription(1) = "The default frequency list is determined from the complex input frequency spectrum."
                myDescription(2) = "If the units of frequency spectrum are u-ns or u/GHz. the units of temporal signal will be u."
                myDescription(3) = "To get the total energy, you have to integrate over positive and negative frequencies."
                myDescription(5) = "If you select discrete voltage waves, the signal is repetative, and the temporal waveforms also have the units of voltage."
                myDescription(7) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".waveform"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Find temporal response from Fourier transform"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Dimension all fo the matrices we will need.
            Dim Times As New RealMatrix(MechanismList1.TimeList.NRows), TimeValues As New RealMatrix(MechanismList1.TimeList.NRows), OutputTimes As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".waveform")
            Times.Fill(MechanismList1.TimeList)
            Dim Frequencies As New RealMatrix(MechanismList1.FrequencyList.NRows), ComplexFrequencyValues As New ComplexMatrix(MechanismList1.FrequencyList.NRows), FrequencyInput As New RealMatrix(MechanismList1.FrequencyList.NRows)
            Frequencies.Fill(MechanismList1.FrequencyList)
            FrequencyInput = MultipleModelInput(0).getSParams(MechanismList1)

            'Choose the input column
            Dim Col As Integer = myPullDownSelection1
            If myPullDownSelection1 < 0 Then Col = 0
            Col = 2 + Col * 2   'Cols go 2, 4, 6, 8, ...
            If Col + 1 > FrequencyInput.NCols Then Col = 2
            ComplexFrequencyValues = FrequencyInput.Vector(Col) + toComplex(0.0, 1.0) * FrequencyInput.Vector(Col + 1)

            'Move pulse position relative to current location if asked by the user
            Dim MovePulsePosition As Double = 0.0
            If myPullDownSelection2 = 1 Then
                MovePulsePosition = MechValues(0).MechanismValue(MechanismList1)
                'Translate the frequency array we will pass to the Fourier Transform by adjusting the phase of the values in ComplexFrequencyValues 
                If MovePulsePosition <> 0.0 Then Call TranslateTime(ComplexFrequencyValues, FrequencyInput, -MovePulsePosition)
            End If

            'Transform to time
            Select Case myPullDownSelection3
                Case -1, 0  'Pulse energy signal
                    Call Complex_Number_Class.FrequencyToFixedTime(Times, TimeValues, Frequencies, ComplexFrequencyValues)
                Case 1      'Discrete voltage-wave spectrum of repetative voltage-waves measured by Agilent VNAs.
                    Call Complex_Number_Class.VoltageWavesToFixedTime(Times, TimeValues, Frequencies, ComplexFrequencyValues)
            End Select


            'Move pulse position to a fixed location if asked by the user
            Select Case myPullDownSelection2
                Case 2      'Adjust pulse postition with centroid method
                    'Find desired pulse position
                    Dim DesiredPulsePosition As Double = MechValues(0).MechanismValue(MechanismList1)
                    'Find pulse position
                    Dim CentroidTime As Double = Centroid(TimeValues) * (Times(2) - Times(1))
                    MovePulsePosition = DesiredPulsePosition - CentroidTime
                    'Readjust the phases of FrequencyValues appropriately
                    Call TranslateTime(ComplexFrequencyValues, FrequencyInput, Times(1) - MovePulsePosition)
                    'Take the inverse FFT a second time
                    'Call Complex_Number_Class.FrequencyToFixedTime(Times, TimeValues, Frequencies, ComplexFrequencyValues)
                    Select Case myPullDownSelection3
                        Case -1, 0  'Pulse energy signal
                            Call Complex_Number_Class.FrequencyToFixedTime(Times, TimeValues, Frequencies, ComplexFrequencyValues)
                        Case 1      'Discrete voltage-wave spectrum of repetative voltage-waves measured by Agilent VNAs.
                            Call Complex_Number_Class.VoltageWavesToFixedTime(Times, TimeValues, Frequencies, ComplexFrequencyValues)
                    End Select
            End Select

            'Stuff the results back into an output matrix of type .waveform
            Dim n1 As Integer = Times.NRows, n2 As Integer = OutputTimes.NRows, n3 As Integer = TimeValues.NRows
            OutputTimes.Vector(1) = Times : OutputTimes.Vector(2) = TimeValues

            'That's all folks!
            Return ToArray(OutputTimes)

        End Function

        ''' <summary>
        ''' Find the centroid of the pulse
        ''' </summary>
        ''' <param name="T">The voltage values</param>
        ''' <returns>The posistion of the centroid as a double corresponding to the zero-based index of the centroid.</returns>
        ''' <remarks>If the centroid is half way between the first and second time point, the function returns 0.5.</remarks>
        Function Centroid(ByRef T As RealMatrix) As Double

            'We are going to find the ratio of int v*k / int v to find the centroid of voltages v
            Dim Nt As Integer = T.NRows, Numerator As Double = 0.0, Denominator As Double = 0.0

            For k As Integer = 0 To Nt - 1

                Numerator = Numerator + CDbl(k) * T(k + 1)
                Denominator = Denominator + T(k + 1)

            Next

            Centroid = Numerator / Denominator

        End Function

        ''' <summary>
        ''' Perform a time translation by adjusting the linear phase of the frequency-domain components.
        ''' </summary>
        ''' <param name="FrequencyValues">The output freqney values.</param>
        ''' <param name="FrequencyValuesInput">The phase-adjusted output frequency values</param>
        ''' <param name="TimeTranslation">The time we will translate</param>
        ''' <remarks></remarks>
        Sub TranslateTime(ByRef FrequencyValues As Complex_Number_Class.ComplexMatrix, ByRef FrequencyValuesInput As Complex_Number_Class.RealMatrix, ByVal TimeTranslation As Double)

            For k As Integer = 1 To FrequencyValues.NRows

                'Adjust the phase of the spectrum to correspond to the time zero of our output frequency list
                Dim E As New Complex_Number_Class.Complex
                E = Complex_Number_Class.Exp(toComplex(0.0, 2.0 * Math.PI * FrequencyValuesInput(k, 1) * TimeTranslation))
                FrequencyValues(k) = E * FrequencyValues(k)

            Next k

        End Sub



    End Class

    ''' <summary>
    ''' Post processor for mapping arbitrary time results to frequency
    ''' </summary>
    ''' <remarks>Inputs in the frequency domain, ooutputs in the time domain. Calls FrequencyToTime.</remarks>
    <Serializable()> Public Class Post_TimeToFrequency
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input temporal waveform (.waveform)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Frequency limit for detrending (.parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".waveform" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Pulse"
                'PullDownList(1) = "Repetative signal"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Even number frequency components"
                PullDownList(1) = "Odd number frequency components"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Do not detrend"
                PullDownList(1) = "Detrend method 1"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor approximates the upper-half of the actual continous frequency-domain spectrum of a temporal pulse with finite energy."
                myDescription(1) = "The default time list is determined from the input waveform. The frequency grid is determined by the post processors output grid in the pull-down menu."
                myDescription(2) = "If the units of temporal signal are u, the units of the frequency spectrum will be u-ns or u/GHz."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Find frequency spectrum from Fourier transform"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Dimension all fo the matrices we will need.
            Dim Frequencies As New RealMatrix(MechanismList1.TimeList.NRows), FrequencyValues As New ComplexMatrix(MechanismList1.TimeList.NRows), OutputFrequencies As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".complex")
            Frequencies.Fill(MechanismList1.TimeList)
            Dim Times As New RealMatrix(MechanismList1.FrequencyList.NRows), TimeValues As New RealMatrix(MechanismList1.FrequencyList.NRows), TimeVals As New RealMatrix(MechanismList1.FrequencyList.NRows)
            Times.Fill(MechanismList1.FrequencyList)
            TimeVals = MultipleModelInput(0).getSParams(MechanismList1)
            TimeValues = TimeVals.Vector(2)

            'Call the appropriate routine
            'If myPullDownSelection1 = 0 Then    'Pulse energy signal
            Call Complex_Number_Class.TimeToFixedFrequency(Times, TimeValues, Frequencies, FrequencyValues, myPullDownSelection2 = 0)
            ' Else                                'Repetative power signal
            ' End If

            'Detrend
            Select Case myPullDownSelection3
                Case 1      'First detrending method

                    Dim DetrendingFrequencyLimit As Double = MechValues(0).MechanismValue(MechanismList1)

                Case Else

            End Select

            'Stuff the results back into an output matrix of type .complex
            OutputFrequencies.Vector(1) = Frequencies : OutputFrequencies.Vector(2) = FrequencyValues.VectorRealPart(1) : OutputFrequencies.Vector(3) = FrequencyValues.VectorImagPart(1)

            'That's all folks!
            Return ToArray(OutputFrequencies)

        End Function


    End Class


    ''' <summary>
    ''' Post processor uses FFT to translate frequency results to time
    ''' </summary>
    ''' <remarks>Inputs in the frequency domain, ooutputs in the time domain. Calls FrequencyToTime.</remarks>
    <Serializable()> Public Class Post_FrequencyToTime_FFT
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input single-sided spectrum (.complex)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "File with default pulse times (.waveform)"
                myNameList(1) = "Pulse start time (.parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(12) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter" : FileExtensions(4) = ".waveform"
                FileExtensions(5) = ".s1p" : FileExtensions(6) = ".s2p" : FileExtensions(7) = ".s3p" : FileExtensions(8) = ".s4p"
                FileExtensions(9) = ".w1p" : FileExtensions(10) = ".w2p" : FileExtensions(11) = ".w3p" : FileExtensions(12) = ".w4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Finite-energy pulse"
                PullDownList(1) = "Repetative power signal"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Do not reset pulse start time"
                PullDownList(1) = "Move pulse by ""Pulse start time"" above"
                PullDownList(2) = "Reset pulse centroid to ""Pulse start time"" above"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String 'How output frequency list is developed.
                PullDownList(0) = "Build output time list from time step and max time determined from freq. step"
                PullDownList(1) = "Only output times already in output time list"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(11) As String
                myDescription(0) = "This post processor uses the FFT to calculate a temporal waveform from the upper-half of its frequency-domain spectrum."
                myDescription(2) = "The default frequency list is determined from the input specturm. You can over-ride this with the pull-down menu."
                myDescription(3) = "If you select Finite-energy pulse and the units of frequency spectrum are u-ns or u/GHz, then the units of the temporal output will be u."
                myDescription(4) = "Spectrums can be zero padded. The spacing deltaT of the temporal grid and the padded length of the frequency record will be determined from the temporal output grid in the pull-down menu."
                myDescription(5) = "If you select repetative signal and the units of frequency spectrum are u, then the units of temporal signal will be u."
                myDescription(7) = "The spacing of the input temporal grid is used to resolve the ambiguity in the maximum frequency of the single-sided input frequency grid. By default this temporal spacing is determined from the file dropped onto the first slot in the input parameter list. However, you can over-ride the grid used to determine the temporal spacing with the pull-down menus."
                myDescription(8) = "The processor issues an error if the spacing of the frequency list does not match the desired length of the time record. The processor can also pad the frequency list to obtain smaller time spacings."
                myDescription(9) = "Detrending is disabled for repetative signals."
                myDescription(11) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".waveform"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Fast Fourier Transform Frequency to Time"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Dimension all of the matrices we will need.
            Dim TimeValues As New RealMatrix(MechanismList1.TimeList.NRows)
            Dim OutputTimes As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".waveform")
            Dim FrequencyValuesInput As New RealMatrix(MechanismList1.FrequencyList.NRows, 3)
            FrequencyValuesInput = MultipleModelInput(0).getSParams(MechanismList1)

            'Find time and frequency spacings.
            Dim deltaF As Double = MechanismList1.FrequencyList(2) - MechanismList1.FrequencyList(1), deltaT As Double = MechanismList1.TimeList(2) - MechanismList1.TimeList(1)
            'Check to see that the frequency list extends to zero
            If Math.Abs(CInt(MechanismList1.FrequencyList(1) / deltaF) - MechanismList1.FrequencyList(1) / deltaF) > 0.001 Then
                MechanismList1.FatalError = True
                MechanismList1.ErrorReport = "Frequencies do not extend down to zero."
                Return ToArray(OutputTimes)
            End If

            'Figure out what FMax is from deltaT and zero-pad frequencies if needed.
            Dim FMax As Double = 1.0 / deltaT, NFMax As Integer = CInt(FMax / deltaF), NFMax_div2 As Integer = Int(1 + (NFMax / 2))
            'Check to see that FMax falls on frequency grid.
            If Math.Abs(CInt(FMax / deltaF) - NFMax) > 0.001 Then
                MechanismList1.FatalError = True
                MechanismList1.ErrorReport = "Maximum frequency determined from deltaT does not fall on frequency grid."
                Return ToArray(OutputTimes)
            End If

            'Create the time output list for the user if that is what was asked for.
            Dim FirstTime As Double = MechanismList1.TimeList(1)
            If myPullDownSelection3 = 0 Then OutputTimes.ReDimension(NFMax, 3)

            'Check that the Times are consistent with the frequencies
            If Npad(deltaT, deltaF) <> NFMax Then
                MechanismList1.FatalError = True
                MechanismList1.ErrorReport = "Inconsistency in the number of time points generated from the frequency grid. The frequency grid is based on the input grid or deltaT, depending on settings."
                Return ToArray(OutputTimes)
            End If

            'Move pulse position relative to current location if asked by the user
            Dim MovePulsePosition As Double = 0.0
            If myPullDownSelection2 = 1 Then MovePulsePosition = MechValues(1).MechanismValue(MechanismList1)

            'Create the frequency array we will pass to the FFT by filling in values from FrequencyValuesInput
            Dim FrequencyValues(NFMax_div2 - 1) As alglib.complex 'Zero-based array of positive frequencies we pass to FFT
            Call TranslateTime(FrequencyValues, FrequencyValuesInput, MechanismList1, deltaF, FirstTime - MovePulsePosition)
            'Convert from continuous units to discrete if this is a pulse
            If myPullDownSelection1 = 0 Then    'Normalize as a pulse
                Dim ConversionFactor As Double = CDbl(NFMax) * deltaF
                For k As Integer = 0 To NFMax_div2 - 1
                    FrequencyValues(k) = FrequencyValues(k) * ConversionFactor
                Next k
            End If

            'Call the XAlglib FFT routine. NFMax is the actual problem size
            Dim T(NFMax - 1) As Double     'Temporal values returned from Alglib
            XAlglib.fftr1dinv(FrequencyValues, NFMax, T)

            'Move pulse position to a fixed location if asked by the user
            Select Case myPullDownSelection2
                Case 2      'Adjust pulse postition with centroid method
                    'Find desired pulse position
                    Dim DesiredPulsePosition As Double = MechValues(1).MechanismValue(MechanismList1)
                    'Find pulse position
                    Dim CentroidTime As Double = FirstTime + Centroid(T) * deltaT
                    MovePulsePosition = DesiredPulsePosition - CentroidTime
                    'Readjust the phases of FrequencyValues appropriately
                    Call TranslateTime(FrequencyValues, FrequencyValuesInput, MechanismList1, deltaF, FirstTime - MovePulsePosition)
                    'Take the inverse FFT a second time
                    XAlglib.fftr1dinv(FrequencyValues, NFMax, T)
            End Select

            'Stuff the data into output times
            For k As Integer = 1 To OutputTimes.NRows

                OutputTimes(k, 1) = FirstTime + CDbl(k - 1) * deltaT    'Stuff a time into the output

                'Make sure that repetative signals repeat
                Dim k1 = k
                If myPullDownSelection1 = 1 Then  'This is a repetative signal. Get k1 to be in range
                    While k1 > NFMax
                        k1 = k1 - NFMax
                    End While
                End If

                'Stuff a value into the output list if we have one available
                If k1 <= NFMax Then 'This condition puts zeros in pulse waveforms outside of the times where we have data
                    OutputTimes(k, 2) = T(k1 - 1)
                End If

            Next k

            'That's all folks!
            Return ToArray(OutputTimes)

        End Function

        ''' <summary>
        ''' Find the centroid of the pulse
        ''' </summary>
        ''' <param name="T">The voltage values</param>
        ''' <returns>The posistion of the centroid as a double corresponding to the zero-based index of the centroid.</returns>
        ''' <remarks>If the centroid is half way between the first and second time point, the function returns 0.5.</remarks>
        Function Centroid(ByRef T() As Double) As Double

            'We are going to find the ratio of int v*k / int v to find the centroid of voltages v
            Dim Nt As Integer = T.Count, Numerator As Double = 0.0, Denominator As Double = 0.0

            For k As Integer = 0 To Nt - 1

                Numerator = Numerator + CDbl(k) * T(k)
                Denominator = Denominator + T(k)

            Next

            Centroid = Numerator / Denominator

        End Function

        ''' <summary>
        ''' Perform a time translation by adjusting the linear phase of the frequency-domain components.
        ''' </summary>
        ''' <param name="FrequencyValues">The output freqney values.</param>
        ''' <param name="FrequencyValuesInput">The phase-adjusted output frequency values</param>
        ''' <param name="MechanismList1">The mechanism list has the frequencies.</param>
        ''' <param name="deltaF">The frequency step</param>
        ''' <param name="TimeTranslation">The time we will translate</param>
        ''' <remarks></remarks>
        Sub TranslateTime(ByRef FrequencyValues() As alglib.complex, ByRef FrequencyValuesInput As Complex_Number_Class.RealMatrix, ByRef MechanismList1 As MechanismList, ByVal deltaF As Double, ByVal TimeTranslation As Double)

            Dim NFMax_div2 As Integer = FrequencyValues.Count
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows
                Dim kIndex As Integer = CInt(MechanismList1.FrequencyList(k) / deltaF)
                If kIndex <= NFMax_div2 - 1 Then

                    'Stuff in the input values
                    FrequencyValues(kIndex).x = FrequencyValuesInput(k, 2)
                    FrequencyValues(kIndex).y = FrequencyValuesInput(k, 3)

                    'Also adjust the phase of the spectrum to correspond to the time zero of our output frequency list
                    If TimeTranslation <> 0.0 Then
                        Dim E As New Complex_Number_Class.Complex
                        E = Complex_Number_Class.Exp(toComplex(0.0, 2.0 * Math.PI * (k - 1) * deltaF * TimeTranslation))
                        Dim E1 As New alglib.complex(E.Re, E.Im)
                        FrequencyValues(kIndex) = E1 * FrequencyValues(kIndex)
                    End If

                End If
            Next k

        End Sub

    End Class

    ''' <summary>
    ''' Post processor uses FFT to map time to frequency
    ''' </summary>
    ''' <remarks>Inputs in the frequency domain, ooutputs in the time domain. Calls FrequencyToTime.</remarks>
    <Serializable()> Public Class Post_TimeToFrequency_FFT
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input temporal waveform (.waveform)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Frequency limit for detrending (.parameter)"
                myNameList(1) = "Final value of Nicolson ramp (.parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".waveform" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(6) As String
                PullDownList(0) = "Finite-energy pulse no zero pad"
                PullDownList(1) = "Finite-energy pulse with zero pad"
                PullDownList(2) = "Repetative power signal"
                PullDownList(3) = "Nicolson FFT of step pulse no zero pad"
                PullDownList(4) = "Nicolson FFT of step pulse with zero pad"
                PullDownList(5) = "FFT derivative of step pulse no zero pad"
                PullDownList(6) = "FFT derivative of step pulse with zero pad"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Do not detrend"
                PullDownList(1) = "Detrend phase with least squares to detrend limit"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String 'How output frequency list is developed.
                PullDownList(0) = "Allow post-processor to determine output frequency list"
                PullDownList(1) = "Only output frequencies already in output frequency list"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(8) As String
                myDescription(0) = "This post processor uses the FFT to calculate the upper-half of the frequency-domain spectrum of a temporal waveform."
                myDescription(1) = "The default time list is determined from the temporal input waveform. You can over-ride this with the pull-down menu."
                myDescription(2) = "If you select Finite-energy pulse and the units of temporal signal are u (the units of Times are ns by default), the units of the units of the frequency spectrum will be u-ns or u/GHz."
                myDescription(3) = "Pulses can be zero padded. The spacing deltaF of the frequency grid and the padded length of the time record will be determined from the frequency output grid in the pull-down menu."
                myDescription(4) = "If you select repetative signal and the units of temporal signal are u (the units of Times are ns by default), the units of the frequency spectrum will be u."
                myDescription(5) = "The frequency grid of repetative waveforms will be completely determined by the time grid. By default this time grid is set to the time grid of the input waveform. However, you can over-ride the time grid with the pull-down menus. "
                myDescription(6) = "Detrending and control of output frequencies are disabled for repetative signals. Using the Nicolson FFT removes a ramp from step functions and is useful for time-domain network analysis. The same is true of taking the FFT of the differentiated pulse."
                myDescription(8) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Fast Fourier Transform Time to Frequency"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Things are a bit confusing as Frequencies from the MUF are really input grid times and times from the MUF are really output grid frequencies.

            'Dimension all of the matrices we will need.
            Dim Frequencies As New RealMatrix(MechanismList1.TimeList.NRows), FrequencyValues As New ComplexMatrix(MechanismList1.TimeList.NRows)
            Dim OutputFrequencies As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".complex")
            Frequencies.Fill(MechanismList1.TimeList)
            Dim TimeValuesInput As New RealMatrix(MechanismList1.FrequencyList.NRows)
            TimeValuesInput = MultipleModelInput(0).getSParams(MechanismList1)

            'Find time, frequency spacings, and number of points for zero padding.
            Dim deltaT As Double = MechanismList1.FrequencyList(2) - MechanismList1.FrequencyList(1), deltaF As Double = Frequencies(2) - Frequencies(1)
            Dim Nzpad As Integer = Npad(deltaT, deltaF)

            'Check that the output frequencies include zero when extended.
            If Math.Abs(CInt(Frequencies(1) / deltaF) - (Frequencies(1) / deltaF)) > 0.001 Then    'Error
                MechanismList1.FatalError = True
                MechanismList1.ErrorReport = "Frequency and time spacings not compatible."
                Return ToArray(OutputFrequencies)
            End If

            'Create arrays we will pass to the FFT
            Dim TimeValues() As Double 'Zero-based array of doubles we pass to FFT

            'myPullDownSelection1
            '(0) = "Finite-energy pulse no zero pad"
            '(1) = "Finite-energy pulse with zero pad"
            '(2) = "Repetative power signal"
            '(3) = "Nicolson FFT of step pulse no zero pad"
            '(4) = "Nicolson FFT of step pulse with zero pad"
            '(5) = "FFT derivative of step pulse no zero pad"
            '(6) = "FFT derivative of step pulse with zero pad"

            Select Case myPullDownSelection1

                Case 3, 4       '(3,4) = "Nicolson FFT of step pulse 
                    'Subtract a ramp that sets the first point and last point equal to 0.
                    Dim VEnd As Double = MechValues(1).MechanismValue(MechanismList1)
                    For k As Integer = 1 To TimeValuesInput.NRows
                        TimeValuesInput(k, 2) = TimeValuesInput(k, 2) - VEnd * CDbl(k - 1) / CDbl(TimeValuesInput.NRows - 1)
                    Next k

                Case 5, 6       '(5,6) = "FFT derivative of step pulse 
                    For k As Integer = 2 To TimeValuesInput.NRows
                        TimeValuesInput(k - 1, 2) = TimeValuesInput(k, 2) - TimeValuesInput(k - 1, 2)
                    Next k
                    TimeValuesInput(TimeValuesInput.NRows, 2) = 0.0

            End Select

            'Zero pad the input time file to get the selected deltaF
            Select Case myPullDownSelection1

                Case 1, 4, 6        'Zero pad      

                    If Nzpad >= 0 Then  'Zero pad past N

                        ReDim TimeValues(Nzpad - 1)
                        For k As Integer = 1 To Nzpad       'Fill TimeValues from TimeValuesInput if we have values to fill it with.
                            If k <= TimeValuesInput.NRows Then
                                TimeValues(k - 1) = TimeValuesInput(k, 2)
                            End If
                        Next k

                    Else   'Error

                        MechanismList1.FatalError = True
                        MechanismList1.ErrorReport = "N <> 1/(deltaT*deltaF) not allowed."
                        Return ToArray(OutputFrequencies)

                    End If

                Case Else     'No zero padding. Use the input array.

                    ReDim TimeValues(TimeValuesInput.NRows - 1)
                    For k As Integer = 1 To TimeValuesInput.NRows       'Fill TimeValue
                        TimeValues(k - 1) = TimeValuesInput(k, 2)
                    Next k

            End Select

            'This gives a compliation warning unless we set it to nothing.
            Dim F() As alglib.complex = Nothing       'Result from Alglib

            'Call the XAlglib FFT routine
            XAlglib.fftr1d(TimeValues, F)

            'Only keep the lower half of the frequencies. Frequencies(k) = CDbl(k - 1) * deltaF   'Actually, there are only N/2. Maybe best to see what is returned by FFT?? Also, if F(1)<>0, we can handle that too as long as the frequencies the user asked for are a subset of the natural output list.
            Dim NF As Integer = Int(1 + (F.Count / 2))

            'Update the deltaF to be sure it is correct, given that we don't know how the N was choosen in the end.
            deltaF = 1.0 / (F.Count * deltaT)

            'Normalize pulses by time step, leave repetative signals alone.
            If myPullDownSelection1 <> 2 Then
                'Convert from discrete values to continuous spectrum
                Dim ConversionFactor As Double = deltaT ' 1000000000.0  'The 10^9 is 10^9 Hz/GHz
                For k As Integer = 0 To NF - 1
                    F(k) = F(k) * ConversionFactor
                Next k
            End If

            ''Quick test of the FFT. These calculations show taht this FFT uses the following definitions:
            ''Forward FFT X=(1/n)sum xn exp()
            ''Backward FFT x=sum Xk exp()
            ''These definitions are not supported by the Fourier Transform Helper, and the !/N term actually look like the reverse of the default transform there.
            'Dim TimeValuesTest(100) As Double : TimeValuesTest(0) = 1 : TimeValuesTest(1) = 1 : TimeValuesTest(2) = 1 : TimeValuesTest(3) = 1
            'Dim FTest(100) As alglib.complex
            'XAlglib.fftr1d(TimeValuesTest, FTest)
            'Dim FTest1 As New alglib.complex(1.0)
            'Dim FTest2(100) As alglib.complex : FTest2(0) = FTest1 : FTest2(1) = FTest1 : FTest2(2) = FTest1 : FTest2(3) = FTest1
            'Dim TimeValuesTest1(100) As Double
            'XAlglib.fftr1dinv(FTest2, 100, TimeValuesTest1)

            'Detrend
            Select Case myPullDownSelection2
                Case 1      'Detrend phase with least squares

                    Dim DetrendingFrequencyLimit As Double = MechValues(0).MechanismValue(MechanismList1)

                    'Get the phases in radians into a real matrix
                    Dim Phs As New RealMatrix(F.Count), PhsUnWrapped As New RealMatrix(F.Count), PhsFrequencies As New RealMatrix(F.Count)
                    For k As Integer = 0 To F.Count - 1
                        Phs(k + 1) = Math.Atan2(F(k).y, F(k).x)    'Phase in radians
                        PhsFrequencies(k + 1) = k * deltaF          'Frequencies in GHz
                    Next k

                    'Unwrap the phase
                    PhsUnWrapped.Fill(UnWrap(Phs))

                    'Detrend the phase by removing the linear component.
                    Phs.Fill(PhaseLinearize(PhsUnWrapped, PhsFrequencies, DetrendingFrequencyLimit))

                    For k As Integer = 0 To F.Count - 1
                        Dim Mag As Double = Math.Sqrt(F(k).x * F(k).x + F(k).y * F(k).y)
                        F(k).x = Mag * Math.Cos(Phs(k + 1)) : F(k).y = Mag * Math.Sin(Phs(k + 1))
                    Next k


                Case Else   'Add back in time offset if needed using first time point

                    If MechanismList1.FrequencyList(1) <> 0.0 Then  ' MechanismList1.FrequencyList(1) is the first time point

                        Dim E As New Complex, Etotalphaseshift As New Complex(1.0, 0.0) : E = Complex_Number_Class.Exp(toComplex(0.0, -2.0 * Math.PI * deltaF * MechanismList1.FrequencyList(1)))
                        For k As Integer = 1 To NF - 1
                            Etotalphaseshift = Etotalphaseshift * E
                            Dim E_Alglib As New alglib.complex(Etotalphaseshift.Re, Etotalphaseshift.Im)
                            F(k) = E_Alglib * F(k)     'Put in phase shift
                        Next k

                    End If

            End Select

            'Select output frequencies. Only report the NF positive frequencies.
            If myPullDownSelection3 = 1 And myPullDownSelection1 <> 2 Then   'Select output frequencies if we have a pulse and user wanted to do that in the pull-down list.

                Dim kIndex As Integer
                OutputFrequencies.Vector(1) = Frequencies
                For k As Integer = 1 To Frequencies.NRows
                    kIndex = CInt(Frequencies(k) / deltaF)
                    If Math.Abs(kIndex - (Frequencies(k) / deltaF)) > 0.001 Then    'Error
                        MechanismList1.FatalError = True
                        MechanismList1.ErrorReport = "Frequency and time spacings not compatible."
                        Return ToArray(OutputFrequencies)
                    End If
                    If kIndex < NF Then OutputFrequencies(k, 2) = F(kIndex).x : OutputFrequencies(k, 3) = F(kIndex).y
                Next k

            Else                        'Use the standard FFT output frequency list

                OutputFrequencies.ReDimension(NF, 3)
                For k As Integer = 1 To NF
                    OutputFrequencies(k, 1) = CDbl(k - 1) * deltaF
                    OutputFrequencies(k, 2) = F(k - 1).x : OutputFrequencies(k, 3) = F(k - 1).y
                Next k

            End If

            'That's all folks!
            Return ToArray(OutputFrequencies)

        End Function


    End Class

    ''' <summary>
    ''' Returns the number of points in a waveform you will FFT given deltaT and deltaF
    ''' </summary>
    ''' <param name="deltaT">The time step.</param>
    ''' <param name="deltaF">The frequency step.</param>
    ''' <returns>The number of points in the FFTs time or double-sided frequency list.</returns>
    ''' <remarks>The number of points is set to 0 if the time step and frequency step are not consistent.</remarks>
    Function Npad(ByVal deltaT As Double, ByVal deltaF As Double) As Integer
        Dim Ndouble As Double = 1.0 / (deltaT * deltaF)
        Npad = CInt(Ndouble)
        Dim Difference As Double = Math.Abs(Ndouble - Npad)
        If Difference > 0.001 Then
            Npad = 0
        End If
    End Function


    ''' <summary>
    ''' Post processor for finding normalized powers.
    ''' </summary>
    ''' <remarks>First step in finding path loss of N antenna measurements</remarks>
    <Serializable()> Public Class Post_NormalizedPowers
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "VNA-corrected and combined input channel measurements (.s2p, .csv, .meas)"
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Reference channel measurement (.s2p, .csv, .meas)"    'Has scattering parameters of the reference channel measurement
                'myNameList(1) = "VNA-corrected and combined input channel measurements (.meas)"    'Has scattering parameters of the combined input channel measurements
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".csv" : FileExtensions(3) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Complex channel response"
                PullDownList(1) = "Channel path loss (power)"
                PullDownList(2) = "Frequency-averaged path loss"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "No filter"
                PullDownList(1) = "Hamming filter"
                'PullDownList(2) = "Periodic Hamming filter"    'Disable the periodic version for now, as there may not be a need for that in this application.
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor normalizes each channel measurement by the reference measurement to determine the channel response."
                myDescription(1) = "  Complex channel response: Calculates the complex channel response H(f)/H_ref(f). In this case, you can choose a filter as well."
                myDescription(2) = "  Channel path loss (power): Calculates the channel path loss |H(f)|/|H_ref(f)|.  Looking at the dB value gives |H(f)|^2/|H_ref(f)|^2. No filters are applied. The Combine module is usually called first to find the mean of the individual path-loss measurements."
                myDescription(3) = "  Frequency-averaged path loss: Calculates the frequency-averaged path loss, the square root of the mean of |H(f)|^2 divided by |H_ref(f)|^2. This gives the mean path loss over the channel. No filters are applied."
                myDescription(4) = "By default the algorithm uses the frequencies in the channel measurements. These frequencies can be over-ridden with the input frequency pull-down menu."
                myDescription(6) = "Written by Dylan Williams and Kate Remley."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "NIST Path-Loss Calculation"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Get the path loss (power) from S21, normalize it by the reference measurement (power)
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the reference measurement.
            Dim myRefMeas As RealMatrix
            myRefMeas = MechValues(0).getSParams(MechanismList1)

            'Get the measured path loss
            Dim myPathLoss As RealMatrix
            myPathLoss = MultipleModelInput(0).getSParams(MechanismList1)
            'myPathLoss = MechValues(1).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If myRefMeas.NCols <> 9 And myRefMeas.NCols <> 3 Then
                MechanismList1.ErrorReport = "The reference measurement (first input) is not a single complex or a 2x2 scattering-parameter matrix"
                MechanismList1.FatalError = True
                Return ToArray(myPathLoss)
            End If
            If myPathLoss.NCols <> 9 And myPathLoss.NCols <> 3 Then
                MechanismList1.ErrorReport = "The path loss (multiple inputs) are not a single complex or a 2x2 scattering-parameter matrix"
                MechanismList1.FatalError = True
                Return ToArray(myPathLoss)
            End If

            'Form the powers
            Dim myRealMatrixResult As New RealMatrix(myRefMeas.NRows, 3, ".complex")    'This will be the output
            Dim RefPowerMean As Double = 0.0, PathPowerMean As Double = 0.0             'These will hold the means over frequency

            For i As Integer = 1 To myRefMeas.NRows 'Step over the frequencies

                'Calculate the transmission powers. We average powers S21 and S12 using  |S21^2 + S12^2|/2.
                Dim RefPower As Double = 0.0, RefSignal As New Complex(0.0, 0.0)
                If myRefMeas.NCols = 9 Then
                    RefPower = (myRefMeas(i, 4) * myRefMeas(i, 4) + myRefMeas(i, 5) * myRefMeas(i, 5) + myRefMeas(i, 6) * myRefMeas(i, 6) + myRefMeas(i, 7) * myRefMeas(i, 7)) / 2.0    'Power averaging
                    RefSignal = toComplex((myRefMeas(i, 4) + myRefMeas(i, 6)) / 2.0, (myRefMeas(i, 5) + myRefMeas(i, 7)) / 2.0) 'Signal averaging
                Else
                    RefPower = myRefMeas(i, 2) * myRefMeas(i, 2) + myRefMeas(i, 3) * myRefMeas(i, 3)    'No averaging needed, get power
                    RefSignal = toComplex(myRefMeas(i, 2), myRefMeas(i, 3))                             'Get signal
                End If
                Dim PathPower As Double = 0.0, PathSignal As New Complex(0.0, 0.0)
                If myPathLoss.NCols = 9 Then
                    PathPower = (myPathLoss(i, 4) * myPathLoss(i, 4) + myPathLoss(i, 5) * myPathLoss(i, 5) + myPathLoss(i, 6) * myPathLoss(i, 6) + myPathLoss(i, 7) * myPathLoss(i, 7)) / 2.0
                    PathSignal = toComplex((myPathLoss(i, 4) + myPathLoss(i, 6)) / 2.0, (myPathLoss(i, 5) + myPathLoss(i, 7)) / 2.0) 'Signal averaging
                Else
                    PathPower = myPathLoss(i, 2) * myPathLoss(i, 2) + myPathLoss(i, 3) * myPathLoss(i, 3)    'No averaging needed
                    PathSignal = toComplex(myPathLoss(i, 2), myPathLoss(i, 3)) 'Signal averaging
                End If

                RefPowerMean = RefPowerMean + RefPower : PathPowerMean = PathPowerMean + PathPower  'Keep track of the means of the powers

                'Output the ratio
                myRealMatrixResult(i, 1) = myRefMeas(i, 1)  'Set the frequency
                If RefPower <> 0.0 Then
                    Select Case myPullDownSelection1
                        Case 0  'Complex means
                            Dim Ratio As New Complex(1.0, 0.0)
                            If myPullDownSelection2 > 0 And myRefMeas.NRows > 1 Then    'Multiply by Hamming window
                                Dim Phase As Double = CDbl(i - 1) / CDbl(myRefMeas.NRows - 1) 'Goes between 0 and +1 (symmetric window (default))
                                If myPullDownSelection2 > 0 Then Phase = CDbl(i - 1) / CDbl(myRefMeas.NRows) 'Periodic window
                                Phase = Phase * 2.0 * Math.PI   'Goes between 0 and 2 PI. Cos goes from 1 to -1 to 1 again
                                Ratio = toComplex(0.54 - 0.46 * Math.Cos(Phase), 0.0) 'From Matlab definition.
                            End If
                            Ratio = Ratio * PathSignal / RefSignal
                            myRealMatrixResult(i, 2) = Ratio.Re 'Calculate the normalized complex signal. Return zero rather than divide by zero.
                            myRealMatrixResult(i, 3) = Ratio.Im 'Calculate the normalized complex signal. Return zero rather than divide by zero.
                        Case 1  'Powers
                            myRealMatrixResult(i, 2) = PathPower / RefPower 'Set the normalized power. Return zero rather than divide by zero.
                        Case 2  'Powers, average over all frequencies
                    End Select
                End If

            Next i

            'Stuff in the power means instead if the user asked for that.
            If myPullDownSelection1 = 2 And RefPowerMean <> 0.0 Then
                Dim PowerRatio As Double = PathPowerMean / RefPowerMean 'Determine the mean normalized power. Don't need to divide by the number of measurements as this is a ratio with the same frequency list in.
                For i As Integer = 1 To myRefMeas.NRows 'Step over the frequencies
                    myRealMatrixResult(i, 2) = PowerRatio 'Set the mean normalized power.
                Next i
            End If

            'If we were working with powers, now go back to amplitude, as this is what the framework expects to see.
            If myPullDownSelection1 > 0 Then
                For i As Integer = 1 To myRefMeas.NRows 'Step over the frequencies
                    If myRealMatrixResult(i, 2) > 0.0 Then
                        myRealMatrixResult(i, 2) = Math.Sqrt(myRealMatrixResult(i, 2))  'Turn back into an amplitude
                    Else
                        myRealMatrixResult(i, 2) = 0.0
                    End If
                Next i
            End If

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for mapping frequency results to Path Delay Profile
    ''' </summary>
    ''' <remarks>Inputs in the frequency domain, ooutputs in the time domain. Calls FrequencyToTime.</remarks>
    <Serializable()> Public Class Post_IFFT_TimeDelayProfile
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Complex spectrum of the input (.complex)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".complex" : FileExtensions(2) = ".s2p" : FileExtensions(3) = ".meas_archive"   'This is the list of aceptable file extensions for the control.
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Complex result"
                PullDownList(1) = "Waveform result"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor calculates a complex inverse Fourier transform. The output is a series of complex values. This is one step towards calculating the power delay profile."
                myDescription(1) = "The default frequency list is determined from the complex input frequency spectrum. The time grid is determined by the post processor from the input frequencies."
                myDescription(3) = "Written by Dylan Williams and Kate Remley."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim ResultExtension As String = ".complex"
                Select Case myPullDownSelection1
                    Case 0  'Complex result
                        ResultExtension = ".complex"
                    Case 1  'Waveform result
                        ResultExtension = ".waveform"
                End Select
                Return ResultExtension
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Inverse Fourier transform"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Dimension all fo the matrices we will need.
            Dim Frequencies As New RealMatrix(MechanismList1.FrequencyList.NRows), FrequencyValues As New RealMatrix(MechanismList1.FrequencyList.NRows), FrequencyVals As New RealMatrix(MechanismList1.FrequencyList.NRows)
            Frequencies.Fill(MechanismList1.FrequencyList)
            FrequencyVals = MechValues(0).getSParams(MechanismList1)

            'Build the time vector.
            Dim DeltaF As Double = Frequencies(2) - Frequencies(1)
            Dim T As Double = 1.0 / DeltaF
            Dim N As Integer = Frequencies.NRows
            Dim OutputTimes As New RealMatrix(N, 3)
            Select Case myPullDownSelection1
                Case 0  'Complex result
                    OutputTimes.DataType = ".complex"
                Case 1  'Waveform result
                    OutputTimes.DataType = ".waveform"
            End Select

            'Build the ALGLIB complex frequency vector.
            Dim z(N - 1) As alglib.complex
            For i As Integer = 1 To N
                If FrequencyVals.NCols = 9 Then 'Scattering parameters in
                    z(i - 1) = New alglib.complex((FrequencyVals(i, 4) + FrequencyVals(i, 6)) / 2.0, (FrequencyVals(i, 5) + FrequencyVals(i, 7)) / 2.0)
                Else    'Stanadard complex number in
                    z(i - 1) = New alglib.complex(FrequencyVals(i, 2), FrequencyVals(i, 3))
                End If
            Next i

            'Call the inverse complex FFT
            Call XAlglib.fftc1dinv(z)

            'Stuff the results back into an output matrix of type .complex
            For i As Integer = 1 To N
                OutputTimes(i, 1) = T * CDbl(i - 1) / CDbl(N)
                Select Case myPullDownSelection1
                    Case 0  'Complex result
                        OutputTimes(i, 2) = z(i - 1).x
                        OutputTimes(i, 3) = z(i - 1).y
                    Case 1  'Waveform result
                        OutputTimes(i, 2) = Math.Sqrt(z(i - 1).x * z(i - 1).x + z(i - 1).y * z(i - 1).y)
                End Select
            Next i

            'That's all folks!
            Return ToArray(OutputTimes)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for mapping time results back to frequency
    ''' </summary>
    ''' <remarks>Inputs in the frequency domain, ooutputs in the time domain. Calls FrequencyToTime.</remarks>
    <Serializable()> Public Class Post_FFT_TimeDelayProfile
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Complex spectrum of the temporal input (.complex)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(2) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".complex" : FileExtensions(2) = ".meas_archive"    'This is the list of aceptable file extensions for the control.
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Pulse"
                'PullDownList(1) = "Repetative signal"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor calculates a complex Fourier transform. The output is a series of complex values."
                myDescription(1) = "The default time list is determined from the complex input time spectrum. The output frequency grid is determined by the post processor from the input times."
                myDescription(3) = "Written by Dylan Williams and Kate Remley."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Fourier transform"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Dimension all fo the matrices we will need.
            Dim Frequencies As New RealMatrix(MechanismList1.FrequencyList.NRows), FrequencyValues As New RealMatrix(MechanismList1.FrequencyList.NRows), FrequencyVals As New RealMatrix(MechanismList1.FrequencyList.NRows)
            Frequencies.Fill(MechanismList1.FrequencyList)
            FrequencyVals = MechValues(0).getSParams(MechanismList1)

            'Build the frequency vector.
            Dim DeltaT As Double = Frequencies(2) - Frequencies(1)
            Dim F As Double = 1.0 / DeltaT
            Dim N As Integer = Frequencies.NRows
            Dim OutputTimes As New RealMatrix(N, 3, ".complex")

            'Build the ALGLIB complex frequency vector.
            Dim z(N - 1) As alglib.complex
            For i As Integer = 1 To N
                z(i - 1) = New alglib.complex(FrequencyVals(i, 2), FrequencyVals(i, 3))
            Next i

            'Call the inverse complex FFT
            Call XAlglib.fftc1d(z)

            'Stuff the results back into an output matrix of type .complex
            For i As Integer = 1 To N
                OutputTimes(i, 1) = F * CDbl(i - 1) / CDbl(N)
                OutputTimes(i, 2) = z(i - 1).x
                OutputTimes(i, 3) = z(i - 1).y
            Next i

            'That's all folks!
            Return ToArray(OutputTimes)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for calibrating a reciever with a known source.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_TranslateOnePortNISTsparams
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(6) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "GAMMA measurement in NIST format (.complex)"
                myNameList(1) = "Normalized distribution for |Gam|B"
                myNameList(2) = "Normalized distribution for long-term |Gam|A"
                myNameList(3) = "Normalized distribution for short-term |Gam|A"
                myNameList(4) = "Normalized distribution for arg(Gam)B"
                myNameList(5) = "Normalized distribution for long-term arg(Gam)A"
                myNameList(6) = "Normalized distribution for short-term arg(Gam)A"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".meas_archive" : FileExtensions(4) = ".sumofparameters_archive"    'This is the list of aceptable file extensions for the control.
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing  'No first pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor creates an uncertainty-framework measurement from conventional NIST VNA measurements. The input format is f[GHZ]  |Gam|  u|Gam|A  u|Gam|A  u|Gam|A   U|Gam|  arg(Gam) u(arg(G))A u(arg(G))B u(arg(G))B U(arg(G))"
                myDescription(1) = "The conventional NIST uncertainties do not contain correlation information. Complete correlation is assumed for each uncertainty type."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s1p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Translate conventional NIST one-port data to the Uncertainty Framework"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            Dim Gamma As RealMatrix
            Gamma = MechValues(0).getSParams(MechanismList1)
            If Gamma.NCols <> 11 Then MechanismList1.ErrorReport = "The number of columns in the input NIST measurement must be 11." : MechanismList1.FatalError = True : Return ToArray(Gamma)
            Dim GammaNew As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".s1p")
            GammaNew.Vector(1) = Gamma.Vector(1)
            Dim uMagB As Double = MechValues(1).MechanismValue(MechanismList1)
            Dim uMagA1 As Double = MechValues(2).MechanismValue(MechanismList1)
            Dim uMagA2 As Double = MechValues(3).MechanismValue(MechanismList1)
            Dim uArgB As Double = MechValues(4).MechanismValue(MechanismList1)
            Dim uArgA1 As Double = MechValues(5).MechanismValue(MechanismList1)
            Dim uArgA2 As Double = MechValues(6).MechanismValue(MechanismList1)

            'Preturb the magnitude and phase
            Dim GammaMag As New RealMatrix(Gamma.NRows)
            GammaMag = Gamma.Vector(2) + uMagB * Gamma.Vector(3) + uMagA1 * Gamma.Vector(4) + uMagA2 * Gamma.Vector(5)
            Dim GammaArg As New RealMatrix(Gamma.NRows)
            GammaArg = (Math.PI / 180.0) * (Gamma.Vector(7) + uMagB * Gamma.Vector(8) + uMagA1 * Gamma.Vector(9) + uMagA2 * Gamma.Vector(10))

            'Calculate the value of gamma
            For k As Integer = 1 To Gamma.NRows
                GammaNew(k, 2) = GammaMag(k) * Math.Cos(GammaArg(k))
                GammaNew(k, 3) = GammaMag(k) * Math.Sin(GammaArg(k))
            Next

            'That's all folks!
            Return ToArray(GammaNew)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for calibrating a reciever with a known source.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_TranslateTwoPortNISTsparams
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(27) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "S11 measurement in NIST format (.complex)"
                myNameList(1) = "Normalized distribution for |Gam|B"
                myNameList(2) = "Normalized distribution for long-term |Gam|A"
                myNameList(3) = "Normalized distribution for short-term |Gam|A"
                myNameList(4) = "Normalized distribution for arg(Gam)B"
                myNameList(5) = "Normalized distribution for long-term arg(Gam)A"
                myNameList(6) = "Normalized distribution for short-term arg(Gam)A"
                myNameList(7) = "S21 measurement in NIST format (.complex)"
                myNameList(8) = "Normalized distribution for |Gam|B"
                myNameList(9) = "Normalized distribution for long-term |Gam|A"
                myNameList(10) = "Normalized distribution for short-term |Gam|A"
                myNameList(11) = "Normalized distribution for arg(Gam)B"
                myNameList(12) = "Normalized distribution for long-term arg(Gam)A"
                myNameList(13) = "Normalized distribution for short-term arg(Gam)A"
                myNameList(14) = "S12 measurement in NIST format (.complex)"
                myNameList(15) = "Normalized distribution for |Gam|B"
                myNameList(16) = "Normalized distribution for long-term |Gam|A"
                myNameList(17) = "Normalized distribution for short-term |Gam|A"
                myNameList(18) = "Normalized distribution for arg(Gam)B"
                myNameList(19) = "Normalized distribution for long-term arg(Gam)A"
                myNameList(20) = "Normalized distribution for short-term arg(Gam)A"
                myNameList(21) = "S22 measurement in NIST format (.complex)"
                myNameList(22) = "Normalized distribution for |Gam|B"
                myNameList(23) = "Normalized distribution for long-term |Gam|A"
                myNameList(24) = "Normalized distribution for short-term arg(Gam)A"
                myNameList(25) = "Normalized distribution for arg(Gam)B"
                myNameList(26) = "Normalized distribution for long-term arg(Gam)A"
                myNameList(27) = "Normalized distribution for short-term arg(Gam)A"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".meas_archive" : FileExtensions(4) = ".sumofparameters_archive"    'This is the list of aceptable file extensions for the control.
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Linear transmission magnitude"
                PullDownList(1) = "Decibel transmission magnitude"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor creates an uncertainty-framework measurement from conventional NIST VNA measurements. The input format is f[GHZ]  |Gam|  u|Gam|A  LT-u|Gam|A ST-u|Gam|A   U|Gam|  arg(Gam) u(arg(G))A LT-u(arg(G))B ST-u(arg(G))B U(arg(G))"
                myDescription(1) = "The conventional NIST uncertainties do not contain correlation information. Complete correlation is assumed for each uncertainty type."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Translate conventional NIST two-port data to the Uncertainty Framework"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            Dim Gamma As RealMatrix
            Gamma = MechValues(0).getSParams(MechanismList1)
            If Gamma.NCols <> 11 Then MechanismList1.ErrorReport = "The number of columns in the input NIST measurement must be 11." : MechanismList1.FatalError = True : Return ToArray(Gamma)
            Dim SNew As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            SNew.Vector(1) = Gamma.Vector(1)
            Dim uMagB As Double = MechValues(1).MechanismValue(MechanismList1)
            Dim uMagA1 As Double = MechValues(2).MechanismValue(MechanismList1)
            Dim uMagA2 As Double = MechValues(3).MechanismValue(MechanismList1)
            Dim uArgB As Double = MechValues(4).MechanismValue(MechanismList1)
            Dim uArgA1 As Double = MechValues(5).MechanismValue(MechanismList1)
            Dim uArgA2 As Double = MechValues(6).MechanismValue(MechanismList1)

            'Preturb the magnitude and phase
            Dim GammaMag As New RealMatrix(Gamma.NRows)
            GammaMag = Gamma.Vector(2) + uMagB * Gamma.Vector(3) + uMagA1 * Gamma.Vector(4) + uMagA2 * Gamma.Vector(5)
            Dim GammaArg As New RealMatrix(Gamma.NRows)
            GammaArg = (Math.PI / 180.0) * (Gamma.Vector(7) + uMagB * Gamma.Vector(8) + uMagA1 * Gamma.Vector(9) + uMagA2 * Gamma.Vector(10))

            'Calculate the value of gamma for S11
            For k As Integer = 1 To Gamma.NRows
                SNew(k, 2) = GammaMag(k) * Math.Cos(GammaArg(k))
                SNew(k, 3) = GammaMag(k) * Math.Sin(GammaArg(k))
            Next

            'Now S21
            Gamma = MechValues(7).getSParams(MechanismList1)
            If Gamma.NCols <> 11 Then MechanismList1.ErrorReport = "The number of columns in the input NIST measurement must be 11." : MechanismList1.FatalError = True : Return ToArray(Gamma)
            uMagB = MechValues(8).MechanismValue(MechanismList1)
            uMagA1 = MechValues(9).MechanismValue(MechanismList1)
            uMagA2 = MechValues(10).MechanismValue(MechanismList1)
            uArgB = MechValues(11).MechanismValue(MechanismList1)
            uArgA1 = MechValues(12).MechanismValue(MechanismList1)
            uArgA2 = MechValues(13).MechanismValue(MechanismList1)

            'Preturb the magnitude and phase
            GammaMag = Gamma.Vector(2) + uMagB * Gamma.Vector(3) + uMagA1 * Gamma.Vector(4) + uMagA2 * Gamma.Vector(5)
            GammaArg = (Math.PI / 180.0) * (Gamma.Vector(7) + uMagB * Gamma.Vector(8) + uMagA1 * Gamma.Vector(9) + uMagA2 * Gamma.Vector(10))

            'If the transmission is negative of dB
            If myPullDownSelection1 = 1 Then
                For k As Integer = 1 To Gamma.NRows
                    GammaMag(k) = Math.Pow(10.0, -GammaMag(k) / 20.0)
                Next k
            End If

            'Calculate the value of gamma for S21
            For k As Integer = 1 To Gamma.NRows
                SNew(k, 4) = GammaMag(k) * Math.Cos(GammaArg(k))
                SNew(k, 5) = GammaMag(k) * Math.Sin(GammaArg(k))
            Next

            'Now S12
            Gamma = MechValues(14).getSParams(MechanismList1)
            If Gamma.NCols <> 11 Then MechanismList1.ErrorReport = "The number of columns in the input NIST measurement must be 11." : MechanismList1.FatalError = True : Return ToArray(Gamma)
            uMagB = MechValues(15).MechanismValue(MechanismList1)
            uMagA1 = MechValues(16).MechanismValue(MechanismList1)
            uMagA2 = MechValues(17).MechanismValue(MechanismList1)
            uArgB = MechValues(18).MechanismValue(MechanismList1)
            uArgA1 = MechValues(19).MechanismValue(MechanismList1)
            uArgA2 = MechValues(20).MechanismValue(MechanismList1)

            'Preturb the magnitude and phase
            GammaMag = Gamma.Vector(2) + uMagB * Gamma.Vector(3) + uMagA1 * Gamma.Vector(4) + uMagA2 * Gamma.Vector(5)
            GammaArg = (Math.PI / 180.0) * (Gamma.Vector(7) + uMagB * Gamma.Vector(8) + uMagA1 * Gamma.Vector(9) + uMagA2 * Gamma.Vector(10))

            'If the transmission is negative of dB
            If myPullDownSelection1 = 1 Then
                For k As Integer = 1 To Gamma.NRows
                    GammaMag(k) = Math.Pow(10.0, -GammaMag(k) / 20.0)
                Next k
            End If

            'Calculate the value of gamma for S12
            For k As Integer = 1 To Gamma.NRows
                SNew(k, 6) = GammaMag(k) * Math.Cos(GammaArg(k))
                SNew(k, 7) = GammaMag(k) * Math.Sin(GammaArg(k))
            Next


            'Now S22
            Gamma = MechValues(21).getSParams(MechanismList1)
            If Gamma.NCols <> 11 Then MechanismList1.ErrorReport = "The number of columns in the input NIST measurement must be 11." : MechanismList1.FatalError = True : Return ToArray(Gamma)
            uMagB = MechValues(22).MechanismValue(MechanismList1)
            uMagA1 = MechValues(23).MechanismValue(MechanismList1)
            uMagA2 = MechValues(24).MechanismValue(MechanismList1)
            uArgB = MechValues(25).MechanismValue(MechanismList1)
            uArgA1 = MechValues(26).MechanismValue(MechanismList1)
            uArgA2 = MechValues(27).MechanismValue(MechanismList1)

            'Preturb the magnitude and phase
            GammaMag = Gamma.Vector(2) + uMagB * Gamma.Vector(3) + uMagA1 * Gamma.Vector(4) + uMagA2 * Gamma.Vector(5)
            GammaArg = (Math.PI / 180.0) * (Gamma.Vector(7) + uMagB * Gamma.Vector(8) + uMagA1 * Gamma.Vector(9) + uMagA2 * Gamma.Vector(10))

            'Calculate the value of gamma for S12
            For k As Integer = 1 To Gamma.NRows
                SNew(k, 8) = GammaMag(k) * Math.Cos(GammaArg(k))
                SNew(k, 9) = GammaMag(k) * Math.Sin(GammaArg(k))
            Next

            'That's all folks!
            Return ToArray(SNew)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for calibrating a reciever with a known source.
    ''' </summary>
    ''' <remarks>Inputs and outputs are all in the frequency domain.</remarks>
    <Serializable()> Public Class Post_TranslateNISTpower
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Power measurement in NIST format (.complex)"
                myNameList(1) = "Normalized distribution"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".meas_archive" : FileExtensions(4) = ".sumofparameters_archive"    'This is the list of aceptable file extensions for the control.
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Incident power put in a"
                PullDownList(1) = "Eminating power put in b"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor creates an uncertainty-framework measurement from conventional NIST wave-parameter measurements (.w1p). The input format is f[GHZ] linear power  u|power| "
                myDescription(1) = "The conventional NIST uncertainties do not contain correlation information. Complete correlation is assumed for the uncertainty."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".w1p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Translate conventional NIST power data to the Uncertainty Framework"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Read in the source inputs, check them to see if they are of the correct size, and fill the source S-parameter matrix
            Dim Gamma As RealMatrix
            Gamma = MechValues(0).getSParams(MechanismList1)

            If 1 = 1 Then MechanismList1.ErrorReport = "Obsolete function! No action taken." : MechanismList1.FatalError = True : Return ToArray(Gamma)

            If Gamma.NCols <> 3 Then MechanismList1.ErrorReport = "The number of columns in the input NIST measurement must be 3." : MechanismList1.FatalError = True : Return ToArray(Gamma)
            Dim GammaNew As New RealMatrix(MechanismList1.FrequencyList.NRows, 5, ".w1p")
            GammaNew.Vector(1) = Gamma.Vector(1)
            Dim uMag As Double = MechValues(1).MechanismValue(MechanismList1)

            'Preturb the magnitude and phase
            Dim GammaMag As New RealMatrix(Gamma.NRows)
            GammaMag = Gamma.Vector(2) + uMag * Gamma.Vector(3)

            'Calculate the value of the wave parameter. P = 1/2 (a^2-b^2)
            For k As Integer = 1 To Gamma.NRows
                If myPullDownSelection1 = 0 Then
                    GammaNew(k, 2) = Math.Sqrt(2.0 * GammaMag(k))   'put power in a
                Else
                    GammaNew(k, 4) = Math.Sqrt(2.0 * GammaMag(k))   'put in b
                End If
            Next

            'That's all folks!
            Return ToArray(GammaNew)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for fitting measured data
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_FindS21FromPowers
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(4) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "S-parameter adapter measurements (.s2p)"
                myNameList(1) = "Gamma G (.s1p)"
                myNameList(2) = "Gamma S (.s1p)"
                myNameList(3) = "Power 1 (.w1p, .power)"
                myNameList(4) = "Power 2 (.w1p, .power)"
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".s1p" : FileExtensions(3) = ".w1p" : FileExtensions(4) = ".power"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "1 % power convergence criteria"
                PullDownList(1) = "0.1 % power convergence criteria"
                PullDownList(2) = "0.01 % power convergence criteria"
                PullDownList(3) = "0.001 % power convergence criteria"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor attempts to refine |S21| through an adapter with power measurements. The default target frequencies are set by the input frequencies."
                myDescription(2) = "Only the magnitude is optimized."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Refine |S21| of adapter from power measurements"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            Dim S As RealMatrix
            S = MechValues(0).getSParams(MechanismList1)
            Dim mySResult As New RealMatrix(S.NRows, 9, ".s2p")
            mySResult.Vector(1) = S.Vector(1)
            Dim GammaG As RealMatrix
            GammaG = MechValues(1).getSParams(MechanismList1)
            Dim GammaS As RealMatrix
            GammaS = MechValues(2).getSParams(MechanismList1)
            Dim Power1 As RealMatrix
            Power1 = MechValues(3).getSParams(MechanismList1)
            Dim Power2 As RealMatrix
            Power2 = MechValues(4).getSParams(MechanismList1)

            'Check the input to see if it has the right number of columns.
            If S.NCols <> 9 Then MechanismList1.ErrorReport = "The first input was not a 2x2 scattering-parameter matrix" : MechanismList1.FatalError = True : Return ToArray(mySResult)
            If GammaG.NCols <> 3 Then MechanismList1.ErrorReport = "The second input was not a .s1p file" : MechanismList1.FatalError = True : Return ToArray(mySResult)
            If GammaS.NCols <> 3 Then MechanismList1.ErrorReport = "The third input was not a .s1p file" : MechanismList1.FatalError = True : Return ToArray(mySResult)
            If Power1.NCols <> 5 And Power1.NCols <> 3 Then MechanismList1.ErrorReport = "The fourth input was not a .w1p or .power file" : MechanismList1.FatalError = True : Return ToArray(mySResult)
            If Power2.NCols <> 5 And Power2.NCols <> 3 Then MechanismList1.ErrorReport = "The fifth input was not a .w1p or .power file" : MechanismList1.FatalError = True : Return ToArray(mySResult)

            'Turn .power files into amplitudes.
            If InStr(Power1.DataType, ".power") > 0 Then 'We have a power reading, not a wave amplitude. Change this to linear wave units
                For kk As Integer = 1 To MechanismList1.FrequencyList.NRows
                    Power1(kk, 2) = Math.Sqrt(Power1(kk, 2) / 10.0)
                Next kk
            End If
            If InStr(Power2.DataType, ".power") > 0 Then 'We have a power reading, not a wave amplitude. Change this to linear wave units
                For kk As Integer = 1 To MechanismList1.FrequencyList.NRows
                    Power2(kk, 2) = Math.Sqrt(Power2(kk, 2) / 10.0)
                Next kk
            End If

            'Get power convergence criteria
            Dim Converge As Double = 0.01
            Select Case myPullDownSelection1
                Case 0  '1 %
                    Converge = 0.01
                Case 1  '0.1 %
                    Converge = 0.001
                Case 2  '0.01 %
                    Converge = 0.0001
                Case 3  '0.001 %
                    Converge = 0.00001
            End Select

            'Iteratively refine |S21|
            Dim NewS21Squared As New Complex(0.0, 0.0), OldS21Squared As New Complex(0.0, 0.0), Gamma1 As New Complex(0.0, 0.0), S1 As New ComplexMatrix(2, 2), GS As New Complex(0.0, 0.0), GG As New Complex(0.0, 0.0)
            Dim One As New Complex(1.0, 0.0)
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows
                S1 = S.SMatrix(k)
                OldS21Squared = S1(1, 2) * S1(2, 1) : NewS21Squared = OldS21Squared
                For iter As Integer = 0 To 100  'Limit ourselves to 100 iterations
                    GS = toComplex(GammaS(k, 2), GammaS(k, 3))
                    GG = toComplex(GammaG(k, 2), GammaG(k, 3))
                    Gamma1 = S1(1, 1) + (GS * OldS21Squared) / (One - S1(2, 2) * GS)
                    Dim NewMagSquared As Double = Abs((Power2(k, 2) / Power1(k, 2)) * Abs((One - GS * S1(2, 2)) ^ 2) * Abs((One - GG * Gamma1) ^ 2) / Abs((One - GG * GS) ^ 2))
                    NewS21Squared = NewMagSquared * S(1, 2) * S(2, 1) / Abs(S(1, 2) * S(2, 1))
                    If Abs(NewS21Squared - OldS21Squared) < Converge Then   'Found a solution
                        If iter = 100 Then MechanismList1.ErrorReport = "Warning: Did not converge after 100 iterations"
                        GoTo Done
                    End If
                    OldS21Squared = NewS21Squared
                Next iter
                'Stuff the new result into myresult
Done:           S1(1, 2) = Math.Sqrt(Abs(NewS21Squared)) * S1(1, 2) / Abs(S1(1, 2))
                S1(2, 1) = Math.Sqrt(Abs(NewS21Squared)) * S1(2, 1) / Abs(S1(2, 1))
                mySResult.SMatrix(k) = S1
            Next k

            'That's all folks!
            Return ToArray(mySResult)

        End Function

    End Class


    ''' <summary>
    ''' Post processor for adding uncertainties to calibrated data.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_RWBImpedanceNormalization
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Corrected measurements to be impedance transformed"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Waveguide width a"    'Dimension in meters.
                myNameList(1) = "Waveguide height b"    'Dimension in meters.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(6) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".s2p" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".s6p" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".meas_archive" : FileExtensions(6) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Transform impedance of entire two-port"
                PullDownList(1) = "Apply impedance transform to port 1 only"
                PullDownList(2) = "Apply impedance transform to port 2 only"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "50 ohm reference impedance"
                PullDownList(1) = "Free-space reference impedance"
                PullDownList(2) = "Twice free-space reference impedance"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor transforms the impedance of two-port scattering paraemters from the characteristic impedance of RWG to 50 ohms."
                myDescription(2) = "You can apply the transformation to the entire two port, or to just one of the ports."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".s2p"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Impedance-normalize corrected RWG measurements"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            'The mechanism values.
            Dim a As Double = MechValues(0).MechanismValue(MechanismList1)      'The Waveguide width a expressed in meters.
            Dim b As Double = MechValues(1).MechanismValue(MechanismList1)      'The waveguide height b expressed in meters.
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MultipleModelInput(0).getSParams(MechanismList1)  'This is the corrected data to be impedance transformed.

            'Check the input to see if it has the right number of columns.
            If myRealMatrix1.NCols <> 9 Then MechanismList1.ErrorReport = "The corrected data was not a 2x2 scattering-parameter matrix" : Return ToArray(myRealMatrix1)

            'Create a scattering-parameter instance.
            Dim mySParams As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySParams.Vector(1) = MechanismList1.FrequencyList

            'Step through the frequencies and generate the scattering parameters of the junction.
            For k As Integer = 1 To mySParams.NRows

                'Calculate and store the result
                mySParams.SMatrix(k) = CalculateRWGImpedanceTransform(mySParams(k, 1), a, b, myRealMatrix1.SMatrix(k), myPullDownSelection1, , , myPullDownSelection2)

            Next k

            'Return the values to the caller. That's all folks!
            Return ToArray(mySParams)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for transforming RWG-measurement reference impedance.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_RWBImpedanceNormalization_withEpsEff
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Corrected measurements to be impedance transformed"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(2) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Waveguide width a"    'Dimension in meters.
                myNameList(1) = "Waveguide height b"    'Dimension in meters.
                myNameList(2) = "Measured effective dielectric constant (.meas or .complex)"    'Dimensionless
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(7) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".s2p" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".s6p" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".complex" : FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Transform impedance of entire two-port"
                PullDownList(1) = "Apply impedance transform to port 1 only"
                PullDownList(2) = "Apply impedance transform to port 2 only"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "50 ohm reference impedance"
                PullDownList(1) = "Free-space reference impedance"
                PullDownList(2) = "Twice free-space reference impedance"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor transforms the impedance of two-port scattering paraemters from the characteristic impedance of RWG to 50 ohms. The post processor uses the measured effective dielectric constant to account for metal losses."
                myDescription(2) = "You can apply the transformation to the entire two port, or to just one of the ports."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".s2p"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Impedance-normalize corrected RWG measurements using Eps Eff"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            'The mechanism values.
            Dim a As Double = MechValues(0).MechanismValue(MechanismList1)      'The Waveguide width a expressed in meters.
            Dim b As Double = MechValues(1).MechanismValue(MechanismList1)      'The waveguide height b expressed in meters.
            Dim EpsEff As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : EpsEff = MechValues(2).getSParams(MechanismList1)      'The waveguide height b expressed in meters.
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MultipleModelInput(0).getSParams(MechanismList1)  'This is the corrected data to be impedance transformed.

            'Check the input to see if it has the right number of columns.
            If EpsEff.NCols <> 3 Then MechanismList1.ErrorReport = "The effective dielctric constant does not have three columns." : Return ToArray(myRealMatrix1)
            If myRealMatrix1.NCols <> 9 Then MechanismList1.ErrorReport = "The corrected data was not a 2x2 scattering-parameter matrix" : Return ToArray(myRealMatrix1)

            'Create a scattering-parameter instance.
            Dim mySParams As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySParams.Vector(1) = MechanismList1.FrequencyList

            'Step through the frequencies and generate the scattering parameters of the junction.
            For k As Integer = 1 To mySParams.NRows

                'Calculate and store the result
                Dim EpsEffR As Double = EpsEff(k, 2)
                Dim EpsEffI As Double = EpsEff(k, 3)
                mySParams.SMatrix(k) = CalculateRWGImpedanceTransform(mySParams(k, 1), a, b, myRealMatrix1.SMatrix(k), myPullDownSelection1, EpsEffR, EpsEffI, myPullDownSelection2)

            Next k

            'Return the values to the caller. That's all folks!
            Return ToArray(mySParams)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for transforming RWG-measurement reference impedance.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_RWBImpedance_withEpsEff
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(4) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Waveguide width a"    'Dimension in meters.
                myNameList(1) = "Waveguide height b"    'Dimension in meters.
                myNameList(2) = "Measured effective dielectric constant (.meas or .complex)"    'Dimensionless
                myNameList(3) = "Minimum fit frequency (.parameter, GHz)"    'GHz
                myNameList(4) = "Maximum fit frequency (.parameter, GHz)"    'GHz
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(7) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".meas" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".complex" : FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Wave impedance Z_h"
                PullDownList(1) = "Power-voltage normalization 4(b/a)Z_h"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor calculates the characteristic impedance of RWG. The post processor uses the measured effective dielectric constant to account for metal losses, and gives a result calculated directly from the measurements and a result calculated from a fit of alpha to the measured loss."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".complex"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Estimate RWG impedance from Eps Eff"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNames(2) As String
                myFileNames(0) = "\Z0FromMeas"
                myFileNames(1) = "\Z0WithAlphaFit"
                myFileNames(2) = "\Z0Phase"
                Return myFileNames
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            'The mechanism values.
            Dim a As Double = MechValues(0).MechanismValue(MechanismList1)      'The Waveguide width a expressed in meters.
            Dim b As Double = MechValues(1).MechanismValue(MechanismList1)      'The waveguide height b expressed in meters.
            Dim EpsEff As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : EpsEff = MechValues(2).getSParams(MechanismList1)      'The waveguide height b expressed in meters.

            'Check the input to see if it has the right number of columns.
            If EpsEff.NCols <> 3 Then MechanismList1.ErrorReport = "The effective dielctric constant does not have three columns." : Return ToArray(EpsEff)

            'Get the fit range
            Dim Fmin As Double = MechValues(3).MechanismValue(MechanismList1), Nmin As Integer = 1
            Dim Fmax As Double = MechValues(4).MechanismValue(MechanismList1), Nmax As Integer = EpsEff.NRows
            For kk As Integer = 1 To EpsEff.NRows
                If EpsEff(kk) <= Fmin Then Nmin = kk
                If EpsEff(kk) <= Fmax Then Nmax = kk
            Next kk
            If Nmin > Nmax Then MechanismList1.ErrorReport = "Max frequency must be greater than min frequency." : Return ToArray(EpsEff)

            Dim N As Integer = 1, Ndim As Integer = 1 + Nmax - Nmin
            Dim EpsEff1 As New RealMatrix(Ndim, 3)
            For kk As Integer = Nmin To Nmax
                EpsEff1(N, 1) = EpsEff(kk, 1) : EpsEff1(N, 2) = EpsEff(kk, 2) : EpsEff1(N, 3) = EpsEff(kk, 3)
                N += 1
            Next kk

            Dim GammaEffSmooth As RealMatrix = SmoothRWGAlpha(a, b, EpsEff1, EpsEff, True)

            'Create the matrices to hold the impedances.
            Dim myZ As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : myZ.Vector(1) = MechanismList1.FrequencyList
            Dim myZ1 As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : myZ1.Vector(1) = MechanismList1.FrequencyList
            Dim myZPhase As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : myZPhase.Vector(1) = MechanismList1.FrequencyList

            'The impedance normalization. The code uses the Power-voltage normalization 4(b/a)Z_h
            Dim ImpScaleFactor As Double = 1.0
            Select Case myPullDownSelection1
                Case -1, 0  'PullDownList(0) = "Wave impedance Z_h"
                    ImpScaleFactor = a / (4.0 * b)
                Case 1      'PullDownList(1) = "Power-voltage normalization 4(b/a)Z_h"
                    ImpScaleFactor = 1.0
            End Select

            'Step through the frequencies and generate the scattering parameters of the junction.
            For k As Integer = 1 To myZ.NRows

                'Calculate and store the result
                Dim Z As Complex = CalculateRWGImpedance(EpsEff(k, 1), a, b, EpsEff(k, 2), EpsEff(k, 3))
                myZ(k, 2) = ImpScaleFactor * Z.Re : myZ(k, 3) = ImpScaleFactor * Z.Im
                myZPhase(k, 2) = (180.0 / Math.PI) * Math.Atan2(Z.Im, Z.Re)

                'Calculate and store the fitted result
                Z = CalculateRWGImpedance(GammaEffSmooth(k, 1), a, b, GammaEffSmooth(k, 2), GammaEffSmooth(k, 3), False)
                myZ1(k, 2) = ImpScaleFactor * Z.Re : myZ1(k, 3) = ImpScaleFactor * Z.Im
                myZPhase(k, 3) = (180.0 / Math.PI) * Math.Atan2(Z.Im, Z.Re)

            Next k

            'Return the values to the caller. That's all folks!
            Dim Output(2) As Object : Output(0) = myZ : Output(1) = myZ1 : Output(2) = myZPhase
            Return Output

        End Function

    End Class



    ''' <summary>
    ''' Post processor for impedance transformations.
    ''' </summary>
    ''' <remarks>Apply impedance transformation from frequency-dependent impedance to fixed impedance, or vice versa</remarks>
    <Serializable()> Public Class Post_ImpedanceNormalization
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0 'The user-specified impedance
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "S-parameters to be impedance transformed"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Characteristic impedance (.meas, .complex)"    'Ohms
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas_archive" : FileExtensions(2) = ".complex" : FileExtensions(3) = ".s2p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Transform impedance of entire two-port"
                PullDownList(1) = "Apply impedance transform to port 1 only"
                PullDownList(2) = "Apply impedance transform to port 2 only"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Transform from char. impedance to ref. impedance"
                PullDownList(1) = "Transform from ref. impedance to char. impedance"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "50 Ohm reference impedance"
                PullDownList(1) = "Free-space reference impedance (376.73031 Ohm)"
                PullDownList(2) = "Twice free-space reference impedance"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor transforms the impedance of two-port scattering parameters from the user-specified characteristic impedance to a fixed impedance, or vice versa."
                myDescription(2) = "You can apply the transformation to the entire two port, or to just one of the ports."
                myDescription(4) = "You might use this if you have data corrected to the characteristic impedance (which you also know), and you want your data corrected to 50 Ohms. One might also use this post processor to estimate the error boxes corrected to the (known) characteristic impedance, given error boxes corrected to 50 Ohms. This is particularly usefull if you want to feed Statistical an estimate of the error boxes."
                myDescription(6) = "Written by Christian Long."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".s2p"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Impedance-normalize measurements"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associated with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input data.
            Dim Z0 As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : Z0 = MechValues(0).getSParams(MechanismList1) 'The characteristic impedance specified by the user.
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MultipleModelInput(0).getSParams(MechanismList1) 'The input S-parameters to be impdeance transformed.

            'Check the input to see if it has the right number of columns.
            If Z0.NCols <> 3 Then MechanismList1.ErrorReport = "The impedance does not have three columns." : Return ToArray(myRealMatrix1)
            If myRealMatrix1.NCols <> 9 Then MechanismList1.ErrorReport = "The data to impedance transform was not a 2x2 scattering-parameter matrix" : Return ToArray(myRealMatrix1)

            'Check which reference impedance to use
            Dim RefImp As New Double
            Select Case myPullDownSelection3
                Case -1, 0
                    RefImp = 50.0 ' 50 Ohms
                Case 1
                    RefImp = 376.73031 ' Free space
                Case 2
                    RefImp = 2.0 * 376.73031 ' Twice free space
            End Select

            'Initialize the variables that we will need.
            Dim mySParams As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySParams.Vector(1) = MechanismList1.FrequencyList 'Impedance-transformed S-parameters
            Dim Z0_Rel As New Complex(0.0, 0.0) 'Relative impedance (characteristance impedance to reference impedance)
            Dim Z0_Rel_inv As New Complex(0.0, 0.0) 'Inverse of the relative impedance
            Dim S_Junction As New ComplexMatrix(2, 2) 'The S-parameters of the impedance transformer from Z0 to the reference impedance
            Dim S_Junction_Inv As New ComplexMatrix(2, 2) 'The S-parameters of the impedance transformer from the reference impedance to Z0
            Dim S_In As New ComplexMatrix(2, 2) 'Input S-parameters at a single frequency
            Dim S_Out As New ComplexMatrix(2, 2) 'Output (Impedance-transformed) S-parameters at a single frequency

            'Step through the frequencies and generate the scattering parameters of the junction.
            For k As Integer = 1 To mySParams.NRows

                'Normailze the characteristic impedance to the reference impedance
                Z0_Rel = toComplex(Z0(k, 2), Z0(k, 3)) / RefImp
                Z0_Rel_inv = RefImp / toComplex(Z0(k, 2), Z0(k, 3))

                'Calculate the impedance transformers
                Select Case myPullDownSelection2 'Check 
                    Case -1, 0 'from the characteristic impedance to the reference impedance
                        S_Junction = SParams_Impedance(Z0_Rel)
                        S_Junction_Inv = SParams_Impedance(Z0_Rel_inv)
                    Case 1 'from the reference impedance to the characteristic impedance
                        S_Junction = SParams_Impedance(Z0_Rel_inv)
                        S_Junction_Inv = SParams_Impedance(Z0_Rel)
                End Select

                'Cascade the input data with the impedance transformer(s).
                S_In = myRealMatrix1.SMatrix(k)
                Select Case myPullDownSelection1
                    Case 0, -1 'Both ports
                        S_Out = CascadeSParams(S_Junction, CascadeSParams(S_In, S_Junction_Inv))
                    Case 1 'Port 1
                        S_Out = CascadeSParams(S_Junction, S_In)
                    Case 2 'Port 2
                        S_Out = CascadeSParams(S_In, S_Junction_Inv)
                End Select

                'Store the result
                mySParams.SMatrix(k) = S_Out

            Next k

            'Return the values to the caller. That's all folks!
            Return ToArray(mySParams)

        End Function

    End Class




    ''' <summary>
    ''' Post processor for adding determineing epsilon of dielectric from CPW measurement.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_EpsilonRfomCPW_Uwe
        Implements ICloneable

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 5
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "CPW center-conductor width"    'Dimension in meters.
                myNameList(1) = "CPW slot width"    'Dimension in meters.
                myNameList(2) = "CPW ground-plane width"    'Dimension in meters.
                myNameList(3) = "CPW metal thickness"    'Dimension in meters.
                myNameList(4) = "CPW metal conductivity (S/m)"    '
                myNameList(5) = "Measured CPW propagation constant (eps eff, .meas or .complex)"    'Dimensionless
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(5) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".complex" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".sumofparameters" : FileExtensions(4) = ".meas_archive" : FileExtensions(5) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Output complex permittivity"
                PullDownList(1) = "Output relative dielectric constant and loss tangent"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(5) As String
                myDescription(0) = "This post processor estimates the complex permittivity of a substrate from a measured propagation constant of CPW lines built on the same substrate."
                myDescription(1) = "Depending on the CPW geometry chosen, the post processor is applicable for medium- to high-loss substrates up to intermediate frequencies."
                myDescription(2) = "See U. Arz, J. Leinhos, M. D. Janezic, Broadband Dielectric Material Characterization: A Comparison of On-Wafer and Split-Cylinder Measurements,"
                myDescription(3) = "Proc. IEEE European Microwave Conference EuMC 2008, Oct. 2008, pp. 913-916."
                myDescription(5) = "Written by Uwe Arz."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".complex"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Complex substrate permittivity from measured CPW propagation constant"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            'The mechanism values.

            Dim CPW_Cwidth As Double = MechValues(0).MechanismValue(MechanismList1)  'myNameList(0) = "CPW center-conductor width"    'Dimension in meters.
            Dim CPW_Swidth As Double = MechValues(1).MechanismValue(MechanismList1)  'myNameList(1) = "CPW slot width"    'Dimension in meters.
            Dim CPW_Gwidth As Double = MechValues(2).MechanismValue(MechanismList1)  'myNameList(2) = "CPW ground-plane width"    'Dimension in meters.
            Dim CPW_mthick As Double = MechValues(3).MechanismValue(MechanismList1)  'myNameList(3) = "CPW metal thickness"    'Dimension in meters.
            Dim CPW_mcond As Double = MechValues(4).MechanismValue(MechanismList1)  'myNameList(4) = "CPW metal conductivity (S/m)"    '
            Dim EpsEff As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : EpsEff = MechValues(5).getSParams(MechanismList1)     'myNameList(5) = "Measured CPW effective dielectric constant (.meas or .complex)"    'Dimensionless
            Dim EpsSubstrate As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")   'This will be the result of the calculation
            EpsSubstrate.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output

            'Check the input to see if it has the right number of columns.
            If EpsEff.NCols <> 3 Then MechanismList1.ErrorReport = "The effective dielectric constant does not have three columns." : Return ToArray(EpsSubstrate)

            'Step through the frequencies and generate the scattering parameters of the junction.
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows

                'Calculate and store the result
                Dim FreqInGHz As Double = MechanismList1.FrequencyList(k)
                Dim EpsEffR As Double = EpsEff(k, 2)
                Dim EpsEffI As Double = EpsEff(k, 3)

                'Hi Uwe, This is where you would calculate the result. I would just set the output equal to the input for testing. Note that I already have quite a few of Wolfgangs CPW models implemented in subroutines, if those are useful. Dylan
                '***

                Dim F As Double = FreqInGHz * 1000000000.0
                '                Dim HS As Double = 0.0006419 '641.9 um substrate thickness assumed for now
                Dim HS As Double = 1.1E+20 'infintely expanded substrate assumed for now
                Dim IER As Integer = 0
                Dim R As Double, LIND As Double, CAP As Double, GCOND As Double, EREFF As Double, BETA As Double, ALPHA As Double, ADBMM As Double, ZW As New Complex(0.0, 0.0)
                Dim omega As Double = 2.0 * 3.1415926535897 * MechanismList1.FrequencyList(k) * 1000000000.0    '1/s

                Dim ER As Double = 1.01     'Call ByRef
                Dim TANDE As Double = 0.01  'Call ByRef

                Dim EpsEff1 As New Complex(EpsEffR, EpsEffI)
                Dim GAM1 As New Complex(0, 0)
                GAM1 = toComplex(0, 1) * 2.0 * Math.PI * F / 299792458.0 * Complex_Number_Class.Sqrt(EpsEff1)

                Call INVH93(CPW_Cwidth, CPW_Swidth, CPW_mthick, CPW_Gwidth, HS, ER, CPW_mcond, TANDE, F, IER, R, LIND, CAP, GCOND, EREFF, BETA, ALPHA, ADBMM, ZW, GAM1)
                If IER > 0 Then Call CPWPAR_Error(IER, MechanismList1)


                'Z0 = Complex_Number_Class.Sqrt(toComplex(R, omega * LIND) / toComplex(GCOND, omega * CAP))      'ohms
                'GAMMA = Complex_Number_Class.Sqrt(toComplex(R, omega * LIND) * toComplex(GCOND, omega * CAP))   'm^-1
                'If GAMMA.Im < 0.0 Then GAMMA = -GAMMA

                '***
                'For now, just set the output equal to the input.
                'Change the output format.
                If myPullDownSelection1 = 1 Then    'Output Re(Eps), Tan delta
                    If EpsEffR <> 0.0 Then
                        'EpsSubstrate(k, 2) = EpsEffR
                        'EpsSubstrate(k, 3) = -EpsEffI / EpsEffR
                        EpsSubstrate(k, 2) = ER
                        EpsSubstrate(k, 3) = TANDE
                    End If
                Else
                    'EpsSubstrate(k, 2) = EpsEffR
                    'EpsSubstrate(k, 3) = EpsEffI
                    EpsSubstrate(k, 2) = ER
                    EpsSubstrate(k, 3) = -TANDE * ER
                End If

            Next k

            'Return the values to the caller. That's all folks!
            Return ToArray(EpsSubstrate)

        End Function

        ''' <summary>
        ''' CPW MODELLING BY CLOSED-FORM EXPRESSIONS (VERSION 2.3 BY W. HEINRICH, FEBRUARY 3, 1993)
        ''' </summary>
        ''' <param name="W">WIDTH OF CENTER STRIP IN M</param>
        ''' <param name="S">SLOT WIDTH IN M </param>
        ''' <param name="T">METALLIZATION THICKNESS IN M</param>
        ''' <param name="WG">WIDTH OF GROUND METALLIZATION </param>
        ''' <param name="HS">SUBSTRATE THICKNESS HS IN M, FOR HS > 1.D20, INFINITE SUBSTRATE IS ASSUMED</param>
        ''' <param name="ER">RELATIVE DIELECTRIC CONSTANT OF THE SUBSTRATE,
        ''' REMAINING CROSS SECTION WITH ER=1,
        ''' MUE=MUE0 OVER THE ENTIRE DOMAIN</param>
        ''' <param name="KAPPA">CONDUCTIVITY IN S/M, FOR KAPPA > 1.D20, IDEAL CONDUCTORS ARE ASSUMED</param>
        ''' <param name="TANDE">TAN(DE) OF THE SUBSTRATE</param>
        ''' <param name="F">FREQUENCY F IN HZ
        ''' - FOR F .lt. UNDERFLOW, ONLY THE LINE RESISTANCE, 
        ''' INDUCTANCE, CAPACITANCE, AND CONDUCTANCE ARE 
        ''' CALCULATED. PROPAGATION QUANTITES CANNOT BE
        ''' DEFINED AT F=0. THEY ARE SET TO ZERO. </param>
        ''' <param name="IER">ERROR PARAMETER, IER=0 MEANS: NO ERRORS FOUND,
        ''' OTHERWISE THE VALUE OF 'IER' INDICATES THE FOLLOWING
        ''' ERRORS AND WARNINGS, RESPECTIVELY. FOR IER > 100, THE
        ''' OUPUT VARIABLES ARE UNDEFINED (I.E. NO VALUE IS
        ''' ASSIGNED).
        ''' IER= 50 - WARNING: FREQUENCY EXCEEDS QUASI-TEM LIMIT 
        ''' (ACCURACY DETERIORATES) 
        ''' F > (10*SQRT(MUE0*ER*E0)*(W+2*S))**(-1) 
        ''' 
        ''' IER= 51 - WARNING: SUBSTRATE THICKNESS TOO SMALL  
        '''  (ACCURACY MAY DETERIORATE) 
        '''   HS .lt. W + 2*S   
        ''' 
        '''  IER= 52 - WARNING: FREQUENCY LOWER THAN UNDERFLOW
        '''  BETA, ALPHA, EREFF, AND ZW SET TO ZERO 
        ''' 
        ''' IER > 100 - ERROR(S) IN INPUT DATA:
        ''' 
        ''' 101 : W .LE. UNDERFLOW  
        '''  102 : S .LE. UNDERFLOW 
        ''' 103 : WG.LE. UNDERFLOW 
        ''' 104 : T .LE. UNDERFLOW
        '''      OR, IF KAPPA .GT.D20, T .LT. 0   
        ''' 105 : KAPPA .LE. UNDERFLOW
        ''' 106 : ER .LT. 1
        ''' 107 : F .LT. 0
        ''' 108 : HS .LE. 0.012*W  (LOWER VALUES
        ''' WOULD CAUSE OVERFLOW PROBLEMS)
        ''' 201 : WG .LE. W 
        ''' 202 : T .GE. 4.5*W</param>
        ''' <param name="R">RESISTANCE (OHM/M)</param>
        ''' <param name="LIND">INDUCTANCE (HENRY/M)</param>
        ''' <param name="CAP">CAPACITANCE (FARAD/M)</param>
        ''' <param name="GCOND">SHUNT CONDUCTANCE (IN PARALLEL WITH CAPACITANCE) IN S/M</param>
        ''' <param name="EREFF">EFFECTIVE DIELECTRIC CONSTANT = (BETA/BETA(0))**2</param>
        ''' <param name="BETA">PHASE CONSTANT (1/M)</param>
        ''' <param name="ALPHA">ATTENUATION CONSTANT (1/M)</param>
        ''' <param name="ADBMM">ATTENUATION CONSTANT (DB/MM)</param>
        ''' <param name="ZW">COMPLEX CHARACTERISTIC IMPEDANCE IN OHM</param>
        ''' <remarks>
        ''' THE UNDERFLOW LIMIT IS SET BY A 'DATA'-
        ''' STATEMENT IN THE DECLARATIONS AND CAN BE
        ''' MODIFIED ACCORDING TO THE ACTUAL HARDWARE
        ''' SPECIFICATIONS (VARIABLE 'UNFLOW').
        ''' 
        ''' SIMILARLY, THE VARIABLE 'ACC' SPECIFYING 
        ''' THE NUMERICAL ACCURACY IS SET TO 1.D-16 
        ''' (DOUBLE PRECISION) IN A 'DATA'-STATEMENT 
        ''' IN THE DECLARATIONS.             </remarks>
        Private Sub INVH93(ByVal W As Double, ByVal S As Double, ByVal T As Double, ByVal WG As Double, ByVal HS As Double, ByRef ER As Double, ByVal KAPPA As Double, ByRef TANDE As Double, ByVal F As Double, ByRef IER As Integer, ByRef R As Double, ByRef LIND As Double, ByRef CAP As Double, ByRef GCOND As Double,
                           ByRef EREFF As Double, ByRef BETA As Double, ByRef ALPHA As Double, ByRef ADBMM As Double, ByRef ZW As Complex, ByRef GAM1 As Complex)
            Dim A As Double, B As Double
            'Dim BETA0 As Double 'not used
            Dim pi As Double = Math.PI, OMGTEM As Double
            Dim K0 As Double, K1 As Double, K2 As Double, K3 As Double, M0 As Double, M1 As Double, M2 As Double, M3 As Double, KKS0 As Double, KKS1 As Double, KKS2 As Double, KKS3 As Double, ES0 As Double, KS0 As Double
            Dim KS3 As Double, PC(6) As Double, TS As Double, TH As Double, TDS As Double, TG As Double, BABA As Double, PIAHS As Double, PIBHS As Double, DKS0 As Double, DKS3 As Double
            Dim FUP As Double, F0 As Double, F1 As Double, FLG As Double, FLC As Double, F0HS0 As Double, F0HS As Double, DFLC As Double, DFLG As Double, FLHS As Double
            Dim LEINFT As Double, LINDHS As Double
            Dim RC As Double, RG As Double, RC0 As Double, RG0 As Double, RC1 As Double, RG1 As Double, NUEC As Double, NUEG As Double
            Dim AC(4) As Double, AG(4) As Double, OMC(2) As Double, OMG(2) As Double, GAMC As Double, GAMG As Double
            Dim LDC0 As Double, LZ1 As Double, LZ2 As Double, ETA(4) As Double, NUEZ1 As Double, NUEZ2 As Double, OML(2) As Double, AL(5) As Double
            Dim ZR As New Complex, YG As New Complex, KZ As New Complex
            Dim IDEAL As Boolean

            Dim UNFLOW As Double = 1.0E-60
            Dim ACC As Double = 0.0000000000000001
            Dim E0 As Double = 0.00000000000885418
            Dim MUE As Double = 0.0000004 * pi
            Dim OM As Double = 2.0 * pi * F

            IER = 0
            If (W <= UNFLOW) Then IER = 101
            If (S <= UNFLOW) Then IER = 102
            If (WG <= UNFLOW) Then IER = 103
            IDEAL = KAPPA > 1.0E+20
            If (IDEAL) Then
                If (T < 0.0) Then IER = 104
            Else
                If (T <= UNFLOW) Then IER = 104
            End If
            If (KAPPA <= UNFLOW) Then IER = 105
            If (ER < 1.0) Then IER = 106
            If (F < 0.0) Then IER = 107
            If (HS < 0.012 * W Or HS <= UNFLOW) Then IER = 108
            If (IER > 100) Then Exit Sub
            If (WG <= W) Then IER = 201
            If (T >= 4.5 * W) Then IER = 202
            If (IER > 100) Then Exit Sub
            OMGTEM = 0.2 * pi / (Math.Sqrt(MUE * E0 * ER) * (W + 2.0 * S))
            If (OM > OMGTEM) Then IER = 50
            If (HS < W + 2.0 * S) Then IER = 51
            If (F < UNFLOW) Then IER = 52
            '     * PARAMETERS FOR CONFORMAL MAPPING PROCEDURE 
            A = 0.5 * W
            B = A + S

            'DETERMINATION OF ELLIPTIC-INTEGRAL EXPRESSIONS  
            K0 = W / (W + 2.0 * S)
            K1 = W / (W + 2.0 * S) * Math.Sqrt((1.0 - ((W + 2.0 * S) / (W + 2.0 * S + 2.0 * WG)) ^ 2) / (1.0 - (W / (W + 2.0 * S + 2.0 * WG)) ^ 2))
            K2 = W / (W + 2.0 * S) * Math.Sqrt((1.0 - ((W + 2.0 * S) / (4.0 * W + 2.0 * S)) ^ 2) / (1.0 - (W / (4.0 * W + 2.0 * S)) ^ 2))

            M0 = K0 * K0
            M1 = K1 * K1
            M2 = K2 * K2

            KKS1 = ELINK(M1) / ELINK(1.0 - M1)
            KKS2 = ELINK(M2) / ELINK(1.0 - M2)
            KS0 = ELINK(1.0 - M0)
            ES0 = ELINE(1.0 - M0)

            'INCLUSION OF FINITE SUBSTRATE THICKNESS

            If (HS > 1.0E+20) Then

                F0HS = 0.0
                DFLC = 0.0
                DFLG = 0.0
                FLHS = 0.0
            Else
                PIBHS = 0.5 * pi * B / HS
                If (PIBHS * PIBHS < ACC) Then

                    F0HS = 0.0
                    DFLC = 0.0
                    DFLG = 0.0
                    FLHS = 0.0

                Else

                    PIAHS = 0.5 * pi * A / HS
                    K3 = Math.Tanh(PIAHS) / Math.Tanh(PIBHS)
                    M3 = K3 * K3
                    KKS3 = ELINK(M3) / ELINK(1.0 - M3)
                    KKS0 = ELINK(M0) / ELINK(1.0 - M0)
                    KS3 = ELINK(1.0 - M3)
                    F0HS = 0.5 * (KKS3 - KKS0)

                    DKS0 = 1.0 / (K0 * (1.0 - M0) * KS0 ^ 2)
                    DKS3 = 1.0 / (K3 * (1.0 - M3) * KS3 ^ 2)
                    DFLC = 0.25 * pi / B * (PIBHS * DKS3 / (Math.Cosh(PIAHS) ^ 2 * Math.Tanh(PIBHS)) - DKS0)
                    DFLG = 0.25 * pi / B * (PIBHS * DKS3 * Math.Tanh(PIAHS) / Math.Sinh(PIBHS) ^ 2 - A / B * DKS0)
                    FLHS = 0.25 * pi / HS * DKS3 * (PIAHS / (Math.Cosh(PIAHS) ^ 2 * Math.Tanh(PIBHS)) - PIBHS * Math.Tanh(PIAHS) / Math.Sinh(PIBHS) ^ 2)
                End If
            End If

            ' DETERMINATION OF FUP,F0,F1,FLG,FLC                              02530000

            '    - CASE T=0 (PROBLEMATIC BECAUSE OF LOSSES)                        02550000
            If (T < UNFLOW) Then
                F0HS0 = KKS1
                F0 = F0HS0 + F0HS
                FUP = F0
                F1 = F0 + KKS2 - KKS1
                FLC = 1.0E+30
                FLG = 1.0E+30
                GoTo 1000
            End If

            '     - HELP QUANTITIES                                                 02670000
            BABA = (B - A) / (B + A)
            TG = 0.5 * S
            TH = 0.5 * T

            PC(0) = 0.5 * B / (A * KS0 ^ 2)
            PC(1) = 1.0 + Math.Log(8.0 * pi * A / (A + B)) + A / (A + B) * Math.Log(B / A)
            PC(2) = PC(1) - 2.0 * A / B * KS0 ^ 2
            PC(3) = 2.0 * B ^ 2 / (A * (A + B)) * ES0 / KS0
            PC(4) = BABA * (Math.Log(8.0 * pi * A / (A + B)) + A / B)
            PC(5) = BABA * Math.Log(3.0)
            PC(6) = BABA * Math.Log(24.0 * pi * B * (A + B) / (B - A) ^ 2) - B / (A + B) * Math.Log(B / A)

            '    * F(0)   (TS=TH)                                                  02820000
            TS = TH
            TDS = TS / S
            If (TS <= TG) Then
                F0HS0 = KKS1 + PC(0) * (TDS * (PC(1) - Math.Log(2.0 * TDS)) + TDS ^ 2 * (1.0 - 1.5 * PC(2) + PC(2) * Math.Log(2.0 * TDS)))
            Else
                F0HS0 = KKS1 + PC(0) / 8.0 * (PC(2) + 2.0) + TDS
            End If
            F0 = F0HS0 + F0HS

            '     * F(UP)  (TS=T )                                                  02940000
            TS = T
            TDS = TS / S
            If (TS <= TG) Then
                FUP = KKS1 + PC(0) * (TDS * (PC(1) - Math.Log(2.0 * TDS)) + TDS ^ 2 * (1.0 - 1.5 * PC(2) + PC(2) * Math.Log(2.0 * TDS)))
            Else
                FUP = KKS1 + PC(0) / 8.0 * (PC(2) + 2.0) + TDS
            End If

            '     * F(1)                                                            03050000

            F1 = F0 + KKS2 - KKS1

            '     * FLC AND FLG                                                     03090000

            TDS = TH / S

            If (TH <= TG) Then
                FLC = PC(0) / S * (1.0 / (B + A) * (pi * B + B * Math.Log(8.0 * pi * A / (A + B)) - (B - A) * Math.Log(BABA) - B * Math.Log(2.0 * TDS)) _
                + TDS * (PC(1) * PC(3) - PC(2) - B / A * PC(4) + PC(5) + (-PC(3) + PC(2) + B / A - 1.0 - PC(5)) * Math.Log(2.0 * TDS)) _
             + TDS ^ 2 * (PC(3) * (1.0 - 1.5 * PC(1)) + 1.5 * PC(1) _
                            - 2.0 * PC(2) + 1.0 + 1.5 * B / A * PC(4) - B / A * BABA _
                         + (2.0 * PC(2) + PC(1) * (PC(3) - 1.0) - B / A * PC(4)) _
                                                        * Math.Log(2.0 * TDS)))
                FLG = PC(0) / S * (1.0 / (B + A) *
                        (pi * A + A * Math.Log(8.0 * pi * B / (B - A)) + B * Math.Log(BABA) - A * Math.Log(2.0 * TDS)) _
                + TDS * (A / B * PC(1) * PC(3) + (1.0 - A / B) * PC(1) - PC(2) - PC(4) - PC(5) _
                          + (-A / B * PC(3) + PC(2) + A / B - 1.0 + PC(5)) * Math.Log(2.0 * TDS)) _
              + TDS ^ 2 * (A / B * PC(3) * (1.0 - 1.5 * PC(1)) + 1.5 * A / B * PC(1) _
                               - 2.0 * PC(2) + 2.0 - A / B + 1.5 * PC(4) - BABA _
                          + (2.0 * PC(2) + A / B * PC(1) * (PC(3) - 1.0) - PC(4)) * Math.Log(2.0 * TDS)))
            Else
                FLC = 0.5 / S + TDS / S + PC(0) / S * (pi * B / (A + B) + 0.5 * PC(6) _
          + 1.0 / 8.0 * (-PC(1) + PC(3) * (PC(1) + 2.0) - B / A * PC(4) - 2.0 * (A ^ 2 + B ^ 2) / (A * (A + B))))
                FLG = 0.5 / S + TDS / S + PC(0) / S * (pi * A / (A + B) - 0.5 * PC(6) _
             + 1.0 / 8.0 * (-A / B * PC(1) + A / B * PC(3) * (PC(1) + 2.0) - PC(4) - 2.0 * (A ^ 2 + B ^ 2) / (B * (A + B))))
            End If

            FLC = (FLC + DFLC) * (1.0 - 0.1 * (A / B) ^ 2)
            FLG = (FLG + DFLG + FLHS) * (1.0 - 0.1 * (A / B) ^ 2)

1000:       ' CONTINUE                                                          03450000

            '     * ELEMENTS  C, GCOND, AND LEINFT (EXTERNAL INDUCTANCE             03470000
            '                                      FOR KAPPA -> INFINITY)           03480000

            'CAP = 2.0 * E0 * (FUP + ER * (KKS1 + 2.0 * F0HS))
            'GCOND = OM * TANDE * 2.0 * E0 * ER * (KKS1 + 2.0 * F0HS)
            LEINFT = 0.25 * MUE / F0
            LINDHS = 0.25 * MUE * (1.0 / F0 - 1.0 / F0HS0)

            If (IDEAL) Then
                R = 0.0
                LIND = LEINFT
                GoTo 1500
            End If

            '     * RESISTANCE                                                      03610000
            '     - COEFFICIENTS ETC.                                               03630000
            OMC(1) = 8.0 / (MUE * KAPPA * T * W)
            OMC(2) = 8.0 * ((W + T) / (W * T)) ^ 2 / (MUE * KAPPA)
            OMG(1) = 2.0 / (MUE * KAPPA * T * WG)
            OMG(2) = 2.0 * ((2.0 * WG + T) / (WG * T)) ^ 2 / (MUE * KAPPA)
            RC0 = 1.0 / (KAPPA * W * T)
            RC1 = Math.Sqrt(OMC(2) * MUE / (2.0 * KAPPA)) * FLC / (4.0 * F0 ^ 2)
            NUEC = Math.Log(RC0 / RC1) / Math.Log(OMC(1) / OMC(2))
            RG0 = 0.5 / (KAPPA * WG * T)
            RG1 = Math.Sqrt(OMG(2) * MUE / (2.0 * KAPPA)) * FLG / (4.0 * F0 ^ 2)
            NUEG = Math.Log(RG0 / RG1) / Math.Log(OMG(1) / OMG(2))
            GAMC = (OMC(1) / OMC(2)) ^ 2
            AC(4) = (GAMC * NUEC + 0.25 * (0.5 - NUEC) * (4.0 - NUEC * (1.0 - GAMC ^ 2))) _
                  / (4.0 - NUEC - 0.25 * (0.5 - NUEC) * (4.0 - NUEC * (1.0 - GAMC ^ 2)))
            AC(3) = 0.25 * (0.5 - NUEC) * (1.0 + AC(4))
            AC(2) = (AC(4) - AC(3)) / GAMC
            AC(1) = AC(2) + GAMC * AC(3)
            GAMG = (OMG(1) / OMG(2)) ^ 2
            AG(4) = (GAMG * NUEG + 0.25 * (0.5 - NUEG) * (4.0 - NUEG * (1.0 - GAMG ^ 2))) / (4.0 - NUEG _
            - 0.25 * (0.5 - NUEG) * (4.0 - NUEG * (1.0 - GAMG ^ 2)))
            AG(3) = 0.25 * (0.5 - NUEG) * (1.0 + AG(4))
            AG(2) = (AG(4) - AG(3)) / GAMG
            AG(1) = AG(2) + GAMG * AG(3)

            '     - RESISTANCE OF CENTER CONDUCTOR                                  03960000

            If (OM <= OMC(1)) Then
                RC = RC0 * (1.0 + AC(1) * (OM / OMC(1)) ^ 2)
            ElseIf (OM <= OMC(2)) Then
                RC = RC1 * (OM / OMC(2)) ^ NUEC * (1.0 + AC(2) * (OMC(1) / OM) ^ 2 + AC(3) * (OM / OMC(2)) ^ 2)
            Else
                RC = Math.Sqrt(OM * MUE / (2.0 * KAPPA)) * FLC / (4.0 * F0 ^ 2) * (1.0 + AC(4) * (OMC(2) / OM) ^ 2)
            End If

            '     - RESISTANCE OF GROUND METALLIZATIONS                             04080000

            If (OM <= OMG(1)) Then
                RG = RG0 * (1.0 + AG(1) * (OM / OMG(1)) ^ 2)
            ElseIf (OM <= OMG(2)) Then
                RG = RG1 * (OM / OMG(2)) ^ NUEG * (1.0 + AG(2) * (OMG(1) / OM) ^ 2 + AG(3) * (OM / OMG(2)) ^ 2)
            Else
                RG = Math.Sqrt(OM * MUE / (2.0 * KAPPA)) * FLG / (4.0 * F0 ^ 2) * (1.0 + AG(4) * (OMG(2) / OM) ^ 2)
            End If

            '     - TOTAL RESISTANCE                                                04200000

            R = RC + RG

            '     * INDUCTANCE                                                      04240000
            '     - COEFFICIENTS ETC.                                               04260000
            OML(0) = 4.0 / (MUE * KAPPA * T * WG)
            OML(1) = 4.0 / (MUE * KAPPA * T * W)
            OML(2) = 18.0 / (MUE * KAPPA * T ^ 2)

            LDC0 = LDC(W, WG, T, S) + LINDHS
            LZ1 = LDC(W, 1.5 * W, T, S) + LINDHS - MUE / (4.0 * F1)
            LZ2 = Math.Sqrt(MUE / (2.0 * OML(2) * KAPPA)) * (FLC + FLG) / (4.0 * F0 ^ 2)

            NUEZ1 = Math.Log((LDC0 - LEINFT) / LZ1) / Math.Log(OML(0) / OML(1))
            NUEZ2 = Math.Log(LZ1 / LZ2) / Math.Log(OML(1) / OML(2))

            ETA(1) = (OML(0) / OML(1)) ^ 4 * NUEZ1 / (4.0 - NUEZ1)
            ETA(2) = (OML(0) / OML(1)) ^ 2 * NUEZ1 / (4.0 - NUEZ1)
            ETA(3) = (OML(1) / OML(2)) ^ 3 * (NUEZ2 - 0.5) / (NUEZ2 + 2.5)
            ETA(4) = (OML(1) / OML(2)) * (NUEZ2 + 0.5) / (NUEZ2 + 2.5)
            AL(3) = ((NUEZ2 - NUEZ1) * (1.0 + ETA(1)) * (1.0 - ETA(4)) _
           + 4.0 * ETA(2) + ETA(4) * (1.0 - 3.0 * ETA(1))) / ((NUEZ1 - NUEZ2) * (1.0 + ETA(1)) * (1.0 - ETA(3)) _
                      + 4.0 - ETA(3) * (1.0 - 3.0 * ETA(1)))
            AL(2) = ((1.0 - ETA(3)) * AL(3) - ETA(2) - ETA(4)) / (1.0 + ETA(1))
            AL(4) = -OML(2) / OML(1) * (ETA(4) + ETA(3) * AL(3))
            AL(5) = (OML(1) / OML(2)) ^ 2 * AL(3) + AL(4)
            AL(1) = NUEZ1 / (4.0 - NUEZ1) + ETA(2) * AL(2)
            AL(0) = (1.0 - LEINFT / LDC0) * (AL(1) + (OML(0) / OML(1)) ^ 2 * AL(2))

            '     - INDUCTANCE CALCULATION                                          04540000

            If (OM <= OML(0)) Then
                LIND = LDC0 * (1.0 + AL(0) * (OM / OML(0)) ^ 2)
            ElseIf (OM <= OML(1)) Then
                LIND = LEINFT + LZ1 * (OM / OML(1)) ^ NUEZ1 * (1.0 + AL(1) * (OML(0) / OM) ^ 2 + AL(2) * (OM / OML(1)) ^ 2)
            ElseIf (OM <= OML(2)) Then
                LIND = LEINFT + LZ2 * (OM / OML(2)) ^ NUEZ2 * (1.0 + AL(3) * (OML(1) / OM) ^ 2 + AL(4) * (OM / OML(2)))
            Else
                LIND = LEINFT + Math.Sqrt(MUE / (2.0 * OM * KAPPA)) * (FLG + FLC) / (4.0 * F0 ^ 2) * (1.0 + AL(5) * (OML(2) / OM))
            End If

            '     * PROPAGATION QUANTITIES                                          04700000

1500:       If (F >= UNFLOW) Then
                'ZR = toComplex(1.0, 0.0) - toComplex(0.0, 1.0) * R / (OM * LIND)
                'YG = toComplex(1.0, 0.0) - toComplex(0.0, 1.0) * GCOND / (OM * CAP)
                'KZ = OM * Math.Sqrt(LIND * CAP) * Complex_Number_Class.Sqrt(ZR * YG)
                'ZW = Math.Sqrt(LIND / CAP) * Complex_Number_Class.Sqrt(ZR / YG)
                'BETA0 = OM * Math.Sqrt(MUE * E0)

                'BETA = KZ.Re
                'EREFF = (BETA / BETA0) ^ 2
                'ALPHA = -(KZ.Im)
                'ADBMM = ALPHA * 0.02 * Math.Log10(Math.Exp(1.0))

                '*** from Matlab code
                'G=real(gamma.^2./(i.*omega.*L+R));
                'C=imag(gamma.^2./((i.*omega.*L+R).*omega));

                GCOND = ((GAM1 * GAM1) / (toComplex(0.0, 1.0) * OM * LIND + R)).Re
                CAP = ((GAM1 * GAM1) / ((toComplex(0.0, 1.0) * OM * LIND + R) * OM)).Im

                'CAP = 2.0 * E0 * (FUP + ER * (KKS1 + 2.0 * F0HS))
                'GCOND = OM * TANDE * 2.0 * E0 * ER * (KKS1 + 2.0 * F0HS)

                'Fup=F(t,s,Kk1,Ksk1,pc0,pc1,pc2);
                'Flow=(Kk1./Ksk1);

                'er=(C-2.*e0.*Fup)./(2.*e0.*Flow);
                'td=G./(2.*omega.*e0.*er.*Flow);
                Dim Flow As Double
                Flow = (KKS1 + 2.0 * F0HS)

                ER = (CAP - 2.0 * E0 * FUP) / (2 * E0 * Flow)
                TANDE = GCOND / (2.0 * OM * E0 * ER * Flow)

            Else
                ZW = 0.0
                BETA = 0.0
                EREFF = 0.0
                ALPHA = 0.0
                ADBMM = 0.0
                ER = 0.0
                TANDE = 0.0
            End If

        End Sub
        'Private Sub CPWPAR_Error(ByVal IER As Integer, ByRef MechanismList1 As MechanismList)
        '    If IER > 0 Then MechanismList1.ErrorReport = "Error " + IER.ToString + " reported in CPWPAR"
        '    If IER = 50 Then MechanismList1.ErrorReport = "WARNING: FREQUENCY EXCEEDS QUASI-TEM LIMIT (ACCURACY DETERIORATES) F > (10*SQRT(MUE0*ER*E0)*(W+2*S))**(-1) "
        '    If IER = 51 Then MechanismList1.ErrorReport = "WARNING: SUBSTRATE THICKNESS TOO SMALL (ACCURACY MAY DETERIORATE) HS .lt. W + 2*S   "
        '    If IER = 52 Then MechanismList1.ErrorReport = "WARNING: FREQUENCY LOWER THAN UNDERFLOW"
        '    If IER = 101 Then MechanismList1.ErrorReport = "W .LE. UNDERFLOW"
        '    If IER = 102 Then MechanismList1.ErrorReport = "S .LE. UNDERFLOW"
        '    If IER = 103 Then MechanismList1.ErrorReport = "WG.LE. UNDERFLOW"
        '    If IER = 104 Then MechanismList1.ErrorReport = "T .LE. UNDERFLOW OR, IF KAPPA .GT.D20, T .LT. 0"
        '    If IER = 105 Then MechanismList1.ErrorReport = "KAPPA .LE. UNDERFLOW"
        '    If IER = 106 Then MechanismList1.ErrorReport = "ER .LT. 1"
        '    If IER = 107 Then MechanismList1.ErrorReport = "F .LT. 0"
        '    If IER = 108 Then MechanismList1.ErrorReport = "HS .LE. 0.012*W  (LOWER VALUES WOULD CAUSE OVERFLOW PROBLEMS)"
        '    If IER = 201 Then MechanismList1.ErrorReport = "WG .LE. W"
        '    If IER = 202 Then MechanismList1.ErrorReport = "T .GE. 4.5*W"
        'End Sub
        'Private Function ELINK(ByVal M As Double) As Double
        '    '     * COMPLETE ELLIPTIC INTEGRAL OF 1ST KIND K(M)                     05390000
        '    '       ELINK (M) = ELINK (K^2) WITH 0 < M < 1                         05400000

        '    '       (M<=0 OR M>=1 EXCLUDED DUE TO ERROR HANDLING OF 'S' AND 'W' 05420000
        '    '        -> IER=101 AND IER=102)

        '    '       POLYNOMIAL APPROXIMATION WITH LESS THAN 2.0e-8 ERROR             05450000
        '    '       - ACCORDING TO ABRAMOWITZ AND STEGUN (HANDBOOK OF MATHEMATICAL  05460000
        '    '         FUNCTIONS), DOVER PUBL., 1ST ED., P.591, EQN.(17.3.34)        05470000

        '    Dim M1 As Double, A(4) As Double, B(4) As Double, SA As Double, SB As Double
        '    A(0) = 1.38629436112
        '    A(1) = 0.09666344259
        '    A(2) = 0.03590092383
        '    A(3) = 0.03742563713
        '    A(4) = 0.01451196212
        '    B(0) = 0.5
        '    B(1) = 0.12498593597
        '    B(2) = 0.06880248576
        '    B(3) = 0.03328355346
        '    B(4) = 0.00441787012

        '    M1 = 1.0 - M

        '    SA = A(0) + A(1) * M1 + A(2) * M1 * M1 + A(3) * M1 ^ 3 + A(4) * M1 ^ 4
        '    SB = B(0) + B(1) * M1 + B(2) * M1 * M1 + B(3) * M1 ^ 3 + B(4) * M1 ^ 4

        '    ELINK = SA - SB * Math.Log(M1)

        '    Return ELINK
        'End Function
        'Private Function ELINE(ByVal M As Double) As Double

        '    '     * COMPLETE ELLIPTIC INTEGRAL OF 2ND KIND E(M)                     05760000
        '    '       ELINE (M) = ELINE (K^2) WITH 0 < M < 1                         05770000

        '    '       (M<=0 OR M>=1 EXCLUDED DUE TO ERROR HANDLING OF 'S' AND 'W' 05790000
        '    '        -> IER=101 AND IER=102)                                        05800000

        '    '       POLYNOMIAL APPROXIMATION WITH LESS THAN 2.0e-8 ERROR             05820000
        '    '       - ACCORDING TO ABRAMOWITZ AND STEGUN (HANDBOOK OF MATHEMATICAL  05830000
        '    '         FUNCTIONS), DOVER PUBL., 1ST ED., P.592, EQN.(17.3.36)        05840000

        '    Dim M1 As Double, A(4) As Double, B(4) As Double, SA As Double, SB As Double

        '    A(1) = 0.44325141463
        '    A(2) = 0.0626060122
        '    A(3) = 0.04757383546
        '    A(4) = 0.01736506451
        '    B(1) = 0.2499836831
        '    B(2) = 0.09200180037
        '    B(3) = 0.04069697526
        '    B(4) = 0.00526449639

        '    M1 = 1.0 - M

        '    SA = 1.0 + A(1) * M1 + A(2) * M1 * M1 + A(3) * M1 ^ 3 + A(4) * M1 ^ 4
        '    SB = B(1) * M1 + B(2) * M1 * M1 + B(3) * M1 ^ 3 + B(4) * M1 ^ 4

        '    ELINE = SA - SB * Math.Log(M1)

        '    Return ELINE
        'End Function
        'Private Function LDC(ByVal W1 As Double, ByVal W2 As Double, ByVal T As Double, ByVal S As Double) As Double

        '    '     * DC INDUCTANCE OF CPW WITH FINITE GROUND PLANES (EXACT)          06110000

        '    Dim PI As Double = Math.PI
        '    Dim MUE As Double = 0.0000004 * PI

        '    LDC = MUE / (8.0 * PI) * (4.0 / W1 ^ 2 * GL(W1, T) + 1.0 / W2 ^ 2 * (GL(W1 + 2.0 * S, T) + GL(W1 + 2.0 * W2 + 2.0 * S, T) _
        ' + 2.0 * GL(W2, T) - 2.0 * GL(W1 + 2.0 * S + W2, T)) - 4.0 / (W1 * W2) * (GL(W1 + W2 + S, T) - GL(W1 + S, T) + GL(S, T) - GL(S + W2, T)))

        '    Return LDC
        'End Function
        'Private Function GL(ByVal X As Double, ByVal T As Double) As Double

        '    '     * AUXILIARY FUNCTION FOR SUBROUTINE 'LDC'                         06310000

        '    Dim PI As Double = Math.PI
        '    Dim MUE As Double = 0.0000004 * PI

        '    GL = (T ^ 2 / 12.0 - 0.5 * X ^ 2) * Math.Log(1.0 + (X / T) ^ 2) + X ^ 4 / (12.0 * T ^ 2) * Math.Log(1.0 + (T / X) ^ 2) - 2.0 / 3.0 * X * T * (Math.Atan(X / T) + (X / T) ^ 2 * Math.Atan(T / X))

        '    Return GL
        'End Function

    End Class

    ''' <summary>
    ''' Post processor for adding determineing epsilon of dielectric from CPW measurement.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_TanD_From_Epsilon
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Material relative dielectric constant (.meas or .complex)"    'Dimensionless
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(5) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".complex" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".sumofparameters" : FileExtensions(4) = ".meas_archive" : FileExtensions(5) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Convert complex epsilon to Re(eps), tan delta"
                PullDownList(1) = "Convert Re(eps), tan delta to complex epsilon"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor converts complex relative dielectric constant of a material to relative diectric constant and tan delta."
                myDescription(1) = "Conversion can be performed in either direction. Tan delta is placed in imaginary part."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".complex"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Convert between relative dielectric constant formats."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            'The mechanism values.

            Dim EpsEff As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex") : EpsEff = MechValues(0).getSParams(MechanismList1)     'myNameList(5) = "Measured CPW effective dielectric constant (.meas or .complex)"    'Dimensionless
            Dim EpsSubstrate As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")   'This will be the result of the calculation
            EpsSubstrate.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output

            'Check the input to see if it has the right number of columns.
            If EpsEff.NCols <> 3 Then MechanismList1.ErrorReport = "The effective dielctric constant does not have three columns." : Return ToArray(EpsSubstrate)

            'Step through the frequencies and generate the scattering parameters of the junction.
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows

                'Calculate and store the result
                Dim FreqInGHz As Double = MechanismList1.FrequencyList(k)
                Dim EpsEffR As Double = EpsEff(k, 2)
                Dim EpsEffI As Double = EpsEff(k, 3)

                'Change the output format.
                If myPullDownSelection1 = 1 Then    'Convert to Re(eps), tan delta
                    If EpsEffR <> 0.0 Then
                        EpsSubstrate(k, 2) = EpsEffR
                        EpsSubstrate(k, 3) = -EpsEffI / EpsEffR
                    End If
                Else                                'Convert back
                    EpsSubstrate(k, 2) = EpsEffR
                    EpsSubstrate(k, 3) = -EpsEffI * EpsEffR
                End If

            Next k

            'Return the values to the caller. That's all folks!
            Return ToArray(EpsSubstrate)

        End Function

    End Class


    ''' <summary>
    ''' Post processor implementing IBM open-short and Pad short open parasictic extraction
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_IBM_Open_Short
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Corrected transistor measurement"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(2) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Corrected open measurement (.s2p or .meas)"    'Has 2x2 s-parameters of opens connecting to transistor
                myNameList(1) = "Corrected short measurement (.s2p or .meas)"    'Has 2x2 s-parameters of shorts connecting to transistor
                myNameList(2) = "Corrected pad measurement (.s2p or .meas)"    'Has 2x2 s-parameters of pads connecting to transistor
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(6) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                FileExtensions(3) = ".model" : FileExtensions(4) = ".model_archive" : FileExtensions(5) = ".cascade" : FileExtensions(6) = ".cascade_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(5) As String
                PullDownList(0) = "Open-short extraction"
                PullDownList(1) = "Pad-short-open extraction"
                PullDownList(2) = "Short-open extraction"
                PullDownList(3) = "Open (Y-parameter) extraction"
                PullDownList(4) = "Short (Z-parameter) extraction"
                PullDownList(5) = "No extraction"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String   'No second pulldown list please
                PullDownList(0) = "Full extraction"
                PullDownList(1) = "Ignore port-to-port coupling"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String  'No third pulldown list please
                PullDownList(0) = "Return scattering parameters"
                PullDownList(1) = "Return approximate transisitor parameters"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor uses pad, open, and short measurement to remove extrisic transistor parasitics. The pad, open, short and transistor measurements should have already been corrected to a 50 ohm reference impedance."
                myDescription(2) = "The post processor returns approximate values for Cgs in pF, Rin in ohms, Gds in mS, Cdg in pF, Cds in pF, and Gm in mS in a .complex file if the ""Return approximate transisitor parameters"" option is selected. These approximations are derived from Cgs~(Im(Y12)+Im(Y11))/w, Rin~Re(H11), gds~Re(Y22), cdg~-Im(Y12)/w, cds~(Im(Y22)+Im(Y21))/w, gm~Re(Y21). These are useful as metrics for evaluating the quality of the measurements."
                myDescription(4) = "The approach follows L.F. Tiemeijer, R.J. Havens, A.M. Jansman, and Y. Bouttement, ""Comparison of the ""Pad-Open-Short"" and ""Open-Short-Load"" Deembedding Techniques for Accurate On-Wafer RF Characterization of High-Quality Passives,"" IEEE Trans. on Microwave Theory and Tech., vol. 53, no. 2, pp. 723-729, Feb. 2005. The module was authored by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Select Case myPullDownSelection3
                    Case -1, 0  'Scattering parameters
                        Return ".s2p"
                    Case Else
                        Return ".complex"
                End Select
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Extraction of extrisic transistor parasitics"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)  'Open
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)  'Short
            Dim myRealMatrix2 As RealMatrix : myRealMatrix2 = MechValues(2).getSParams(MechanismList1)  'Pad
            Dim myRealMatrix3 As RealMatrix : myRealMatrix3 = MultipleModelInput(0).getSParams(MechanismList1)  'This is the transistor data to be calibrated.

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "The first input to the Post Processor was not a 2x2 scattering-parameter matrix"
            If myRealMatrix1.NCols <> 9 Then MechanismList1.ErrorReport = "The second input to the Post Processor was not a 2x2 scattering-parameter matrix"
            If myRealMatrix2.NCols <> 9 Then MechanismList1.ErrorReport = "The third input to the Post Processor was not a 2x2 scattering-parameter matrix"
            If myRealMatrix3.NCols <> 9 Then MechanismList1.ErrorReport = "The transistor input to the Post Processor was not a 2x2 scattering-parameter matrix"
            If myRealMatrix1.NRows <> myRealMatrix0.NRows Then MechanismList1.ErrorReport = "The first and second inputs to the Post Processor do not have the same number of rows"
            If myRealMatrix2.NRows <> myRealMatrix0.NRows Then MechanismList1.ErrorReport = "The first and third inputs to the Post Processor do not have the same number of rows"
            If myRealMatrix3.NRows <> myRealMatrix0.NRows Then MechanismList1.ErrorReport = "The transistor data input to the Post Processor does not have the same number of rows"
            Dim SameFreqs As Boolean = True
            For i As Integer = 1 To myRealMatrix0.NRows
                If myRealMatrix0(i, 1) <> myRealMatrix1(i, 1) Then SameFreqs = False
                If myRealMatrix0(i, 1) <> myRealMatrix2(i, 1) Then SameFreqs = False
                If myRealMatrix0(i, 1) <> myRealMatrix3(i, 1) Then SameFreqs = False
            Next
            If Not SameFreqs Then MechanismList1.ErrorReport = "The frequencies in the inputs to thePost Processor do not have the same inputs"

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrixResult.Vector(1) = myRealMatrix3.Vector(1) : myRealMatrixResult.DataType = ".s2p"
            Dim myRealMatrixParams As New RealMatrix(myRealMatrix0.NRows, 13) : myRealMatrixParams.Vector(1) = myRealMatrix3.Vector(1) : myRealMatrixParams.DataType = ".complex"
            Dim Spad As New ComplexMatrix(2, 2), Sopen As New ComplexMatrix(2, 2), Sshort As New ComplexMatrix(2, 2), Sdut As New ComplexMatrix(2, 2), Strans As New ComplexMatrix(2, 2)
            Dim Ypad As New ComplexMatrix(2, 2), Yopen As New ComplexMatrix(2, 2), Yshort As New ComplexMatrix(2, 2), Ydut As New ComplexMatrix(2, 2), Ytrans As New ComplexMatrix(2, 2)
            Dim Zpad As New ComplexMatrix(2, 2), Zopen As New ComplexMatrix(2, 2), Zshort As New ComplexMatrix(2, 2), Zdut As New ComplexMatrix(2, 2), Ztrans As New ComplexMatrix(2, 2)

            For i As Integer = 1 To myRealMatrix0.NRows

                'Get the scattering parameters of the input
                Sopen = myRealMatrix0.SMatrix(i) : Sshort = myRealMatrix1.SMatrix(i) : Spad = myRealMatrix2.SMatrix(i) : Sdut = myRealMatrix3.SMatrix(i)

                'Ignore coupling if so directed by user
                If myPullDownSelection2 = 1 Then
                    Spad(1, 2) = toComplex(0.0, 0.0) : Spad(2, 1) = toComplex(0.0, 0.0)
                    Sopen(1, 2) = toComplex(0.0, 0.0) : Sopen(2, 1) = toComplex(0.0, 0.0)
                    Sshort(1, 2) = toComplex(0.0, 0.0) : Sshort(2, 1) = toComplex(0.0, 0.0)
                End If

                'Translate to Y parameters
                Ydut = YFromS(Sdut) : Zdut = ZFromS(Sdut)

                'Apply IBM-like extraction formulas
                Select Case myPullDownSelection1
                    Case -1, 0  'Open-short extraction
                        Yopen = YFromS(Sopen) : Yshort = YFromS(Sshort)
                        Ytrans = (((Ydut - Yopen) ^ -1) - (Yshort - Yopen) ^ -1) ^ -1
                        Strans = SFromY(Ytrans)
                    Case 1   'Pad-short-open extraction
                        Yopen = YFromS(Sopen) : Yshort = YFromS(Sshort) : Ypad = YFromS(Spad)
                        Ytrans = (((Ydut - Ypad) ^ -1) - (Yshort - Ypad) ^ -1) ^ -1 - (((Yopen - Ypad) ^ -1) - (Yshort - Ypad) ^ -1) ^ -1
                        Strans = SFromY(Ytrans)
                    Case 2      'Short-open extaction
                        Zopen = ZFromS(Sopen) : Zshort = ZFromS(Sshort)
                        Ytrans = (Zdut - Zshort) ^ -1 - (Zopen - Zshort) ^ -1
                        Strans = SFromY(Ytrans)
                    Case 3 'Open extraction
                        Yopen = YFromS(Sopen)
                        Ytrans = Ydut - Yopen
                        Strans = SFromY(Ytrans)
                    Case 4 'Short extraction
                        Zshort = ZFromS(Sshort)
                        Ztrans = Zdut - Zshort
                        Strans = SFromY(Ztrans)
                        Ytrans = YFromS(Strans)
                    Case Else   'No extraction
                        Strans.Fill(Sdut)
                        Ytrans = YFromS(Strans)
                End Select

                'Stuff the average results into the scattering parameter output.
                myRealMatrixResult.SMatrix(i) = Strans

                'Also, calcuate the approximate transistor parameters in case the user wants that.
                Dim w As Double = 2.0 * Math.PI * myRealMatrixParams(i, 1) * 1000000000.0
                myRealMatrixParams(i, 2) = ((Ytrans(1, 2).Im + Ytrans(1, 1).Im) / w) * (1000000000000.0 / 50.0) 'Cgs in pF
                myRealMatrixParams(i, 4) = ((toComplex(1.0, 0.0) / Ytrans(1, 1)).Re) * (1.0 * 50.0) 'Rin in ohms
                myRealMatrixParams(i, 6) = Ytrans(2, 2).Re * (1000.0 / 50.0) 'Gds in mS
                myRealMatrixParams(i, 8) = (-Ytrans(1, 2).Im / w) * (1000000000000.0 / 50.0) 'Cdg in pF
                myRealMatrixParams(i, 10) = ((Ytrans(2, 2).Im + Ytrans(2, 1).Im) / w) * (1000000000000.0 / 50.0) 'Cds in pF
                myRealMatrixParams(i, 12) = Ytrans(2, 1).Re * (1000.0 / 50.0) 'Gm in mS

            Next i

            'That's all folks!
            Select Case myPullDownSelection3
                Case -1, 0  'Scattering parameters
                    Return ToArray(myRealMatrixResult)
                Case Else
                    Return ToArray(myRealMatrixParams)
            End Select

        End Function

    End Class

    ''' <summary>
    ''' Post processor implementing Sorin's T-Line de-embedding algorithm
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Sorin_TLineDeembed
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Corrected transistor measurement"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Corrected short-line measurement (.s2p or .meas)"    'Has 2x2 s-parameters of opens connecting to transistor
                myNameList(1) = "Corrected long-line measurement (.s2p or .meas)"    'Has 2x2 s-parameters of shorts connecting to transistor
                myNameList(2) = "Length of short line (.parameter)"    'Has length of short line
                myNameList(3) = "Length of long line (.parameter)"    'Has length of short line
                myNameList(4) = "Length of port 1 transistor access line (.parameter)"    'Has length of transistor access line
                myNameList(5) = "Length of port 2 transistor access line (.parameter)"    'Has length of transistor access line
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(7) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                FileExtensions(3) = ".model" : FileExtensions(4) = ".model_archive" : FileExtensions(5) = ".cascade" : FileExtensions(6) = ".cascade_archive" : FileExtensions(7) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing   'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(2) As String  'No third pulldown list please
                PullDownList(0) = "Return scattering parameters"
                PullDownList(1) = "Return approximate transisitor parameters"
                PullDownList(2) = "Return approximate inductor parameters"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(8) As String
                myDescription(0) = "This post processor uses two line measurements to de-embed the pads and access lines from transistor measurements. The measurements should have already been corrected to a 50 ohm reference impedance. The multiline TRL algorithm should give better results if standards are available."
                myDescription(2) = "When scattering parameters are selected, the post processor returns the de-embedded scattering parameters of device."
                myDescription(4) = "When transistor parameters are choosen, the post processor returns approximate values for Cgs in pF, Rin in ohms, Gds in mS, Cdg in pF, Cds in pF, Gm in mS, Z0 in ohms, and epsilon effective in a .complex file. These approximations are derived from Cgs~(Im(Y12)+Im(Y11))/w, Rin~Re(H11), gds~Re(Y22), cdg~-Im(Y12)/w, cds~(Im(Y22)+Im(Y21))/w, gm~Re(Y21). These are useful as metrics for evaluating the quality of transistor measurements."
                myDescription(6) = "When inductor paramters are choosen, the post processor returns approximate values for R11 in ohms, L11 in nF, Q11, G10 in mS, C10 in pF, R22 in ohms, L22 in nF, Q22, G20 in mS, C20 in pF, R12 in ohms, L12 in nF,  Z0 in ohms and epsilon effective in a .complex file. These approximations are derived from R11+jwL11~1/Y11, Q11=-imag(Y11)/real(Y11), G10+jwC10~Y11+Y12, R12+jwL12~-1/Y12, etc."
                myDescription(8) = "The approach follows A.M. Mangan, S.P.Voinigescu, M.T. Yand, and M. Tazlauanu, ""De-embedding transmission line measurements for accurate modeling of IC designs,"" IEEE Trans. Electron Dev., Vol. 53, No. 2, pp. 235-241, Feb. 2006. Formulas for the inductor parameters were supplied by Vikas Shilimkar. The module was authored by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Select Case myPullDownSelection3
                    Case -1, 0  'Scattering parameters
                        Return ".s2p"
                    Case Else
                        Return ".complex"
                End Select
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "De-embed pad and transmission line from SOLT transistor or inductor measurement"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)  'Short line
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)  'Long line
            Dim ShortLength As Double = MechValues(2).MechanismValue(MechanismList1)
            Dim LongLength As Double = MechValues(3).MechanismValue(MechanismList1)
            Dim AccessLength1 As Double = MechValues(4).MechanismValue(MechanismList1)
            Dim AccessLength2 As Double = MechValues(5).MechanismValue(MechanismList1)
            Dim myRealMatrix3 As RealMatrix : myRealMatrix3 = MultipleModelInput(0).getSParams(MechanismList1)  'This is the transistor data to be calibrated.

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "The first input to the Post Processor was not a 2x2 scattering-parameter matrix"
            If myRealMatrix1.NCols <> 9 Then MechanismList1.ErrorReport = "The second input to the Post Processor was not a 2x2 scattering-parameter matrix"
            If myRealMatrix3.NCols <> 9 Then MechanismList1.ErrorReport = "The transistor input to the Post Processor was not a 2x2 scattering-parameter matrix"
            If myRealMatrix1.NRows <> myRealMatrix0.NRows Then MechanismList1.ErrorReport = "The first and second inputs to the Post Processor do not have the same number of rows"
            If myRealMatrix3.NRows <> myRealMatrix0.NRows Then MechanismList1.ErrorReport = "The transistor data input to the Post Processor does not have the same number of rows"
            Dim SameFreqs As Boolean = True
            For i As Integer = 1 To myRealMatrix0.NRows
                If myRealMatrix0(i, 1) <> myRealMatrix1(i, 1) Then SameFreqs = False
                If myRealMatrix0(i, 1) <> myRealMatrix3(i, 1) Then SameFreqs = False
            Next
            If Not SameFreqs Then MechanismList1.ErrorReport = "The frequencies in the inputs to thePost Processor do not have the same inputs"

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 9)
            Select Case myPullDownSelection3
                Case -1, 0  'Scattering parameters
                    myRealMatrixResult.ReDimension(myRealMatrix0.NRows, 9)
                    myRealMatrixResult.DataType = ".s2p"
                Case 1      'Transistor parameters
                    myRealMatrixResult.ReDimension(myRealMatrix0.NRows, 17)
                    myRealMatrixResult.DataType = ".complex"
                Case Else   'Inductor parameters
                    myRealMatrixResult.ReDimension(myRealMatrix0.NRows, 29)
                    myRealMatrixResult.DataType = ".complex"
            End Select
            myRealMatrixResult.Vector(1) = myRealMatrix3.Vector(1)

            'Other usefule matrices.
            Dim Slong As New ComplexMatrix(2, 2), Sshort As New ComplexMatrix(2, 2), Sdut As New ComplexMatrix(2, 2), Strans As New ComplexMatrix(2, 2)
            Dim Ylong As New ComplexMatrix(2, 2), Yshort As New ComplexMatrix(2, 2), Yh As New ComplexMatrix(2, 2), YhSwap As New ComplexMatrix(2, 2), Y As New ComplexMatrix(2, 2), Ydif As New ComplexMatrix(2, 2), Ytrans As New ComplexMatrix(2, 2)
            Dim Zlong As New ComplexMatrix(2, 2), Zshort As New ComplexMatrix(2, 2), Zdut As New ComplexMatrix(2, 2), Ztrans As New ComplexMatrix(2, 2)
            Dim Mlong As New ComplexMatrix(2, 2), Mshort As New ComplexMatrix(2, 2), Mh As New ComplexMatrix(2, 2), M As New ComplexMatrix(2, 2), MP1 As New ComplexMatrix(2, 2), MTline1 As New ComplexMatrix(2, 2), MTline2 As New ComplexMatrix(2, 2), MP1inv As New ComplexMatrix(2, 2), Mdut As New ComplexMatrix(2, 2), Mtrans As New ComplexMatrix(2, 2)
            Dim ABCDlong As New ComplexMatrix(2, 2), ABCDshort As New ComplexMatrix(2, 2), ABCDdut As New ComplexMatrix(2, 2), ABCDtrans As New ComplexMatrix(2, 2)
            Dim YL As New Complex(0.0, 0.0), gammaL As New Complex(0.0, 0.0)

            For i As Integer = 1 To myRealMatrix0.NRows

                'Get the scattering parameters of the input
                Sshort = myRealMatrix0.SMatrix(i) : Slong = myRealMatrix1.SMatrix(i) : Sdut = myRealMatrix3.SMatrix(i)

                'Average the scattering parameters of the short and long lines by taking advantage of symmetry
                Sshort(1, 1) = 0.5 * (Sshort(1, 1) + Sshort(2, 2)) : Sshort(2, 2) = Sshort(1, 1)
                Sshort(2, 1) = 0.5 * (Sshort(2, 1) + Sshort(1, 2)) : Sshort(1, 2) = Sshort(2, 1)
                Slong(1, 1) = 0.5 * (Slong(1, 1) + Slong(2, 2)) : Slong(2, 2) = Slong(1, 1)
                Slong(2, 1) = 0.5 * (Slong(2, 1) + Slong(1, 2)) : Slong(1, 2) = Slong(2, 1)

                'Translate to ABCD parameters
                Mshort = ABCDFromS(Sshort) : Mlong = ABCDFromS(Slong) : Mdut = ABCDFromS(Sdut)

                'Mh from (4)
                Mh = Mlong * (Mshort ^ -1)

                'Get Y and Yh for (7) and (8)
                Yh = YFromABCD(Mh)
                YhSwap(1, 1) = Yh(2, 2) : YhSwap(2, 2) = Yh(1, 1) : YhSwap(1, 2) = Yh(2, 1) : YhSwap(2, 1) = Yh(1, 2)
                Y = 0.5 * (Yh + YhSwap) '(7)
                Ydif = Yh - Y   'Determine YL from (7)
                YL = 0.5 * (Ydif(1, 1) - Ydif(2, 2))

                'Get MP1 (5)
                MP1(1, 1) = 1.0 : MP1(2, 2) = 1.0 : MP1(2, 1) = YL : MP1(1, 2) = toComplex(0.0, 0.0)
                MP1inv.Fill(MP1) : MP1inv(2, 1) = -YL

                'Get M (6)
                M = MP1inv * Mh * MP1

                'Determine transmission line parameters
                Dim Zc As New Complex(0.0, 0.0) : Zc = Sqrt(M(1, 2) / M(2, 1))
                Dim eps As New Complex(MechanismList1.EpsEff(i, 2), MechanismList1.EpsEff(i, 3))    'The estimate from the user for epsilon effective
                Dim gammaL_user As New Complex(0.0, 0.0) : gammaL_user = (2 * Math.PI * MechanismList1.FrequencyList(i) * 1000000000.0 / 297500000.0) * toComplex(0.0, 1.0) * Sqrt(eps) * (LongLength - ShortLength)    'User estimate for gamma
                Dim N As Integer = CInt(gammaL_user.Im / (2.0 * Math.PI))   'Figure out approximately what the correct number of 2 pi's is for gammaL
                Dim gammaLc_est As New Complex(0.0, 0.0) : gammaLc_est = arcCosh(M(1, 1))     'From (10)
                Dim gammaLc As New Complex(gammaLc_est.Re, gammaLc_est.Im)
                Dim gammaLs_est As New Complex(0.0, 0.0) : gammaLs_est = arcSinh(Sqrt(M(1, 2) * M(2, 1)))    'From sinh. What about root choices??
                Dim gammaLs As New Complex(gammaLs_est.Re, gammaLs_est.Im)
                'If gammal is a solution of A=arcCosh(gammal), so is j 2 N pi +/- gammal. Try to find the closest solution.
                'If gammal is a solution of A=arcSinh(gammal), so is j 2 N pi + gammal and j 2 N pi + (j pi - gammal). Try to find the closest solution.
                For k As Integer = 0 To N + 1
                    If Abs(toComplex(0.0, 2 * k * Math.PI) + gammaLc_est - gammaL_user) < Abs(gammaLc - gammaL_user) Then gammaLc = toComplex(0.0, 2 * k * Math.PI) + gammaLc_est
                    If Abs(toComplex(0.0, 2 * k * Math.PI) - gammaLc_est - gammaL_user) < Abs(gammaLc - gammaL_user) Then gammaLc = toComplex(0.0, 2 * k * Math.PI) - gammaLc_est
                    If Abs(toComplex(0.0, 2 * k * Math.PI) + gammaLs_est - gammaL_user) < Abs(gammaLs - gammaL_user) Then gammaLs = toComplex(0.0, 2 * k * Math.PI) + gammaLs_est
                    If Abs(toComplex(0.0, (2 * k + 1) * Math.PI) - gammaLs_est - gammaL_user) < Abs(gammaLs - gammaL_user) Then gammaLs = toComplex(0.0, (2 * k + 1) * Math.PI) - gammaLs_est
                Next k
                If i = 1 Then   'First time, just use cosh
                    gammaL = gammaLc
                Else            'Use a weighted combination of cosh and sinh
                    Dim Wc As Double = Abs(M(1, 2) * M(2, 1))   'give cosh solution sinh^2 weighting
                    Dim Ws As Double = Abs(M(1, 1)) : Ws = Ws * Ws  'give sinh solution cosh^2 weighting
                    'Weighted result
                    'gammaL = (gammaLc * Wc + gammaLs * Ws) / (Wc + Ws)
                    'Result from sinh (does not yet seem like it is getting best root choices??
                    'gammaL = gammaLs
                    'Result from cosh (seems to be working)
                    gammaL = gammaLc
                End If

                'Build up ABCD matrices for access lines
                MTline1(1, 1) = Cosh(gammaL * AccessLength1 / (LongLength - ShortLength)) : MTline1(2, 2) = MTline1(1, 1)
                MTline1(1, 2) = Zc * Sinh(gammaL * AccessLength1 / (LongLength - ShortLength))
                MTline1(2, 1) = Sinh(gammaL * AccessLength1 / (LongLength - ShortLength)) / Zc
                MTline2(1, 1) = Cosh(gammaL * AccessLength2 / (LongLength - ShortLength)) : MTline2(2, 2) = MTline2(1, 1)
                MTline2(1, 2) = Zc * Sinh(gammaL * AccessLength2 / (LongLength - ShortLength))
                MTline2(2, 1) = Sinh(gammaL * AccessLength2 / (LongLength - ShortLength)) / Zc

                'Remove the pads and transmission lines from the transistor measurement
                Mtrans = ((MP1 * MTline1) ^ -1) * Mdut * ((MTline2 * MP1) ^ -1)

                'Convert transistor measurement to scattering parameters
                Ytrans = YFromABCD(Mtrans)
                Strans = SFromY(Ytrans)

                'Also, calcuate the approximate transistor parameters in case the user wants that.
                Dim w As Double = 2.0 * Math.PI * myRealMatrixResult(i, 1) * 1000000000.0
                Dim eps_eff As New Complex(0.0, 0.0)
                eps_eff = -((297500000.0 / (2 * Math.PI * MechanismList1.FrequencyList(i) * 1000000000.0)) * gammaL / (LongLength - ShortLength)) ^ 2

                'Fill the next row of the output matrix myRealMatrixResult
                Select Case myPullDownSelection3
                    Case -1, 0  'Scattering parameters
                        'Stuff the average results into the scattering parameter output.
                        myRealMatrixResult.SMatrix(i) = Strans

                    Case 1      'Transistor parameters

                        myRealMatrixResult(i, 2) = ((Ytrans(1, 2).Im + Ytrans(1, 1).Im) / w) * (1000000000000.0 / 50.0) 'Cgs in pF
                        myRealMatrixResult(i, 4) = ((toComplex(1.0, 0.0) / Ytrans(1, 1)).Re) * (1.0 * 50.0) 'Rin in ohms
                        myRealMatrixResult(i, 6) = Ytrans(2, 2).Re * (1000.0 / 50.0) 'Gds in mS
                        myRealMatrixResult(i, 8) = (-Ytrans(1, 2).Im / w) * (1000000000000.0 / 50.0) 'Cdg in pF
                        myRealMatrixResult(i, 10) = ((Ytrans(2, 2).Im + Ytrans(2, 1).Im) / w) * (1000000000000.0 / 50.0) 'Cds in pF
                        myRealMatrixResult(i, 12) = Ytrans(2, 1).Re * (1000.0 / 50.0) 'Gm in mS

                        myRealMatrixResult(i, 14) = 50.0 * (Zc.Re) 'Z0 in ohms
                        myRealMatrixResult(i, 15) = 50.0 * (Zc.Im) 'Z0 in ohms
                        myRealMatrixResult(i, 16) = eps_eff.Re 'epsilon effecitve
                        myRealMatrixResult(i, 17) = eps_eff.Im 'epsilon effecitve

                    Case Else   'Inductor parameters

                        Dim Y12 As New Complex(0.0, 0.0) : Y12 = 0.5 * (Ytrans(1, 2) + Ytrans(1, 2)) 'Take advantage of reciprocity

                        myRealMatrixResult(i, 2) = ((toComplex(1.0, 0.0) / Ytrans(1, 1)).Re) * (1.0 * 50.0) 'R11 in ohms
                        myRealMatrixResult(i, 4) = ((toComplex(1.0, 0.0) / Ytrans(1, 1)).Im / w) * (1000000000.0 * 50.0) 'L11 in nF
                        myRealMatrixResult(i, 6) = -(Ytrans(1, 1).Im / Ytrans(1, 1).Re)  'Q11 
                        myRealMatrixResult(i, 8) = ((Y12 + Ytrans(1, 1)).Re) * (1000.0 / 50.0) 'G10 in mS
                        myRealMatrixResult(i, 10) = ((Y12 + Ytrans(1, 1)).Im / w) * (1000000000000.0 / 50.0) 'C10 in pF

                        myRealMatrixResult(i, 12) = ((toComplex(1.0, 0.0) / Ytrans(2, 2)).Re) * (1.0 * 50.0) 'R22 in ohms
                        myRealMatrixResult(i, 14) = ((toComplex(1.0, 0.0) / Ytrans(2, 2)).Im / w) * (1000000000.0 * 50.0) 'L22 in nF
                        myRealMatrixResult(i, 16) = -(Ytrans(2, 2).Im / Ytrans(2, 2).Re)  'Q22 
                        myRealMatrixResult(i, 18) = ((Y12 + Ytrans(2, 2)).Re) * (1000.0 / 50.0) 'G20 in mS
                        myRealMatrixResult(i, 20) = ((Y12 + Ytrans(2, 2)).Im / w) * (1000000000000.0 / 50.0) 'C20 in pF

                        myRealMatrixResult(i, 22) = ((toComplex(-1.0, 0.0) / Y12).Re) * (1.0 * 50.0) 'R12 in ohms
                        myRealMatrixResult(i, 24) = ((toComplex(-1.0, 0.0) / Y12).Im / w) * (1000000000.0 * 50.0) 'L12 in nF

                        myRealMatrixResult(i, 26) = 50.0 * (Zc.Re) 'Z0 in ohms
                        myRealMatrixResult(i, 27) = 50.0 * (Zc.Im) 'Z0 in ohms

                        myRealMatrixResult(i, 28) = eps_eff.Re 'epsilon effecitve
                        myRealMatrixResult(i, 29) = eps_eff.Im 'epsilon effecitve

                End Select

            Next i

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

        Function YFromABCD(ByRef ABCD As ComplexMatrix) As ComplexMatrix
            Dim Y As New ComplexMatrix(2, 2)
            Y(1, 1) = ABCD(2, 2) / ABCD(1, 2)
            Y(1, 2) = -(ABCD(1, 1) * ABCD(2, 2) - ABCD(2, 1) * ABCD(1, 2)) / ABCD(1, 2)
            Y(2, 1) = -toComplex(1.0, 0.0) / ABCD(1, 2)
            Y(2, 2) = ABCD(1, 1) / ABCD(1, 2)
            Return Y
        End Function
        Function ABCDFromS(ByRef S As ComplexMatrix) As ComplexMatrix
            Dim ABCD As New ComplexMatrix(2, 2), Z As New ComplexMatrix(2, 2)
            Z = ZFromS(S)
            'Some divide by Z(2,1) instead, and use Z(1,2)*Z(2,1) in the determinant
            ABCD(1, 1) = Z(1, 1) / Z(2, 1)
            ABCD(1, 2) = (Z(1, 1) * Z(2, 2) - Z(2, 1) * Z(1, 2)) / Z(2, 1)
            ABCD(2, 1) = toComplex(1.0, 0.0) / Z(2, 1)
            ABCD(2, 2) = Z(2, 2) / Z(2, 1)
            Return ABCD
        End Function

    End Class


    ''' <summary>
    ''' Post processor normalizes the power 
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_EOSPowerNormalization
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Absolute EOS voltages (.complex or .meas)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList() As String = Nothing   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                'myNameList(0) = "Dummy input"    
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(1) As String
                FileExtensions(0) = ".complex"
                FileExtensions(1) = ".meas"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing   'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing 'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor normalizes an EOS waveform to the total energy in the pulse."
                myDescription(2) = "Authored by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Normalize EOS frequency domain measurement to total power"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix As RealMatrix : myRealMatrix = MultipleModelInput(0).getSParams(MechanismList1)  'This is the transistor data to be calibrated.
            Dim myOutputMatrix As New RealMatrix(myRealMatrix.NRows, myRealMatrix.NCols, myRealMatrix.DataType)

            'Figure out how many columns there are
            Dim NumberColumns As Integer = (myRealMatrix.NCols - 1) / 2, DELTAF As Double = myRealMatrix(2, 1) - myRealMatrix(1, 1)

            'Step through the columns
            For N As Integer = 1 To NumberColumns

                'Find the power
                Dim TotalEnergy As Double = 0.0, SqrtTotalEnergy As Double = 0.0
                For i As Integer = 1 To myRealMatrix.NRows  'Find the total energy in the pulse
                    TotalEnergy = TotalEnergy + myRealMatrix(i, 2 * N) ^ 2 + myRealMatrix(i, 2 * N + 1) ^ 2
                Next i
                TotalEnergy = TotalEnergy * DELTAF * 1000000000.0
                SqrtTotalEnergy = Math.Sqrt(TotalEnergy)

                'Normalize by the power
                For i As Integer = 1 To myRealMatrix.NRows
                    'Old formula was decibels(i) = 10.0 * Math.Log10(Abs(SC0(i) ^ 2) / TotalEnergy)
                    myRealMatrix(i, 2 * N) = myRealMatrix(i, 2 * N) / SqrtTotalEnergy
                    myRealMatrix(i, 2 * N + 1) = myRealMatrix(i, 2 * N + 1) / SqrtTotalEnergy
                Next i

                ''Alternative way
                'myRealMatrix.Vector(2 * N) = (1.0 / SqrtTotalEnergy) * myRealMatrix.Vector(2 * N)
                'myRealMatrix.Vector(2 * N + 1) = (1.0 / SqrtTotalEnergy) * myRealMatrix.Vector(2 * N + 1)

            Next N

            Return ToArray(myRealMatrix)

        End Function


    End Class


    ''' <summary>
    ''' Post processor uses the Agilent VSA software to calcuate EVM
    ''' </summary>
    ''' <remarks>Inputs in the time domain.</remarks>
    <Serializable()> Public Class Post_AgilentVSA_EVM
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input temporal waveform (.waveform)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "Path to VSA instrument state"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Center frequency (.parameter)"
                myNameList(1) = "Span (.parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".waveform" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Agilent VSA Software"
                PullDownList(1) = "Tektronix SignalVu Software"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(9) As String
                PullDownList(0) = "Never recalculate EVM"
                PullDownList(1) = "Recalculate EVM if > 1 %"
                PullDownList(2) = "Recalculate EVM if > 2 %"
                PullDownList(3) = "Recalculate EVM if > 3 %"
                PullDownList(4) = "Recalculate EVM if > 4 %"
                PullDownList(5) = "Recalculate EVM if > 6 %"
                PullDownList(6) = "Recalculate EVM if > 10 %"
                PullDownList(7) = "Recalculate EVM if > 15 %"
                PullDownList(8) = "Recalculate EVM if > 20 %"
                PullDownList(9) = "Recalculate EVM if > 30 %"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor uses the Agilent VSA software* or the Tektronix SignalVu software* to find the EVM of the input waveforms."
                myDescription(1) = "The Agilent VSA Software results must be in trace D. The post-processor results are organized as follows: 1-EvmRms, 2-EvmPeak, 3-MagErrRms, 4-MagErrPeak, 5-PhaseErrRms, 6-PhaseErrPeak, 7-SigToNoise, 8-FreqErr (Hz), 9-IqOffset, 10-QuadErr, 11-IqGainImbalance"
                myDescription(3) = "Written by Dylan Williams. "
                myDescription(4) = "*NIST does not endorse commercial products. Other products may work as well or better."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".variables"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "EVM from Agilent VSA Software"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Things are a bit confusing as Frequencies from the MUF are really input grid times and times from the MUF are really output grid frequencies.

            'Dimension all of the matrices we will need.
            Dim OutputVariables As New RealMatrix(11, 2, ".variables")  'This will have the EVM
            Dim TimeValuesInput As New RealMatrix(MechanismList1.FrequencyList.NRows)
            TimeValuesInput = MultipleModelInput(0).getSParams(MechanismList1)
            Dim CF As Double = MechValues(0).MechanismValue(MechanismList1)         'Center frequency in GHz
            Dim SPAN As Double = MechValues(1).MechanismValue(MechanismList1)       'Span frequency in GHz

            'Set the level at which we recalculate the EVM. This can be used to catch and correct bad measurements.
            Dim EVM_Limit As Double = 1000.0    'EVM should never get this high
            Select Case myPullDownSelection2
                Case 1  'if EVM > 1 %
                    EVM_Limit = 1.0
                Case 2  'if EVM > 2 %
                    EVM_Limit = 2.0
                Case 3  'if EVM > 3 %
                    EVM_Limit = 3.0
                Case 4  'if EVM > 4 %
                    EVM_Limit = 4.0
                Case 5  'if EVM > 6 %
                    EVM_Limit = 6.0
                Case 6  'if EVM > 10 %
                    EVM_Limit = 10.0
                Case 7  'if EVM > 15 %
                    EVM_Limit = 15.0
                Case 8  'if EVM > 20 %
                    EVM_Limit = 20.0
                Case 9  'if EVM > 30 %
                    EVM_Limit = 30.0
            End Select

            'Find time spacings.
            Dim deltaT As Double = MechanismList1.FrequencyList(2) - MechanismList1.FrequencyList(1)    'Tims step in ns

            'Check that the output frequencies include zero when extended.
            If deltaT <= 0 Then    'Error
                MechanismList1.FatalError = True
                MechanismList1.ErrorReport = "Time spacing <= 0."
                Return ToArray(OutputVariables)
            End If

            Select Case myPullDownSelection1

                Case -1, 0   'Agilent VSA Software

                    'Open up the VSA software
                    ' first, here is how to get a running instance of 89601B
                    vsaApp = ApplicationFactory.Create()
                    If vsaApp Is Nothing Then
                        vsaApp = ApplicationFactory.Create(True, Nothing, Nothing, -1)
                    End If

                    ' make it visible
                    vsaApp.IsVisible = True
                    ' set the title
                    vsaApp.Title = "Microwave Uncertainty Framework"

                    'Load in the VSA Software State from the file myTextBoxContents
                    vsaApp.RecallSetup(myTextBoxContents)

                    ' get a measurement object
                    Dim Meas As Measurement
                    Meas = vsaApp.Measurements.SelectedItem()
                    'Meas = vsaApp.Measurements.Item(0)

                    'Load in the time record
                    Dim fileName As String = My.Computer.FileSystem.GetTempFileName()
                    Dim myStreamWriter As New StreamWriter(fileName)
                    myStreamWriter.WriteLine("InputZoom	FALSE")
                    myStreamWriter.WriteLine("InputRefImped	50.0")
                    myStreamWriter.WriteLine("XStart	0.0")
                    myStreamWriter.WriteLine("XDelta	" + (deltaT / 1000000000.0).ToString)   '("0.00000000000000")
                    myStreamWriter.WriteLine("XDomain	2")
                    myStreamWriter.WriteLine("XUnit	Sec")
                    myStreamWriter.WriteLine("YUnit	V")
                    myStreamWriter.WriteLine("IQ	FALSE")
                    myStreamWriter.WriteLine("FreqValidMax	" + (1000000000.0 / deltaT).ToString)
                    myStreamWriter.WriteLine("FreqValidMin	0.0")
                    myStreamWriter.WriteLine("TimeString	Mon Aug 19 18:27:27.759 2013")
                    myStreamWriter.WriteLine("Y")
                    For k As Integer = 1 To TimeValuesInput.NRows
                        myStreamWriter.WriteLine(TimeValuesInput(k, 2).ToString)    '("0.0000000")
                    Next k
                    myStreamWriter.Close()
                    'Dim myDataRegister As Agilent.SA.Vsa.DataRegister
                    'myDataRegister = vsaApp.DataRegisters.Item(0)
                    Dim DataFormat As String = "TEXT"
                    'myDataRegister.RecallFile(fileName, DataFormat)
                    Meas.Input.Recording.RecallFile(fileName, DataFormat)
                    Windows.Forms.Application.DoEvents()
                    My.Computer.FileSystem.DeleteFile(fileName)

                    'Try up to five times
                    Dim NumberOfTries As Integer = 0
ReTry:              NumberOfTries = NumberOfTries + 1

                    'Reset the VSA software center frequency and span
                    Meas.Frequency.Center = CF * 1000000000.0   'CF = Center frequency in GHz
                    Windows.Forms.Application.DoEvents()
                    Meas.Frequency.Span = SPAN * 1000000000.0   'SPAN = Span frequency in GHz
                    Windows.Forms.Application.DoEvents()

                    'Run the EVM calculation
                    Meas.Restart()
                    Windows.Forms.Application.DoEvents()
                    Meas.Pause()
                    Windows.Forms.Application.DoEvents()

                    'Save the EVM number
                    vsaApp.Display.Traces.SelectedIndex = 3 'Make sure that we have selected trace D, which has the EVM and other statistics we are looking for. SelectedIndex is zero based.
                    Dim currentTrace As Trace : currentTrace = vsaApp.Display.Traces.SelectedItem
                    Dim mySummaryNames As String() : mySummaryNames = currentTrace.MeasurementData.SummaryNames
                    For Each SummaryName As String In mySummaryNames
                        Dim dataResultValue As Object : dataResultValue = currentTrace.MeasurementData.Summary(SummaryName)
                        Dim dataResultValueUnits As String : dataResultValueUnits = currentTrace.MeasurementData.SummaryUnit(SummaryName)
                        Select Case SummaryName
                            Case "EvmRms"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(1, 2) = CDbl(dataResultValue) : OutputVariables(1, 1) = 1.0
                            Case "EvmPeak"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(2, 2) = CDbl(dataResultValue) : OutputVariables(2, 1) = 2.0
                            Case "MagErrRms"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(3, 2) = CDbl(dataResultValue) : OutputVariables(3, 1) = 3.0
                            Case "MagErrPeak"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(4, 2) = CDbl(dataResultValue) : OutputVariables(4, 1) = 4.0
                            Case "PhaseErrRms"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(5, 2) = CDbl(dataResultValue) : OutputVariables(5, 1) = 5.0
                            Case "PhaseErrPeak"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(6, 2) = CDbl(dataResultValue) : OutputVariables(6, 1) = 6.0
                            Case "SigToNoise"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(7, 2) = CDbl(dataResultValue) : OutputVariables(7, 1) = 7.0
                            Case "FreqErr"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(8, 2) = CDbl(dataResultValue) : OutputVariables(8, 1) = 8.0
                            Case "IqOffset"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(9, 2) = CDbl(dataResultValue) : OutputVariables(9, 1) = 9.0
                            Case "QuadErr"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(10, 2) = CDbl(dataResultValue) : OutputVariables(10, 1) = 10.0
                            Case "IqGainImbalance"
                                If InStr(dataResultValue.ToString, "*") = 0 Then OutputVariables(11, 2) = CDbl(dataResultValue) : OutputVariables(11, 1) = 11.0
                        End Select
                    Next

                    'Check to see if we should retry this one.
                    If OutputVariables(1, 2) > EVM_Limit And NumberOfTries < 3 Then GoTo ReTry

                    ''Close if this is the last calculation. See if this is needed first.
                    '' prepare for errors if 89601B not running
                    'On Error Resume Next
                    '' Quit 89601B
                    'vsaApp.Quit()
                    'vsaApp = Nothing

                Case 1  'Tektronix VSA Software goes here. It should accomplish the same task as the Agilent software above.
                    MsgBox("This module is not yet completed!", MsgBoxStyle.Information, "Microwave Uncertainty Framework Post Processor")
                    MechanismList1.ErrorReport = "This module is not yet completed!" : MechanismList1.FatalError = True : Return ToArray(OutputVariables)

            End Select

            'That's all folks!
            Return ToArray(OutputVariables)

        End Function


    End Class


    ''' <summary>
    ''' Post processor implementing Sorin's T-Line de-embedding algorithm
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_CombineFilesWithFrequencyBreakpoint
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myExtension As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(2) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Low-frequency measurements"    'Has Low-frequency measurements
                myNameList(1) = "High-frequency measurements"    'Has High-frequency measurements
                myNameList(2) = "Frequency breakpoint (.parameter, GHz)"    'Frequency breakpoint in GHz
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(26) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive"
                FileExtensions(3) = ".model" : FileExtensions(4) = ".model_archive" : FileExtensions(5) = ".cascade" : FileExtensions(6) = ".cascade_archive" : FileExtensions(7) = ".parameter"
                FileExtensions(8) = ".raw" : FileExtensions(9) = ".nrm" : FileExtensions(10) = ".sumofparameters"
                For k As Integer = 1 To 8
                    FileExtensions(2 * k + 9) = ".s" + k.ToString + "p"
                    FileExtensions(2 * k + 10) = ".s" + k.ToString + "p"
                Next k
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing   'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor merges the data in the first file below or equal to the frequency break point with the data in the second file above the frequency break point."
                myDescription(2) = "Both files should cover the entire frequency range. The default frequency list comes from the first file, but can be overridden with the pull-down menus."
                myDescription(3) = "The module was authored by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return myExtension
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Merge high-freqeuncy and low-frequency data."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the imput real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)  'Low-freqeuncy data
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)  'High-freqeuncy data
            Dim FrequencyBreakPoint As Double = MechValues(2).MechanismValue(MechanismList1)
            myExtension = myRealMatrix0.DataType

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> myRealMatrix1.NCols Then MechanismList1.ErrorReport = "The number of columns in the two files do not agree."

            'Form the real matrix output
            Dim NumCols As Integer = myRealMatrix0.NCols
            Dim myRealMatrixResult As New RealMatrix(MechanismList1.FrequencyList.NRows, NumCols)
            myRealMatrixResult.DataType = myRealMatrix0.DataType
            myRealMatrixResult.Vector(1) = MechanismList1.FrequencyList

            For k As Integer = 1 To MechanismList1.FrequencyList.NRows
                For kk As Integer = 2 To NumCols
                    If MechanismList1.FrequencyList(k) <= FrequencyBreakPoint Then
                        myRealMatrixResult(k, kk) = myRealMatrix0(k, kk)
                    Else
                        myRealMatrixResult(k, kk) = myRealMatrix1(k, kk)
                    End If
                Next kk
            Next k

            'That's all folks!
            Return ToArray(myRealMatrixResult)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for running ADS and creating a model.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Run_ADS
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "ADS working directory"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(20) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Number of active wave files (.parameter)"
                For k As Integer = 1 To 20
                    myNameList(k) = "Wave file " + k.ToString + " (.wnp)"
                Next k

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas_archive" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".w2p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calls ADS with the input .w2p wave files, instructs ADS to find a model, and then saves the model to disk."
                myDescription(1) = "The default frequency list is determined from the first wavefile input to the post processor."
                myDescription(2) = "ADS must be loaded and ready to run the model extraction proceedure before you start the post processor. See the help file on how to set up ADS to preform the model extraction and communicate the result back to this post processor."
                myDescription(4) = "Written by Gustavo Avolio."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".variables"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Use ADS to calculate model parameters from .w2p files"
            End Get
        End Property


        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Device model parameters determined by ADS
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the number of input wave files.
            Dim NWaves_double As Double = MechValues(0).MechanismValue(MechanismList1)
            Dim NWaves As Integer = NWaves_double
            Dim Dummy As New RealMatrix(1, 2)
            If NWaves < 1 Or NWaves > 20 Then
                MechanismList1.ErrorReport = "The number of wave files must be between 1 and 20!"
                MechanismList1.FatalError = True
                Return ToArray(Dummy)
                Exit Function
            End If

            'ADS project folder -check if the entered path contains or not '\' as last char
            Dim ADSPath As String = myTextBoxContents.Trim
            If ADSPath(ADSPath.Length - 1) <> "\" Then
                ADSPath = ADSPath + "\"
            End If

            'file read by ADS for model extraction
            Dim Filename As String = "Waves.citi"

            'Read in the frequency list
            Dim Freq As RealMatrix = MechanismList1.FrequencyList

            'Independent variables of Citifile
            Dim VAR1 As Integer = NWaves
            Dim VAR2 As Integer = Freq.NRows
            Dim NExp(NWaves - 1) As String
            Dim FreqList(Freq.NRows - 1) As String

            For index = 0 To NWaves - 1
                NExp(index) = index.ToString
            Next

            'Create frequency list
            For index = 1 To FreqList.Length
                FreqList(index - 1) = Freq(index, 1).ToString
            Next

            'dependent variables to write to Citifile
            Dim A11(NWaves * Freq.NRows - 1) As String
            Dim B11(NWaves * Freq.NRows - 1) As String
            Dim A21(NWaves * Freq.NRows - 1) As String
            Dim B21(NWaves * Freq.NRows - 1) As String
            Dim A12(NWaves * Freq.NRows - 1) As String
            Dim B12(NWaves * Freq.NRows - 1) As String
            Dim A22(NWaves * Freq.NRows - 1) As String
            Dim B22(NWaves * Freq.NRows - 1) As String

            'Waves to Citifile
            System.IO.File.WriteAllText(ADSPath + "data\" + Filename, "CITIFILE A.01.01" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "NAME WAVE" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR NWaves MAG" + " " + VAR1.ToString + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR FREQ MAG" + " " + VAR2.ToString + vbCrLf)
            '...Add more independent variables if needed
            'System.IO.File.AppendAllText("C:/Users/New.citi", "VAR VAR_N MAG" + " " + CStr(VAR_N) + vbCrLf)'
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A11 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B11 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A21 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B21 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A12 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B12 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A22 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B22 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, NExp)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_END" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, FreqList)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_END" + vbCrLf)

            'Read in the wave files
            For k As Integer = 1 To NWaves

                'Read in and check the WaveFile
                Dim myWaveFile As RealMatrix
                myWaveFile = MechValues(k).getSParams(MechanismList1)
                If Freq.NRows <> myWaveFile.NRows Or Freq(1) <> myWaveFile(1, 1) Then
                    MechanismList1.ErrorReport = "The frequencies do not match"
                    MechanismList1.FatalError = True
                    Return ToArray(Dummy)
                    Exit Function
                End If
                If myWaveFile.DataType.ToLower <> ".w2p" Or myWaveFile.NCols <> 17 Then
                    MechanismList1.ErrorReport = "The input was not a wave file"
                    MechanismList1.FatalError = True
                    Return ToArray(Dummy)
                    Exit Function
                End If

                'Real and imaginary of A-B waves including DC equivalent waves
                For h As Integer = 1 To Freq.NRows
                    A11((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 2).ToString, myWaveFile(h, 3).ToString)
                    B11((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 4).ToString, myWaveFile(h, 5).ToString)
                    A21((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 6).ToString, myWaveFile(h, 7).ToString)
                    B21((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 8).ToString, myWaveFile(h, 9).ToString)
                    A12((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 10).ToString, myWaveFile(h, 11).ToString)
                    B12((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 12).ToString, myWaveFile(h, 13).ToString)
                    A22((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 14).ToString, myWaveFile(h, 15).ToString)
                    B22((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 16).ToString, myWaveFile(h, 17).ToString)
                Next
            Next k

            'Write waves to Citifile
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, A11)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)
            'Write B1 in the .Citi file
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, B11)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)
            'Write A2 in the .Citi file
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, A21)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)
            'Write B2 in the .Citi file
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, B21)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)

            'Run ADS
            If 1 = 1 Then   'Normal mode
                Dim DummyFile As Boolean = False
                'RunADS.cmd runs ads.exe and the macro which contains the instructions to be executed by ADS
                Shell(ADSPath + "RunADS.cmd", 6, True, 10000)
                'This loop freezes VB untill ADS finishes operations
                If My.Computer.FileSystem.FileExists(ADSPath + "data\dummy.txt") Then
                    IO.File.Delete(ADSPath + "data\dummy.txt")
                End If
                If My.Computer.FileSystem.FileExists(ADSPath + "data\Model_variables.txt") Then
                    IO.File.Delete(ADSPath + "data\Model_variables.txt")
                End If
                While (Not DummyFile)
                    DummyFile = IO.File.Exists(ADSPath + "data\dummy.txt")
                    Windows.Forms.Application.DoEvents()
                End While
                'Close ADS
                Shell(ADSPath + "CloseADS.cmd", 6, True, 10000)
                IO.File.Delete(ADSPath + "data\dummy.txt")
                'Read the answer back into the program
                Dim Variables() As String = System.IO.File.ReadAllLines(ADSPath + "data\Model_variables.txt")
                Dim myListOfModelVariables As New RealMatrix(Variables.Length, 2, ".variables")
                For index As Integer = 1 To Variables.Length
                    myListOfModelVariables(index, 1) = index : myListOfModelVariables(index, 2) = CDbl(Variables(index - 1))
                Next index
                Return ToArray(myListOfModelVariables)
            Else    'Test mode
                Dim myListOfModelVariables As New RealMatrix(2, 2, ".variables")
                Return ToArray(myListOfModelVariables)
            End If

        End Function

    End Class

    ''' <summary>
    ''' Post processor for running ADS and de-embedding nonlinear measurements.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Run_ADS_Deembed
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "ADS working directory"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>

        Public ReadOnly Property getNameList() As String()
            Get
                'To check
                'Dim N As Integer = System.IO.File.ReadAllText("C:\Users\GNA2\My Documents\NWaves.txt")
                Dim myNameList(2) As String  'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Number of active wave files (.parameter)"
                For k As Integer = 1 To 2
                    myNameList(k) = "Wave file " + k.ToString + " (.meas)"
                Next k

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas_archive" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".w2p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(8) As String
                myDescription(0) = "This post processor calls ADS with the input wave file, perform nonlinear deembedding and save data to disk."
                myDescription(2) = "The default frequency list is determined from the first wavefile input to the post processor."
                myDescription(4) = "Set the path of the ADS project folder, e.g. C:\...\adsproject_wrk\"
                myDescription(6) = "See the Help for applying the right settings."
                myDescription(8) = "Written by Gustavo Avolio."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Use ADS to perform nonlinear de-embedding"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Device model parameters determined by ADS
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the number of input wave files.
            Dim NWaves_double As Double = MechValues(0).MechanismValue(MechanismList1)
            Dim NWaves As Integer = NWaves_double
            If NWaves < 1 Or NWaves > 20 Then
                MechanismList1.ErrorReport = "The number of wave files must be between 1 and 20!"
                MechanismList1.FatalError = True
                Dim Dummy As New RealMatrix(1, 2)
                Return ToArray(Dummy)
                Exit Function
            End If

            'ADS project folder -check if the entered path contains or not '\' as last char
            Dim ADSPath As String = myTextBoxContents.Trim
            If ADSPath(ADSPath.Length - 1) <> "\" Then
                ADSPath = ADSPath + "\"
            End If

            'file read by ADS for model extraction
            'For Each foundFile As String In My.Computer.FileSystem.GetFiles(ADSPath + "data\")
            '    My.Computer.FileSystem.DeleteFile(foundFile)
            'Next
            Dim Filename As String = "Waves.citi"

            'Read in the frequency list
            Dim Freq As RealMatrix = MechanismList1.FrequencyList

            'Independent variables of Citifile
            Dim VAR1 As Integer = NWaves
            Dim VAR2 As Integer = Freq.NRows
            Dim NExp(NWaves - 1) As String
            Dim FreqList(Freq.NRows - 1) As String

            For index = 0 To NWaves - 1
                NExp(index) = index.ToString
            Next

            'Create frequency list
            For index = 1 To FreqList.Length
                FreqList(index - 1) = Freq(index, 1).ToString
            Next

            'dependent variables to write to Citifile
            Dim A11(NWaves * Freq.NRows - 1) As String
            Dim B11(NWaves * Freq.NRows - 1) As String
            Dim A21(NWaves * Freq.NRows - 1) As String
            Dim B21(NWaves * Freq.NRows - 1) As String
            Dim A12(NWaves * Freq.NRows - 1) As String
            Dim B12(NWaves * Freq.NRows - 1) As String
            Dim A22(NWaves * Freq.NRows - 1) As String
            Dim B22(NWaves * Freq.NRows - 1) As String

            'Waves to Citifile
            System.IO.File.WriteAllText(ADSPath + "data\" + Filename, "CITIFILE A.01.01" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "NAME WAVE" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR NWaves MAG" + " " + VAR1.ToString + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR FREQ MAG" + " " + VAR2.ToString + vbCrLf)
            '...Add more independent variables if needed
            'System.IO.File.AppendAllText("C:/Users/New.citi", "VAR VAR_N MAG" + " " + CStr(VAR_N) + vbCrLf)'
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A11 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B11 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A21 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B21 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A12 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B12 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA A22 RI" + vbCrLf)
            'System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "DATA B22 RI" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, NExp)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_END" + vbCrLf)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, FreqList)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "VAR_LIST_END" + vbCrLf)

            'Read in the wave files
            For k As Integer = 1 To NWaves
                Dim myWaveFile As RealMatrix
                myWaveFile = MechValues(k).getSParams(MechanismList1)
                If Freq.NRows <> myWaveFile.NRows Or Freq(1) <> myWaveFile(1, 1) Then
                    MechanismList1.ErrorReport = "The frequencies do not match"
                    MechanismList1.FatalError = True
                    Dim Dummy As New RealMatrix(1, 2)
                    Return ToArray(Dummy)
                    Exit Function
                End If
                'Real and imaginary of A-B waves including DC equivalent waves if present
                For h As Integer = 1 To Freq.NRows
                    A11((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 2).ToString, myWaveFile(h, 3).ToString)
                    B11((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 4).ToString, myWaveFile(h, 5).ToString)
                    A21((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 6).ToString, myWaveFile(h, 7).ToString)
                    B21((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 8).ToString, myWaveFile(h, 9).ToString)
                    A12((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 10).ToString, myWaveFile(h, 11).ToString)
                    B12((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 12).ToString, myWaveFile(h, 13).ToString)
                    A22((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 14).ToString, myWaveFile(h, 15).ToString)
                    B22((k - 1) * (Freq.NRows) + (h - 1)) = String.Join(",", myWaveFile(h, 16).ToString, myWaveFile(h, 17).ToString)
                Next
            Next k

            'Write waves to Citifile
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, A11)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)
            'Write B1 in the .Citi file
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, B11)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)
            'Write A2 in the .Citi file
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, A21)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)
            'Write B2 in the .Citi file
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "BEGIN" + vbCrLf)
            System.IO.File.AppendAllLines(ADSPath + "data\" + Filename, B21)
            System.IO.File.AppendAllText(ADSPath + "data\" + Filename, "END" + vbCrLf)

            'Run ADS
            Dim fileExists As Boolean = My.Computer.FileSystem.FileExists(ADSPath + "data\currents.txt")
            Dim fileExists1 As Boolean = My.Computer.FileSystem.FileExists(ADSPath + "data\dummy.txt")
            If fileExists Then
                IO.File.Delete(ADSPath + "data\currents.txt")
            End If
            If fileExists1 Then
                IO.File.Delete(ADSPath + "data\dummy.txt")
            End If

            Dim DummyFile As Boolean = False
            'RunADS.cmd runs ads.exe and the macro which contains the instructions to be executed by ADS
            Shell(ADSPath + "RunADS.cmd", 6, True, 10000)
            'This loop freezes VB untill ADS finishes operations
            While (Not DummyFile)
                DummyFile = IO.File.Exists(ADSPath + "data\dummy.txt")
            End While
            'Close ADS
            Shell(ADSPath + "CloseADS.cmd", 6, True, 10000)
            IO.File.Delete(ADSPath + "data\dummy.txt")
            ''Read the answer back into the program
            'Shell(ADSPath + "Save_dataset.cmd", 6, True, 10000)
            ''This loop freezes VB untill ADS finishes operations
            'DummyFile = False
            'While (Not DummyFile)
            '    DummyFile = IO.File.Exists(ADSPath + "data\dummy.txt")
            'End While
            ''Close ADS
            'Shell(ADSPath + "CloseADS.cmd", 6, True, 10000)
            'IO.File.Delete(ADSPath + "data\dummy.txt")
            Dim DUT_currents() As String = System.IO.File.ReadAllLines(ADSPath + "data\currents.txt")
            Dim temp_0() As String = DUT_currents(0).Split(" ")
            Dim myDUTcurrents As New RealMatrix(FreqList.Length, temp_0.Length, ".complex")
            For index As Integer = 1 To FreqList.Length
                Dim temp() As String = DUT_currents(index - 1).Split(" ")
                myDUTcurrents(index, 1) = ValInternational(FreqList(index - 1))
                For k = 2 To temp.Length
                    myDUTcurrents(index, k) = CDbl(temp(k - 1))
                Next k
            Next index
            IO.File.Delete(ADSPath + "data\currents.txt")
            IO.File.Delete(ADSPath + "data\Waves.citi")
            Return ToArray(myDUTcurrents)
        End Function
    End Class

    ''' <summary>
    ''' Post processor for removing absolute amplitude, phase offset and phase slope at a center frequency
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_TektronixFit
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myDistributionLimits() As Double
        Private myAllowForceNewValues() As Boolean
        Private myForceNewValues() As Boolean
        Private myNewValues() As Double
        Private myModel As Object
        Private myFirstTime As Boolean = True
        Private myMechanismListModel As MechanismList
        Private myForcedValuesCount As Integer = 0
        Private myX() As Double 'Has the values of X from the first time around
        Private myXDistLimit() As Double 'Has the range of X values from the 
        Private myScales() As Double 'Has the scale factors for X from the nominal values of X and the Distribution limits of X
        Private myRealMatrix0 As RealMatrix 'The measurements.
        Private mMax As Integer             'The maximum index that we fit to.
        Private mMin As Integer             'The maximum index that we replace to.

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(2) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Center frequency for fit (GHz, .parameter)"    '
                myNameList(1) = "Bandwidth for fit (GHz, .parameter)"    '
                myNameList(2) = "Response function (.complex)"    '
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".complex" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter" : FileExtensions(4) = ".sumofparameters"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Normalize magnitude at center frequency"
                PullDownList(1) = "Normalize power over fit bandwidth"
                PullDownList(2) = "Normalize magnitude over fit bandwidth"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing 'Set the frequency over which the fit is performed
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor removing absolute amplitude, phase offset and phase slope at a center frequency."
                myDescription(2) = "This models the effect of amplifying and downconverting a modulated signal with digital data."
                myDescription(4) = "Written using Tektronix algorithm."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Tektronix fitting routine."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            myRealMatrix0 = MechValues(2).getSParams(MechanismList1)

            'Get start and stop frequencies
            Dim CF As Double = MechValues(0).MechanismValue(MechanismList1) 'Center frequency for fit
            Dim BW As Double = MechValues(1).MechanismValue(MechanismList1)  'Bandwidth for the fit

            'Check the input to see if it has the right number of columns.
            If myRealMatrix0.NCols <> 3 Then MechanismList1.ErrorReport = "The first input to the Tektronix Fit Post Processor was not a response function" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function

            'Set up variables
            Dim xmag As New RealMatrix(myRealMatrix0.NRows), xph As New RealMatrix(myRealMatrix0.NRows), Freq As New RealMatrix(myRealMatrix0.NRows)
            Dim xtmp As New Complex(0.0, 0.0), OutputMatrix As New RealMatrix(myRealMatrix0.NRows, 3, ".complex")
            Freq = myRealMatrix0.Vector(1)

            '% find index that corresponds to CF and band edges
            'jCF = findindex(freq, CF)  % use your favorite method.
            'jBL = findindex(freq, CF - BW/2)
            'jBH = findindex(freq, CF + BW/2)
            Dim jCF As Integer = 0, jBL As Integer = 0, jBH As Integer = 0
            For k As Integer = 1 To myRealMatrix0.NRows
                If Freq(k) <= CF Then jCF = k
                If Freq(k) <= CF - BW / 2.0 Then jBL = k
                If Freq(k) <= CF + BW / 2.0 Then jBH = k
            Next k
            'Check the input to see if we have enough points for a fit.
            If jBH - jBL < 2 Then MechanismList1.ErrorReport = "Not enough points to fit phase" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function


            '%offset mag data
            For k As Integer = 1 To myRealMatrix0.NRows
                xtmp = toComplex(myRealMatrix0(k, 2), myRealMatrix0(k, 3))
                xmag(k) = Abs(xtmp)
                xph(k) = Arg(xtmp)    'or Phase
            Next k

            '% use any unwrap algorithm you like.  Since we will be later curve fitting, it is not important where 0deg is defined, 
            'only that we get rid of the 2pi jumps.  I’ve snipped a C-code unwrap for reference at the end (which I have not tried).
            xph = UnWrap(xph)


            '% Least-Square curve-fit phase data and average magnitudes
            Dim MagCenter As Double = Math.Sqrt(myRealMatrix0(jCF, 2) * myRealMatrix0(jCF, 2) + myRealMatrix0(jCF, 3) * myRealMatrix0(jCF, 3))
            Dim MagAvg As Double = 0.0, PowAvg As Double = 0.0
            '% compute sums
            Dim len As Double = jBH - jBL + 1  '%number of points in the fit
            Dim sumx As Double = 0.0, sumy As Double = 0.0, sumxx As Double = 0.0, sumxy As Double = 0.0
            For k As Integer = jBL To jBH
                sumx = sumx + Freq(k)
                sumy = sumy + xph(k)
                sumxx = sumxx + Freq(k) * Freq(k)
                sumxy = sumxy + Freq(k) * xph(k)
                PowAvg = PowAvg + myRealMatrix0(k, 2) * myRealMatrix0(k, 2) + myRealMatrix0(k, 3) * myRealMatrix0(k, 3)
                MagAvg = MagAvg + Math.Sqrt(myRealMatrix0(k, 2) * myRealMatrix0(k, 2) + myRealMatrix0(k, 3) * myRealMatrix0(k, 3))
            Next k
            PowAvg = Math.Sqrt(PowAvg / len)
            MagAvg = MagAvg / len

            '% compute phase reference line y = m*x + b
            Dim m As Double = (len * sumxy - sumx * sumy) / (len * sumxx - sumx * sumx)
            Dim b As Double = (sumy - m * sumx) / len

            'Get everything back to real/imaginary
            For k As Integer = 1 To myRealMatrix0.NRows
                xph(k) = xph(k) - (m * Freq(k) + b) '% offset and unslope phase
                Select Case myPullDownSelection1
                    Case 0  'Center frequency averaging
                        xmag(k) = xmag(k) / MagCenter
                    Case 1  'Power average over fit bandwidth
                        xmag(k) = xmag(k) / PowAvg
                    Case 2  'Magnitude average over fit bandwidth
                        xmag(k) = xmag(k) / MagAvg
                End Select
                OutputMatrix(k, 1) = Freq(k)
                OutputMatrix(k, 2) = xmag(k) * Math.Cos(xph(k))
                OutputMatrix(k, 3) = xmag(k) * Math.Sin(xph(k))
            Next k

            'That's all folks! 
            Return ToArray(OutputMatrix)

        End Function


    End Class


    ''' <summary>
    ''' Post processor forms sums and differences, allows comparisons
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Difference
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myDistributionLimits() As Double
        Private myAllowForceNewValues() As Boolean
        Private myForceNewValues() As Boolean
        Private myNewValues() As Double
        Private myModel As Object
        Private myFirstTime As Boolean = True
        Private myMechanismListModel As MechanismList
        Private myForcedValuesCount As Integer = 0
        Private myX() As Double 'Has the values of X from the first time around
        Private myXDistLimit() As Double 'Has the range of X values from the 
        Private myScales() As Double 'Has the scale factors for X from the nominal values of X and the Distribution limits of X
        Private myRealMatrix0 As RealMatrix 'The sum or difference.
        Private myRealMatrix1 As RealMatrix 'The measurements.
        Private myRealMatrix2 As RealMatrix 'The measurements.
        Private mMax As Integer             'The maximum index that we fit to.
        Private mMin As Integer             'The maximum index that we replace to.
        Private myDataType As String = ".complex" 'Required by the MUF

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(3) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Center frequency for fit (GHz, .parameter)"    '
                myNameList(1) = "Bandwidth for fit (GHz, .parameter)"    '
                myNameList(2) = "First matrix"    '
                myNameList(3) = "Second matrix"    '
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(45) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".model_archive" : FileExtensions(8) = ".cascade_archive" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                FileExtensions(13) = ".complex"
                For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                    FileExtensions(14 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                    FileExtensions(15 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                Next i1
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "No magnitude normalization"
                PullDownList(1) = "Normalize magnitude at center frequency"
                PullDownList(2) = "Normalize power over fit bandwidth"
                PullDownList(3) = "Normalize magnitude over fit bandwidth"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "No phase normalization"
                PullDownList(1) = "Remove linear phase"
                PullDownList(2) = "Remove linear and constant phase"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Examine matrix 1 - matrix 2"
                PullDownList(1) = "Examine matrix 1 + matrix 2"
                PullDownList(2) = "Examine matrix 1 / matrix 2 (element by element)"
                PullDownList(3) = "Examine matrix 1 * matrix 2 (element by element)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor forms the sum, difference, product, or division of two results."
                myDescription(2) = "Forming the difference allows the results to be compared. You can also normalize the amplitude, phase offset and phase slope of the result. By default the frequency list is taken from the first input matrix."
                myDescription(4) = "Written by Dylan Williams using Tektronix fit algorithms."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return myDataType
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Compare results."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            myRealMatrix1 = MechValues(2).getSParams(MechanismList1)
            myRealMatrix2 = MechValues(3).getSParams(MechanismList1)
            myRealMatrix0 = New RealMatrix(myRealMatrix1.NRows, myRealMatrix1.NCols, myRealMatrix1.DataType)

            'Check to see that dimensions are correct.
            If myRealMatrix1.NCols <> myRealMatrix2.NCols Then
                MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Matrices do not have same dimension" : Return ToArray(myRealMatrix1) : Exit Function
            End If

            'Get start and stop frequencies
            Dim CF As Double = MechValues(0).MechanismValue(MechanismList1) 'Center frequency for fit
            Dim BW As Double = MechValues(1).MechanismValue(MechanismList1)  'Bandwidth for the fit

            Select Case myPullDownSelection3
                Case -1, 0   'difference
                    myRealMatrix0 = myRealMatrix1 - myRealMatrix2
                Case 1      'sum
                    myRealMatrix0 = myRealMatrix1 + myRealMatrix2
                Case 2      'division
                    For kk As Integer = 1 To myRealMatrix1.NRows
                        For kkk As Integer = 2 To myRealMatrix1.NCols Step 2
                            If myDataType = ".variables" Then
                                If myRealMatrix2(kk, kkk) <> 0.0 Then myRealMatrix0(kk, kkk) = myRealMatrix1(kk, kkk) / myRealMatrix2(kk, kkk)
                            Else
                                If myRealMatrix2(kk, kkk) <> 0.0 Or myRealMatrix2(kk, kkk + 1) <> 0.0 Then
                                    Dim C1 As New Complex(myRealMatrix1(kk, kkk), myRealMatrix1(kk, kkk + 1))
                                    Dim C2 As New Complex(myRealMatrix2(kk, kkk), myRealMatrix2(kk, kkk + 1))
                                    C1 = C1 / C2
                                    myRealMatrix0(kk, kkk) = C1.Re
                                    myRealMatrix0(kk, kkk + 1) = C1.Im
                                End If
                            End If
                        Next kkk
                    Next kk
                Case 3      'multiplication
                    For kk As Integer = 1 To myRealMatrix1.NRows
                        For kkk As Integer = 2 To myRealMatrix1.NCols Step 2
                            If myDataType = ".variables" Then
                                myRealMatrix0(kk, kkk) = myRealMatrix1(kk, kkk) * myRealMatrix2(kk, kkk)
                            Else
                                Dim C1 As New Complex(myRealMatrix1(kk, kkk), myRealMatrix1(kk, kkk + 1))
                                Dim C2 As New Complex(myRealMatrix2(kk, kkk), myRealMatrix2(kk, kkk + 1))
                                C1 = C1 * C2
                                myRealMatrix0(kk, kkk) = C1.Re
                                myRealMatrix0(kk, kkk + 1) = C1.Im
                            End If
                        Next kkk
                    Next kk
            End Select
            myRealMatrix0.Vector(1) = myRealMatrix1.Vector(1)
            myRealMatrix0.DataType = myRealMatrix1.DataType : myDataType = myRealMatrix1.DataType
            If (myPullDownSelection1 <= 0 And myPullDownSelection2 <= 0) Or myDataType = ".variables" Then  'Bail early if we can
                Return ToArray(myRealMatrix0)
            End If




            'Set up variables
            Dim xmag As New RealMatrix(myRealMatrix0.NRows), xph As New RealMatrix(myRealMatrix0.NRows), Freq As New RealMatrix(myRealMatrix0.NRows)
            Dim xtmp As New Complex(0.0, 0.0), OutputMatrix As New RealMatrix(myRealMatrix0.NRows, myRealMatrix0.NCols, myDataType)
            Freq = myRealMatrix0.Vector(1) : OutputMatrix.Vector(1) = Freq

            '% find index that corresponds to CF and band edges
            'jCF = findindex(freq, CF)  % use your favorite method.
            'jBL = findindex(freq, CF - BW/2)
            'jBH = findindex(freq, CF + BW/2)
            Dim jCF As Integer = 0, jBL As Integer = 0, jBH As Integer = 0
            For k As Integer = 1 To myRealMatrix0.NRows
                If Freq(k) <= CF Then jCF = k
                If Freq(k) <= CF - BW / 2.0 Then jBL = k
                If Freq(k) <= CF + BW / 2.0 Then jBH = k
            Next k
            'Check the input to see if we have enough points for a fit.
            If jBH - jBL < 2 Then MechanismList1.ErrorReport = "Not enough points to fit phase" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function


            For kk As Integer = 2 To myRealMatrix0.NCols Step 2   'Step over columns

                '%offset mag data
                For k As Integer = 1 To myRealMatrix0.NRows
                    xtmp = toComplex(myRealMatrix0(k, kk), myRealMatrix0(k, kk + 1))
                    xmag(k) = Abs(xtmp)
                    xph(k) = Arg(xtmp)    'or Phase
                Next k

                '% use any unwrap algorithm you like.  Since we will be later curve fitting, it is not important where 0deg is defined, 
                'only that we get rid of the 2pi jumps.  I’ve snipped a C-code unwrap for reference at the end (which I have not tried).
                xph = UnWrap(xph)


                '% Least-Square curve-fit phase data and average magnitudes
                Dim MagCenter As Double = Math.Sqrt(myRealMatrix0(jCF, kk) * myRealMatrix0(jCF, kk) + myRealMatrix0(jCF, kk + 1) * myRealMatrix0(jCF, kk + 1))
                Dim MagAvg As Double = 0.0, PowAvg As Double = 0.0
                '% compute sums
                Dim len As Double = jBH - jBL + 1  '%number of points in the fit
                Dim sumx As Double = 0.0, sumy As Double = 0.0, sumxx As Double = 0.0, sumxy As Double = 0.0
                For k As Integer = jBL To jBH
                    sumx = sumx + Freq(k)
                    sumy = sumy + xph(k)
                    sumxx = sumxx + Freq(k) * Freq(k)
                    sumxy = sumxy + Freq(k) * xph(k)
                    PowAvg = PowAvg + myRealMatrix0(k, kk) * myRealMatrix0(k, kk) + myRealMatrix0(k, kk + 1) * myRealMatrix0(k, kk + 1)
                    MagAvg = MagAvg + Math.Sqrt(myRealMatrix0(k, kk) * myRealMatrix0(k, kk) + myRealMatrix0(k, kk + 1) * myRealMatrix0(k, kk + 1))
                Next k
                PowAvg = Math.Sqrt(PowAvg / len)
                MagAvg = MagAvg / len

                '% compute phase reference line y = m*x + b
                Dim m As Double = (len * sumxy - sumx * sumy) / (len * sumxx - sumx * sumx)
                Dim b As Double = (sumy - m * sumx) / len

                '% compute phase reference line y = m1*x
                Dim m1 As Double = sumxy / sumxx

                'Get everything back to real/imaginary
                For k As Integer = 1 To myRealMatrix0.NRows

                    'Normalize magnitude
                    Select Case myPullDownSelection1
                        Case -1.0   'No normalization
                        Case 1  'Center frequency averaging
                            xmag(k) = xmag(k) / MagCenter
                        Case 2  'Power average over fit bandwidth
                            xmag(k) = xmag(k) / PowAvg
                        Case 3  'Magnitude average over fit bandwidth
                            xmag(k) = xmag(k) / MagAvg
                    End Select

                    'Normalize phase
                    Select Case myPullDownSelection2
                        Case -1.0   'No normalization
                        Case 1  'Remove linear phase
                            xph(k) = xph(k) - (m1 * Freq(k)) '% offset and unslope phase
                        Case 2  'Remove linear and constant phase
                            xph(k) = xph(k) - (m * Freq(k) + b) '% offset and unslope phase
                    End Select

                    'Put results back in real-imaginary matrix
                    OutputMatrix(k, kk) = xmag(k) * Math.Cos(xph(k))
                    OutputMatrix(k, kk + 1) = xmag(k) * Math.Sin(xph(k))

                Next k

            Next kk

            'That's all folks! 
            Return ToArray(OutputMatrix)

        End Function


    End Class


    ''' <summary>
    ''' Post processor calls a MatLab subroutine.
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_MatLab

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myFirst As Boolean = True
        Private myMatLab As MLApp.MLApp = Nothing
        Private myFirst2 As Boolean = True
        Private myADSFileNames() As String
        Private NFiles As Integer = 0

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Repeat the proceedure on these files"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(11) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "MatLab initialization program (.m)"
                myNameList(1) = "MatLab program (.m)"
                myNameList(2) = "MatLab input 1"
                myNameList(3) = "MatLab input 2"
                myNameList(4) = "MatLab input 3"
                myNameList(5) = "MatLab input 4"
                myNameList(6) = "MatLab input 5"
                myNameList(7) = "MatLab input 6"
                myNameList(8) = "MatLab input 7"
                myNameList(9) = "MatLab input 8"
                myNameList(10) = "MatLab input 9"
                myNameList(11) = "MatLab input 10"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(46) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".model_archive" : FileExtensions(8) = ".cascade_archive" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                FileExtensions(13) = ".complex" : FileExtensions(14) = ".m"
                For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                    FileExtensions(15 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                    FileExtensions(16 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                Next i1
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Dim DefaultIndex As Integer = myPullDownSelection1 - 2
                If DefaultIndex < -2 Then DefaultIndex = -2
                Return DefaultIndex
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(10) As String
                PullDownList(0) = "Multiple-input list sets default frequencies"
                PullDownList(1) = "Run>Set frequencies pull-down sets default frequencies"
                PullDownList(2) = "MatLab input 1 sets default frequencies"
                PullDownList(3) = "MatLab input 2 sets default frequencies"
                PullDownList(4) = "MatLab input 3 sets default frequencies"
                PullDownList(5) = "MatLab input 4 sets default frequencies"
                PullDownList(6) = "MatLab input 5 sets default frequencies"
                PullDownList(7) = "MatLab input 6 sets default frequencies"
                PullDownList(8) = "MatLab input 7 sets default frequencies"
                PullDownList(9) = "MatLab input 8 sets default frequencies"
                PullDownList(10) = "MatLab input 10 sets default frequencies"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        Private Function GetMatLabOutputExtensions() As String()
            Dim FileExtensions(34) As String : FileExtensions(0) = ".waveform"  'This is the list of aceptable MatLab file output extensions 
            FileExtensions(1) = ".variables"
            FileExtensions(2) = ".complex"
            For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                FileExtensions(3 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                FileExtensions(4 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
            Next i1
            Return FileExtensions
        End Function
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor runs the MatLab file specified by the text input string."
                myDescription(1) = "The default frequency list is determined from the multiple input list, but can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Run a MatLab program"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myADSFileNamesShort(myADSFileNames.Count - 1) As String
                For k As Integer = 0 To myADSFileNames.Count - 1
                    myADSFileNamesShort(k) = ""
                    If myADSFileNames(k) <> "" Then
                        myADSFileNamesShort(k) = "\" + System.IO.Path.GetFileNameWithoutExtension(myADSFileNames(k)) + System.IO.Path.GetExtension(myADSFileNames(k)).Replace(".", "_")
                    End If
                Next k
                Return myADSFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1)
            If myFirst Then 'Only do this stuff the first time
                myFirst = False

                'FIGURE OUT WHERE TO PUT THE MatLab program
                Dim MatLabDir As String = MechanismList1.SaveDirectory, NeedTempDir As Boolean = False
                NeedTempDir = IsNothing(MatLabDir)
                If Not NeedTempDir Then NeedTempDir = (MatLabDir = "")
                If NeedTempDir Then
                    MatLabDir = Path.GetDirectoryName(My.Computer.FileSystem.GetTempFileName) + "\MUF_MatLab"
                End If
                If Not My.Computer.FileSystem.DirectoryExists(MatLabDir) Then My.Computer.FileSystem.CreateDirectory(MatLabDir)
                'myMatLabFileName = myTextBoxContents
                myMatLabFileName = MatLabDir + "\MatLabProgram.m"
                Dim myMatLabFileNameInit As String = MatLabDir + "\MatLabProgram_Initialize.m"

                'Read in the MatLab Programs
                Dim MatLabProgInit() As Byte = MechValues(0).getBytes()
                Dim MatLabProg() As Byte = MechValues(1).getBytes()

                'Write out the MatLab files
                System.IO.File.WriteAllBytes(myMatLabFileNameInit, MatLabProgInit)
                System.IO.File.WriteAllBytes(myMatLabFileName, MatLabProg)

                FileExtensions = GetMatLabOutputExtensions()
                'If myMatLabFileName.Length < 5 Then MechanismList1.ErrorReport = "Could not find filename in definition string" : MechanismList1.FatalError = True : Return ToArray(Dummy)
                myMatLabPath = MatLabDir + "\FileExchange"
                If Not My.Computer.FileSystem.DirectoryExists(myMatLabPath) Then My.Computer.FileSystem.CreateDirectory(myMatLabPath)

                'Write out the input frequency list
                Dim myFrequencyList As New RealMatrix(MechanismList1.FrequencyList.NRows, 2, ".variables")
                For kk As Integer = 1 To MechanismList1.FrequencyList.NRows
                    myFrequencyList(kk, 1) = CDbl(kk) : myFrequencyList(kk, 2) = MechanismList1.FrequencyList(kk)
                Next kk
                myFrequencyList.Write(myMatLabPath + "\InputList.variables_binary")

                'Write out the suggested output time list
                Dim myTimeList As New RealMatrix(MechanismList1.TimeList.NRows, 2, ".variables")
                For kk As Integer = 1 To MechanismList1.TimeList.NRows
                    myTimeList(kk, 1) = CDbl(kk) : myTimeList(kk, 2) = MechanismList1.TimeList(kk)
                Next kk
                myTimeList.Write(myMatLabPath + "\SuggestedOutputList.variables_binary")

                'Initialize MatLab
                If IsNothing(myMatLab) Then
                    myMatLab = New MLApp.MLApp
                End If
                myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName) + "_Initialize")   'Run MatLab initialization routine

            End If

            'Output the parameters for MatLab
            Dim MatLabParameters As New RealMatrix(10, 2, ".variables") 'This will hold the parameters.
            For kk As Integer = 1 To 10
                MatLabParameters(kk, 1) = CDbl(kk)
                If kk >= 3 Then
                    Dim MatLabMatrices As RealMatrix = MechValues(kk + 1).getSParams(MechanismList1)
                    If IsNothing(MatLabMatrices.DataType) Then   'This entry must be a parameter, store it
                        MatLabParameters(kk, 2) = MechValues(kk + 1).MechanismValue(MechanismList1)
                    Else                                'This entry is a matrix, write it out
                        Dim Ext0 As String = MatLabMatrices.DataType.Replace("_binary", "")
                        MatLabMatrices.Write(myMatLabPath + "\MatLabMatrix" + kk.ToString + Ext0 + "_binary")
                    End If
                End If
            Next kk
            MatLabParameters.Write(myMatLabPath + "\MatLabParameters.variables_binary") 'Write out the parameters for MatLab

            'Output the repeated matrix for MatLab: MultipleModelInput.getSParams(MechanismList1)
            Dim MatLabMatrix As RealMatrix = MultipleModelInput(0).getSParams(MechanismList1)
            Dim Ext As String = MatLabMatrix.DataType.Replace("_binary", "")
            MatLabMatrix.Write(myMatLabPath + "\MatLabMatrix0" + Ext + "_binary")

            ''Test the conditions.
            'Dim myConditions As ConditionSupport = MechValues(1).getConditionSupport()
            'If Not IsNothing(myConditions) Then
            '    Dim ConditionsList() As String = myConditions.getNameList
            '    If Not IsNothing(ConditionsList) Then
            '        For Indx As Integer = 0 To ConditionsList.Count - 1
            '            Dim IsRealMatrix As Boolean = myConditions.IsRealMatrix(ConditionsList(Indx))
            '            If IsRealMatrix Then
            '                Dim Cond As RealMatrix = myConditions.getSParams(ConditionsList(Indx), MechanismList1)
            '                Dim nc As Integer = Cond.NCols
            '            Else
            '                Dim Cond As Double = myConditions.getDouble(ConditionsList(Indx), MechanismList1)
            '                Dim cv As Double = Cond
            '            End If
            '        Next Indx
            '    End If
            'End If


            'Run MatLab
            myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName))   'Run MatLab routine


            'Find the names of the files created by MATLAB. Do this only once.
            If myFirst2 Then
                myFirst2 = False
                'Count the files created by MATLAB
                Dim files As ReadOnlyCollection(Of String)
                files = My.Computer.FileSystem.GetFiles(myMatLabPath, FileIO.SearchOption.SearchTopLevelOnly, "MatLabMatrixOutput*.*")
                ReDim myADSFileNames(files.Count - 1)
                'Make a list of the file names for later
                Dim NFile As Integer = 0
                For Each File As String In files
                    myADSFileNames(NFile) = "" : NFile = NFile + 1
                    For k As Integer = 0 To FileExtensions.Count - 1
                        If System.IO.Path.GetExtension(File).ToLower = FileExtensions(k) + "_binary" Then
                            myADSFileNames(NFiles) = File : NFiles = NFiles + 1
                        End If
                    Next k
                Next File
                If NFiles <= 0 Then MechanismList1.ErrorReport = "Could not find any files created by MATLAB" : MechanismList1.FatalError = True : Return ToArray(Dummy)
            End If

            'Read in the result the user asked for from MATLAB and return it to the MUF in a format that the MUF understands
            Dim ADSOutput(NFiles - 1) As Object
            For k As Integer = 0 To NFiles - 1
                ADSOutput(k) = New RealMatrix(1)
                Dim FileName As String = myADSFileNames(k)
                'Check that MATLAB actually created the file we are going to ask for.
                If My.Computer.FileSystem.FileExists(FileName) Then
                    ADSOutput(k).Read(FileName)    'Read in the file created by ADS 
                Else
                    MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
                End If
            Next k

            Return ADSOutput    'Return the files created by ADS to the MUF

        End Function


    End Class


    ''' <summary>
    ''' Post processor calls a MatLab subroutine.
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_Run_ADS_Improved

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private myExtension As String = ""
        Private myADSFileName As String = ""
        Private myADSPath As String = ""
        Private myFirst As Boolean = True
        Private myFirst2 As Boolean = True
        Private myADSFileNames() As String  'The files that ADS created. Has "" when file does not have the correct data type.
        Private NFiles As Integer = 0       'The total number of files that ADS created.
        'The values that keep track of the input variables.
        Private Count_w1p As Integer = 0, Count_complex As Integer = 0, Count_s1p As Integer = 0, Count_w2p As Integer = 0, Count_s2p As Integer = 0, Count_s4p As Integer = 0, Count_variables As Integer = 0, Count_all As Integer = 0
        Private Inputs_w1p() As Integer, Inputs_complex() As Integer, Inputs_s1p() As Integer, Inputs_w2p() As Integer, Inputs_s2p() As Integer, Inputs_s4p() As Integer, Inputs_variables() As Integer

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Drop all of the data files that ADS will use here"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "ADS .cmd file in _wrk folder"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList() As String = Nothing  'The list of mechanism (model parameter) names for this model.
                'myNameList(0) = "ADS fixed input 1"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'Dim FileExtensions(45) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                'FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".model_archive" : FileExtensions(8) = ".cascade_archive" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                'FileExtensions(13) = ".complex"
                'For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                '    FileExtensions(14 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                '    FileExtensions(15 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                'Next i1
                Dim FileExtensions(11) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".model" : FileExtensions(2) = ".cascade"
                FileExtensions(3) = ".meas_archive" : FileExtensions(4) = ".complex" : FileExtensions(5) = ".cascade_archive"
                FileExtensions(6) = ".w1p" : FileExtensions(7) = ".w2p"
                FileExtensions(8) = ".s1p" : FileExtensions(9) = ".s2p"
                FileExtensions(10) = ".variables" : FileExtensions(11) = ".s4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Call CloseADS.cmd after each iteration (Slow, run full ADS program, Dummy.txt created in ADS)"
                PullDownList(1) = "Don't call CloseADS.cmd (Fast, run netlist.log, Dummy.txt created in ADS.cmd)"
                Return PullDownList
            End Get
        End Property
        Private Function GetADSOutputFileNames() As String()
            Dim FileNames(6) As String
            FileNames(0) = "Current"  'This is the list of aceptable MatLab file output file names 
            FileNames(1) = "Voltage"
            FileNames(2) = "Wave"
            FileNames(3) = "Power"
            FileNames(4) = "Model"
            FileNames(5) = "Measurement"
            FileNames(6) = "Transistor"
            Return FileNames
        End Function
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        Private Function GetADSOutputExtensions() As String()
            Dim FileExtensions(9) As String : FileExtensions(0) = ".waveform"  'This is the list of aceptable MatLab file output extensions 
            FileExtensions(1) = ".variables"
            FileExtensions(2) = ".complex"
            FileExtensions(3) = ".power"
            FileExtensions(4) = ".voltage"
            FileExtensions(5) = ".current"
            For i1 As Integer = 1 To 2 'Add in the .SNP AND .wnp wave files.
                FileExtensions(6 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                FileExtensions(7 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
            Next i1
            Return FileExtensions
        End Function
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(5) As String
                myDescription(0) = "This post processor calls ADS with the input .w1p, .w2p, .s1p, .s2p or .s4p files and instructs ADS to find a model, and then saves the model to disk."
                myDescription(1) = "The post processor puts the results in .citi files for ADS to read. The post processor also creates copies of .snp files that ADS can read in directly."
                myDescription(2) = "The default frequency list is determined from the first wavefile input to the post processor in the lower multiple-input list."
                myDescription(3) = "ADS must be loaded and ready to run the model extraction proceedure before you start the post processor. See the help file on how to set up ADS to preform the model extraction and communicate the result back to this post processor."
                myDescription(5) = "Written by Gustavo Avolio."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"   'A dummy in this case. The MUF will ignore this as multiple extensions can be returned.
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Improved ADS postprocessor"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myADSFileNamesShort(myADSFileNames.Count - 1) As String
                For k As Integer = 0 To myADSFileNames.Count - 1
                    myADSFileNamesShort(k) = ""
                    If myADSFileNames(k) <> "" Then
                        myADSFileNamesShort(k) = "\" + System.IO.Path.GetFileNameWithoutExtension(myADSFileNames(k)) + System.IO.Path.GetExtension(myADSFileNames(k)).Replace(".", "_")
                    End If
                Next k
                Return myADSFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1)
            '...Added by Gustavo: I need the frequency list to be written in the .cit file
            Dim Freq As RealMatrix = MechanismList1.FrequencyList
            Dim FileExtensions() As String = GetADSOutputExtensions()

            If myFirst Then 'Only do this stuff the first time

                myFirst = False
                myADSFileName = myTextBoxContents
                If myADSFileName.Length < 5 Then MechanismList1.ErrorReport = "Could not find filename in definition string" : MechanismList1.FatalError = True : Return ToArray(Dummy)
                myADSPath = Path.GetDirectoryName(myADSFileName) + "\data\FileExchange"
                If Not My.Computer.FileSystem.FileExists(myADSPath) Then My.Computer.FileSystem.CreateDirectory(myADSPath)

                'Clear out any files ADS may have created last time.
                Dim files As ReadOnlyCollection(Of String)
                files = My.Computer.FileSystem.GetFiles(myADSPath, FileIO.SearchOption.SearchTopLevelOnly, "*.*")
                If files.Count > 0 Then
                    For Each File As String In files
                        For k As Integer = 0 To FileExtensions.Count - 1
                            If System.IO.Path.GetExtension(File).ToLower.Replace("_binary", "") = FileExtensions(k) Then
                                If My.Computer.FileSystem.FileExists(File) Then My.Computer.FileSystem.DeleteFile(File, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.SendToRecycleBin)
                            End If
                        Next k
                    Next File

                End If

                'Figure out how many of each type of input file we have.
                Count_w1p = 0 : Count_complex = 0 : Count_s1p = 0 : Count_w2p = 0 : Count_s2p = 0 : Count_s4p = 0 : Count_variables = 0 : Count_all = MultipleModelInput.Count
                For kk As Integer = 0 To Count_all - 1
                    Dim ADSMatrices As RealMatrix = MultipleModelInput(kk).getSParams(MechanismList1)
                    If Not IsNothing(ADSMatrices.DataType) Then   'This entry must be a parameter, skip it
                        Dim Ext0 As String = ADSMatrices.DataType.Replace("_binary", "").ToLower
                        Select Case Ext0
                            Case ".s1p"
                                Count_s1p += 1
                                ReDim Preserve Inputs_s1p(Count_s1p - 1)
                                Inputs_s1p(Count_s1p - 1) = kk
                            Case ".s2p"
                                Count_s2p += 1
                                ReDim Preserve Inputs_s2p(Count_s2p - 1)
                                Inputs_s2p(Count_s2p - 1) = kk
                            Case ".s4p"
                                Count_s4p += 1
                                ReDim Preserve Inputs_s4p(Count_s4p - 1)
                                Inputs_s4p(Count_s4p - 1) = kk
                            Case ".w1p"
                                Count_w1p += 1
                                ReDim Preserve Inputs_w1p(Count_w1p - 1)
                                Inputs_w1p(Count_w1p - 1) = kk
                            Case ".complex"
                                Count_complex += 1
                                ReDim Preserve Inputs_complex(Count_complex - 1)
                                Inputs_complex(Count_complex - 1) = kk
                            Case ".w2p"
                                Count_w2p += 1
                                ReDim Preserve Inputs_w2p(Count_w2p - 1)
                                Inputs_w2p(Count_w2p - 1) = kk
                            Case ".variables"
                                Count_variables += 1
                                ReDim Preserve Inputs_variables(Count_variables - 1)
                                Inputs_variables(Count_variables - 1) = kk
                        End Select
                    End If
                Next kk

            End If

            'Get the Count_s1p .s1p matrices for ADS
            If Count_s1p > 0 Then
                Dim ADSInput(Count_s1p - 1) As RealMatrix
                For kk As Integer = 0 To Count_s1p - 1
                    Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_s1p(kk)).getSParams(MechanismList1)
                    ADSInput(kk).Fill(ADSMatrix)
                Next kk
                'Gustavo writes the citifile to myADSPath + "\s1p.cit" for ADS here
                CreateCITI(ADSInput, Freq, ".s1p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
            End If

            'Get the Count_s2p .s2p matrices for ADS
            If Count_s2p > 0 Then
                Dim ADSInput(Count_s2p - 1) As RealMatrix
                For kk As Integer = 0 To Count_s2p - 1
                    Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_s2p(kk)).getSParams(MechanismList1)
                    Call AddDC(ADSMatrix, MultipleModelInput(Inputs_s2p(kk)), MechanismList1)   'See if we can add in DC bias
                    ADSInput(kk).Fill(ADSMatrix)
                Next kk
                'Gustavo writes the citifile to myADSPath + "\s2p.cit" for ADS here
                CreateCITI(ADSInput, Freq, ".s2p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
            End If

            'Get the Count_s4p .s4p matrices for ADS
            If Count_s4p > 0 Then
                Dim ADSInput(Count_s4p - 1) As RealMatrix
                For kk As Integer = 0 To Count_s4p - 1
                    Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_s4p(kk)).getSParams(MechanismList1)
                    ADSInput(kk).Fill(ADSMatrix)
                Next kk
                'Gustavo writes the citifile to myADSPath + "\s4p.cit" for ADS here
                CreateCITI(ADSInput, Freq, ".s4p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
            End If

            'Get the Count_complex .complex matrices for ADS
            If Count_complex > 0 Then
                Dim ADSInput(Count_complex - 1) As RealMatrix
                For kk As Integer = 0 To Count_complex - 1
                    Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_complex(kk)).getSParams(MechanismList1)
                    ADSInput(kk).Fill(ADSMatrix)
                Next kk
                CreateCITIforComplex(ADSInput, Freq, ".complex", myADSPath, Count_complex)
                'Gustavo writes the citifile to myADSPath + "\complex.cit" for ADS here
            End If

            'Get the Count_w1p .w1p matrices for ADS
            If Count_w1p > 0 Then
                Dim ADSInput(Count_w1p - 1) As RealMatrix
                For kk As Integer = 0 To Count_w1p - 1
                    Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_w1p(kk)).getSParams(MechanismList1)
                    Call AddDC(ADSMatrix, MultipleModelInput(Inputs_w1p(kk)), MechanismList1)   'See if we can add in DC bias
                    ADSInput(kk).Fill(ADSMatrix)
                Next kk
                'Gustavo writes the citifile to myADSPath + "\w1p.cit" for ADS here
                CreateCITI(ADSInput, Freq, ".w1p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
            End If

            'Get the Count_w2p .w2p matrices for ADS
            If Count_w2p > 0 Then
                Dim ADSInput(Count_w2p - 1) As RealMatrix
                For kk As Integer = 0 To Count_w2p - 1
                    Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_w2p(kk)).getSParams(MechanismList1)
                    Call AddDC(ADSMatrix, MultipleModelInput(Inputs_w2p(kk)), MechanismList1)   'See if we can add in DC bias
                    ADSInput(kk).Fill(ADSMatrix)
                Next kk
                'Gustavo writes the citifile to myADSPath + "\w2p.cit" for ADS here
                CreateCITI(ADSInput, Freq, ".w2p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
            End If

            'Get the Count_variables .variables matrices for ADS
            If Count_variables > 0 Then

                Dim ADSInput(Count_variables - 1) As RealMatrix
                For kk As Integer = 0 To Count_variables - 1
                    Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_variables(kk)).getSParams(MechanismList1)
                    ADSInput(kk).Fill(ADSMatrix)
                Next kk
                Dim Index As Integer = ADSInput(0).NRows
                If Count_variables > 1 Then
                    For kk As Integer = 0 To Count_variables - 1
                        If Index <> ADSInput(kk).NRows Then
                            MsgBox("Error: All variable lists must be of the same length!", MsgBoxStyle.Critical, "Run ADS Improved")
                        End If
                    Next kk
                End If
                Call CreateCITIfromVAR(ADSInput, Index, ".variables", myADSPath, Count_variables)

            End If

            'Gustavo will run ADS here. ADS will take the five citi files and create some output files
            If IO.File.Exists(myADSPath + "\dummy.txt") Then IO.File.Delete(myADSPath + "\dummy.txt")
            Dim RunADSCommandFile As String = myTextBoxContents
            Dim DummyFile As Boolean = False
            'RunADS.cmd runs ads.exe and the macro which contains the instructions to be executed by ADS
            Dim ID As Integer = Shell(RunADSCommandFile, 6, True, 10000)
            'System.Diagnostics.Process.Start(RunADSCommandFile)
            'This loop freezes VB untill ADS finishes operations
            While (Not DummyFile)
                DummyFile = IO.File.Exists(myADSPath + "\dummy.txt")
                Threading.Thread.Sleep(100) 'Wait for 100 ms
            End While

            'Close ADS
            If myPullDownSelection1 <= 0 Then
                Dim CloseADSFileName As String = Path.GetDirectoryName(myTextBoxContents) + "\CloseADS.cmd"
                Threading.Thread.Sleep(100) 'Wait for 100 ms
                Shell(CloseADSFileName, 6, True, 10000)
            End If

            'Add a pause to give ADS some extra time to create and close all files.
            Threading.Thread.Sleep(50) 'Wait for 100 ms
            GC.Collect()    'Collect garbage
            Threading.Thread.Sleep(50) 'Wait for 100 ms

            'Find the names of the files created by ADS. Do this only once.
            If myFirst2 Then
                myFirst2 = False
                'Count the files created by ADS
                Dim files As ReadOnlyCollection(Of String)
                files = My.Computer.FileSystem.GetFiles(myADSPath, FileIO.SearchOption.SearchTopLevelOnly, "*.*")
                ReDim myADSFileNames(files.Count - 1)
                'Make a list of the file names for later
                Dim NFile As Integer = 0
                For Each File As String In files
                    myADSFileNames(NFile) = "" : NFile = NFile + 1
                    For k As Integer = 0 To FileExtensions.Count - 1
                        If System.IO.Path.GetExtension(File).ToLower.Replace("_binary", "") = FileExtensions(k) Then
                            If InStr(System.IO.Path.GetFileNameWithoutExtension(File).ToLower, "muf2ads") = 0 Then
                                myADSFileNames(NFiles) = File : NFiles = NFiles + 1
                            End If
                        End If
                    Next k
                Next File
                If NFiles <= 0 Then MechanismList1.ErrorReport = "Could not find any files created by ADS" : MechanismList1.FatalError = True : Return ToArray(Dummy)
            End If

            'Read in the result the user asked for from ADS and return it to the MUF in a format that the MUF understands
            Dim ADSOutput(NFiles - 1) As Object
            For k As Integer = 0 To NFiles - 1
                ADSOutput(k) = New RealMatrix(1)
                Dim FileName As String = myADSFileNames(k)
                'Check that ADS actually created the file we are going to ask for.
                If My.Computer.FileSystem.FileExists(FileName) Then
                    ADSOutput(k).Read(FileName)    'Read in the file created by ADS 
                Else
                    MechanismList1.ErrorReport = "Could not find the ADS file " + FileName : MechanismList1.FatalError = True
                End If
            Next k

            Return ADSOutput    'Return the files created by ADS to the MUF

        End Function

    End Class


    ''' <summary>
    ''' Post processor calls ICCAP and then ADS subroutine.
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_Run_ICCAP

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private myExtension As String = ""
        Private myADSFileName As String = ""
        Private myADSPath As String = ""
        Private myICCAPPath As String = ""
        Private myICCAPFileName As String = ""
        Private myMDIFFileName As String = ""
        Private myFirst As Boolean = True
        Private myFirst2 As Boolean = True
        Private myADSFileNames() As String  'The files that ADS created. Has "" when file does not have the correct data type.
        Private NFiles As Integer = 0       'The total number of files that ADS created.
        'The values that keep track of the input variables.
        Private Count_w1p As Integer = 0, Count_complex As Integer = 0, Count_s1p As Integer = 0, Count_w2p As Integer = 0, Count_s2p As Integer = 0, Count_s4p As Integer = 0, Count_variables As Integer = 0, Count_all As Integer = 0
        Private Inputs_w1p() As Integer, Inputs_complex() As Integer, Inputs_s1p() As Integer, Inputs_w2p() As Integer, Inputs_s2p() As Integer, Inputs_s4p() As Integer, Inputs_variables() As Integer

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Drop all of the data files that ADS will use here"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "ADS file;ICCAP file;MDIF file"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(4) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "ICCAP wave-parameter calibration matrix (.s4p)"
                myNameList(1) = "ICCAP S-parameter calibration matrix T=25C (.s4p)"
                myNameList(2) = "ICCAP S-parameter switch terms T=25C (.s2p)"
                myNameList(3) = "ICCAP S-parameter calibration matrix T=85C (.s4p)"
                myNameList(4) = "ICCAP S-parameter switch terms T=85C (.s2p)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'Dim FileExtensions(45) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                'FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".model_archive" : FileExtensions(8) = ".cascade_archive" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                'FileExtensions(13) = ".complex"
                'For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                '    FileExtensions(14 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                '    FileExtensions(15 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                'Next i1
                Dim FileExtensions(12) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".model" : FileExtensions(2) = ".cascade"
                FileExtensions(3) = ".meas_archive" : FileExtensions(4) = ".complex" : FileExtensions(5) = ".switch"
                FileExtensions(6) = ".w1p" : FileExtensions(7) = ".w2p"
                FileExtensions(8) = ".s1p" : FileExtensions(9) = ".s2p"
                FileExtensions(10) = ".variables" : FileExtensions(11) = ".s4p" : FileExtensions(12) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Call CloseADS.cmd after each iteration (Slow, run full ADS program, Dummy.txt created in ADS)"
                PullDownList(1) = "Don't call CloseADS.cmd (Fast, run netlist.log, Dummy.txt created in ADS.cmd)"
                PullDownList(2) = "Don't call ADS at all."
                Return PullDownList
            End Get
        End Property
        Private Function GetADSOutputFileNames() As String()
            Dim FileNames(6) As String
            FileNames(0) = "Current"  'This is the list of aceptable MatLab file output file names 
            FileNames(1) = "Voltage"
            FileNames(2) = "Wave"
            FileNames(3) = "Power"
            FileNames(4) = "Model"
            FileNames(5) = "Measurement"
            FileNames(6) = "Transistor"
            Return FileNames
        End Function
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        Private Function GetADSOutputExtensions() As String()
            Dim FileExtensions(9) As String : FileExtensions(0) = ".waveform"  'This is the list of aceptable MatLab file output extensions 
            FileExtensions(1) = ".variables"
            FileExtensions(2) = ".complex"
            FileExtensions(3) = ".power"
            FileExtensions(4) = ".voltage"
            FileExtensions(5) = ".current"
            For i1 As Integer = 1 To 2 'Add in the .SNP AND .wnp wave files.
                FileExtensions(6 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                FileExtensions(7 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
            Next i1
            Return FileExtensions
        End Function
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(7) As String
                myDescription(0) = "This post processor first calls ICCAP to develop a model and save it to disk, then calls ADS to evaluate the model."
                myDescription(1) = "The post processor puts the ADS results in .citi files for ADS to read. The post processor also creates copies of .snp files that ADS can read in directly."
                myDescription(2) = "The default frequency list is determined from scattering-parameter calibration. You may want to suppress interpolation to allow different simulations to be run on different grids. This requires care as running calculations on different frequency grids may cause the program to crash."
                myDescription(3) = "ADS and ICCAP should not be loaded before you start the post processor. "
                myDescription(4) = "In the text box enter ADS .cmd file in the ADS _wrk directory, a semicolon, the ICCAP .cmd file in the ICCAP directory, a semicolon, and the file name of the .MDIF file that ICCAP will create. "
                myDescription(5) = "The .mdm files should be placed in subdirectories of _wrk/ICCAP. The .mdm files at T=85C should have _Temp2 in the path so that they are corrected with the calibration coefficients taken at T=85C. "
                myDescription(7) = "Written by Dylan Williams and Gustavo Avolio."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".variables"   'A dummy in this case. The MUF will ignore this as multiple extensions can be returned.
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "ICCAP postprocessor"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myADSFileNamesShort(myADSFileNames.Count - 1) As String
                For k As Integer = 0 To myADSFileNames.Count - 1
                    myADSFileNamesShort(k) = ""
                    If myADSFileNames(k) <> "" Then
                        myADSFileNamesShort(k) = "\" + System.IO.Path.GetFileNameWithoutExtension(myADSFileNames(k)) + System.IO.Path.GetExtension(myADSFileNames(k)).Replace(".", "_")
                    End If
                Next k
                Return myADSFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1)
            '...Added by Gustavo: I need the frequency list to be written in the .cit file
            Dim Freq As RealMatrix = MultipleModelInput(0).getSParams(MechanismList1)
            Dim FileExtensions() As String = GetADSOutputExtensions()
            ''The start, stop and step frequencies
            'Dim WF1 As Double = MechValues(1), WF2 As Double = MechValues(2), WF3 As Double = MechValues(3)
            'Dim SF1 As Double = MechValues(6), SF2 As Double = MechValues(7), SF3 As Double = MechValues(8)
            'Dim AF1 As Double = MechValues(9), AF2 As Double = MechValues(10), AF3 As Double = MechValues(11)

            If myFirst Then 'Only do this stuff the first time

                'General initialization.
                myFirst = False
                Dim myString() As String = myTextBoxContents.Split(";")
                If myString(0).Length < 5 Then MechanismList1.ErrorReport = "Could not find filename in definition string" : MechanismList1.FatalError = True : Return ToArray(Dummy)
                Select Case myString.Length

                    Case 1  'The default. Handle this as before. Only the path to the ADS directory was specified.
                        myADSFileName = myTextBoxContents.Trim
                        myADSPath = Path.GetDirectoryName(myADSFileName) + "\data\FileExchange"
                        myICCAPPath = Path.GetDirectoryName(myADSFileName) + "\ICCAP"
                        myICCAPFileName = myICCAPPath + "\RunICCAP.cmd"
                        myMDIFFileName = myICCAPPath + "\HBT_Modeling.mdif"

                    Case 2  'Let the user specify the ICCAP location as well.
                        myADSFileName = myString(0).Trim
                        myADSPath = Path.GetDirectoryName(myADSFileName) + "\data\FileExchange"
                        myICCAPFileName = myString(1).Trim
                        myICCAPPath = Path.GetDirectoryName(myICCAPFileName)
                        myMDIFFileName = myICCAPPath + "\HBT_Modeling.mdif"

                    Case 3  'Let the user specify the ICCAP location as well.
                        myADSFileName = myString(0).Trim
                        myADSPath = Path.GetDirectoryName(myADSFileName) + "\data\FileExchange"
                        myICCAPFileName = myString(1).Trim
                        myICCAPPath = Path.GetDirectoryName(myICCAPFileName)
                        myMDIFFileName = myString(2).Trim

                    Case Else   'Error
                        MechanismList1.ErrorReport = "String with post processor paths incorrect!"
                        MechanismList1.FatalError = True
                        Return ToArray(Dummy)

                End Select
                If Not My.Computer.FileSystem.FileExists(myADSPath) Then My.Computer.FileSystem.CreateDirectory(myADSPath)

                If myPullDownSelection1 < 2 Then    'ADS initialization.

                    'Clear out any files ADS may have created last time.
                    Dim files As ReadOnlyCollection(Of String)
                    files = My.Computer.FileSystem.GetFiles(myADSPath, FileIO.SearchOption.SearchTopLevelOnly, "*.*")
                    If files.Count > 0 Then
                        For Each File As String In files
                            For k As Integer = 0 To FileExtensions.Count - 1
                                If System.IO.Path.GetExtension(File).ToLower.Replace("_binary", "") = FileExtensions(k) Then
                                    If My.Computer.FileSystem.FileExists(File) Then My.Computer.FileSystem.DeleteFile(File, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.SendToRecycleBin)
                                End If
                            Next k
                        Next File

                    End If

                    'Figure out how many of each type of input file we have.
                    Count_w1p = 0 : Count_complex = 0 : Count_s1p = 0 : Count_w2p = 0 : Count_s2p = 0 : Count_s4p = 0 : Count_variables = 0 : Count_all = MultipleModelInput.Count
                    For kk As Integer = 0 To Count_all - 1
                        Dim ADSMatrices As RealMatrix = MultipleModelInput(kk).getSParams(MechanismList1)
                        If Not IsNothing(ADSMatrices.DataType) Then   'This entry must be a parameter, skip it
                            Dim Ext0 As String = ADSMatrices.DataType.Replace("_binary", "").ToLower
                            Select Case Ext0
                                Case ".s1p"
                                    Count_s1p += 1
                                    ReDim Preserve Inputs_s1p(Count_s1p - 1)
                                    Inputs_s1p(Count_s1p - 1) = kk
                                Case ".s2p"
                                    Count_s2p += 1
                                    ReDim Preserve Inputs_s2p(Count_s2p - 1)
                                    Inputs_s2p(Count_s2p - 1) = kk
                                Case ".s4p"
                                    Count_s4p += 1
                                    ReDim Preserve Inputs_s4p(Count_s4p - 1)
                                    Inputs_s4p(Count_s4p - 1) = kk
                                Case ".w1p"
                                    Count_w1p += 1
                                    ReDim Preserve Inputs_w1p(Count_w1p - 1)
                                    Inputs_w1p(Count_w1p - 1) = kk
                                Case ".complex"
                                    Count_complex += 1
                                    ReDim Preserve Inputs_complex(Count_complex - 1)
                                    Inputs_complex(Count_complex - 1) = kk
                                Case ".w2p"
                                    Count_w2p += 1
                                    ReDim Preserve Inputs_w2p(Count_w2p - 1)
                                    Inputs_w2p(Count_w2p - 1) = kk
                                Case ".variables"
                                    Count_variables += 1
                                    ReDim Preserve Inputs_variables(Count_variables - 1)
                                    Inputs_variables(Count_variables - 1) = kk
                            End Select
                        End If
                    Next kk

                End If

            End If


            'Get ready to run ICCAP.

            'Get the S-parameter calibration files (wave-file calibration in (0) for later)
            Dim CalS4P_Waves As RealMatrix = MechValues(0).getSParams(MechanismList1)
            Dim CalS4P As RealMatrix = MechValues(1).getSParams(MechanismList1)
            Dim SwitchTerms As RealMatrix = MechValues(2).getSParams(MechanismList1)
            Dim CalS4P_T85 As RealMatrix = MechValues(3).getSParams(MechanismList1)
            Dim SwitchTerms_T85 As RealMatrix = MechValues(4).getSParams(MechanismList1)

            'Get a list of mdm files that need to be updated.
            Dim filesmdm As ReadOnlyCollection(Of String)
            filesmdm = My.Computer.FileSystem.GetFiles(myICCAPPath, FileIO.SearchOption.SearchAllSubDirectories, "*.mdm")
            'Step through each of the files and update it
            For Each file As String In filesmdm
                Dim filen1 As String = Path.GetDirectoryName(file)
                Dim filen2 As String = Path.GetFileNameWithoutExtension(file)
                Dim filen3 As String = Path.GetExtension(file)
                If filen1.ToLower <> myICCAPPath.ToLower And InStr(filen2, "_calibrated") = 0 And filen3.ToLower = ".mdm" Then    'Make sure that this .mdm file and is not already calibrated.
                    Dim fileout As String = filen1 + "\" + filen2 + "_calibrated" + filen3
                    'Calibrate the raw data and save back to disk.
                    If InStr(filen1.ToLower, "_temp2\") > 0 Then    'T=85C
                        Call UpdateMDM(file, fileout, CalS4P_T85, SwitchTerms_T85)
                    Else                                            'T=25C
                        Call UpdateMDM(file, fileout, CalS4P, SwitchTerms)
                    End If
                End If
            Next file

            'Run the ICCAP program
            If IO.File.Exists(myICCAPPath + "\iccap_out.variables") Then IO.File.Delete(myICCAPPath + "\iccap_out.variables")
            If IO.File.Exists(myICCAPPath + "\iccap_done.txt") Then IO.File.Delete(myICCAPPath + "\iccap_done.txt")
            Dim ID1 As Integer = Shell(myICCAPFileName, 6, True, 1000000)
            'Wait first to see the variables file generated.
            Dim DummyFile1 As Boolean = False
            While (Not DummyFile1)
                DummyFile1 = IO.File.Exists(myICCAPPath + "\iccap_out.variables")
                Threading.Thread.Sleep(100) 'Wait for 100 ms
            End While
            'Now wait to make sure that ICCAP has fully exited
            DummyFile1 = False
            While (Not DummyFile1)
                DummyFile1 = IO.File.Exists(myICCAPPath + "\iccap_done.txt")
                Threading.Thread.Sleep(100) 'Wait for 100 ms
            End While
            Threading.Thread.Sleep(500) 'Wait for 500 sm to make sure that ICCAP is closed.

            'Get the model variables from ICCAP
            Dim ICCAP_variables As New RealMatrix(5, 2, ".variables")
            ICCAP_variables.Read(myICCAPPath + "\iccap_out.variables")

            'Update the MDIF file created by ICCAP by removing all of the .hbt's
            If My.Computer.FileSystem.FileExists(myMDIFFileName) Then
                Dim fileContents As String
                fileContents = My.Computer.FileSystem.ReadAllText(myMDIFFileName)
                fileContents = fileContents.Replace("hbt.", "")
                My.Computer.FileSystem.WriteAllText(myMDIFFileName, fileContents, False)
                ''Keep a record when debugging
                'Dim dateTimeAsString As String = DateTime.Now.ToString("HH_mm_ss")
                'Dim myMDIFFFileNameNew As String = Path.GetDirectoryName(myMDIFFileName) + "\" + Path.GetFileNameWithoutExtension(myMDIFFileName) + "_" + dateTimeAsString + Path.GetExtension(myMDIFFileName)
                'My.Computer.FileSystem.CopyFile(myMDIFFileName, myMDIFFFileNameNew)

                'Put together the complete mdif file with all of the data for ADS to use in statistical calculations
                Dim myMDIFFFileNameNew As String = Path.GetDirectoryName(myMDIFFileName) + "\" + Path.GetFileNameWithoutExtension(myMDIFFileName) + "_Complete" + Path.GetExtension(myMDIFFileName)
                'Now strip out the REM Model line. This should be the first line.
                Dim IPos As Integer = 0
                If InStr(fileContents, "REM Model") = 1 Then
                    IPos = InStr(fileContents, vbCrLf)
                End If
                Dim fileContentsREM As String = Left(fileContents, IPos)
                Dim fileContentsBody As String = Mid(fileContents, IPos + 1)
                'OK. Ready to save things.
                If MechanismList1.InitializeFlag Then   'This is the first time around. Clear out the large mdif file.
                    If Not FileSystem.FileExists(myMDIFFFileNameNew) Then
                        My.Computer.FileSystem.WriteAllText(myMDIFFFileNameNew, fileContentsREM + vbCrLf + vbCrLf + "VAR MCindx(1) = 0" + vbCrLf + "VAR CVindx(1) = 0" + vbCrLf + vbCrLf, False)
                        My.Computer.FileSystem.WriteAllText(myMDIFFFileNameNew, fileContentsBody, True)
                    End If
                Else
                    If MechanismList1.IsMonteCarloSimulation Then   'This is a MonteCarlo Simulation. Append to the file
                        My.Computer.FileSystem.WriteAllText(myMDIFFFileNameNew, vbCrLf + vbCrLf + "VAR MCindx(1) = " + MechanismList1.Pointer.ToString + vbCrLf + "VAR CVindx(1) = 0" + vbCrLf + vbCrLf, True)
                        My.Computer.FileSystem.WriteAllText(myMDIFFFileNameNew, fileContentsBody, True)
                    Else   'This is a Covariance Simulation. Append to the file
                        My.Computer.FileSystem.WriteAllText(myMDIFFFileNameNew, vbCrLf + vbCrLf + "VAR MCindx(1) = 0" + vbCrLf + "VAR CVindx(1) = " + MechanismList1.Pointer.ToString + vbCrLf + vbCrLf, True)
                        My.Computer.FileSystem.WriteAllText(myMDIFFFileNameNew, fileContentsBody, True)
                    End If
                End If

            End If

            'Copy the ICCAP model to the ADS directory?
            'Currently ADS cmd in C:\LSNAData\5March2015\testVB2ADS_wrk 
            'Currently iccap files in C:\LSNAData\5March2015\testVB2ADS_wrk\iccap 
            'Currently ADS HOME directory in C:\LSNAData\ADSHOME\hpeesof\circuit\config



            If myPullDownSelection1 = 2 Then    'Don't call ADS at all. Just pass out the model variables.

                Return ToArray(ICCAP_variables)

            Else                                'Call ADS

                'Clear out ADS files in transfer directory.
                Dim ADS_files As ReadOnlyCollection(Of String)
                ADS_files = My.Computer.FileSystem.GetFiles(myADSPath, FileIO.SearchOption.SearchTopLevelOnly, "*.*")
                For Each file As String In ADS_files
                    My.Computer.FileSystem.DeleteFile(file, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.DeletePermanently)
                Next file

                'Get the Count_s1p .s1p matrices for ADS
                If Count_s1p > 0 Then
                    Dim ADSInput(Count_s1p - 1) As RealMatrix
                    For kk As Integer = 0 To Count_s1p - 1
                        Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_s1p(kk)).getSParams(MechanismList1)
                        ADSInput(kk).Fill(ADSMatrix)
                    Next kk
                    'Gustavo writes the citifile to myADSPath + "\s1p.cit" for ADS here
                    CreateCITI(ADSInput, Freq, ".s1p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
                End If

                'Get the Count_s2p .s2p matrices for ADS
                If Count_s2p > 0 Then
                    Dim ADSInput(Count_s2p - 1) As RealMatrix
                    For kk As Integer = 0 To Count_s2p - 1
                        Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_s2p(kk)).getSParams(MechanismList1)
                        Call AddDC(ADSMatrix, MultipleModelInput(Inputs_s2p(kk)), MechanismList1)   'See if we can add in DC bias
                        ADSInput(kk).Fill(ADSMatrix)
                    Next kk
                    'Gustavo writes the citifile to myADSPath + "\s2p.cit" for ADS here
                    CreateCITI(ADSInput, Freq, ".s2p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
                End If

                'Get the Count_s4p .s4p matrices for ADS
                If Count_s4p > 0 Then
                    Dim ADSInput(Count_s4p - 1) As RealMatrix
                    For kk As Integer = 0 To Count_s4p - 1
                        Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_s4p(kk)).getSParams(MechanismList1)
                        ADSInput(kk).Fill(ADSMatrix)
                    Next kk
                    'Gustavo writes the citifile to myADSPath + "\s4p.cit" for ADS here
                    CreateCITI(ADSInput, Freq, ".s4p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
                End If

                'Get the Count_complex .complex matrices for ADS
                If Count_complex > 0 Then
                    Dim ADSInput(Count_complex - 1) As RealMatrix
                    For kk As Integer = 0 To Count_complex - 1
                        Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_complex(kk)).getSParams(MechanismList1)
                        ADSInput(kk).Fill(ADSMatrix)
                    Next kk
                    CreateCITIforComplex(ADSInput, Freq, ".complex", myADSPath, Count_complex)
                    'Gustavo writes the citifile to myADSPath + "\complex.cit" for ADS here
                End If

                'Get the Count_w1p .w1p matrices for ADS
                If Count_w1p > 0 Then
                    Dim ADSInput(Count_w1p - 1) As RealMatrix
                    For kk As Integer = 0 To Count_w1p - 1
                        Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_w1p(kk)).getSParams(MechanismList1)
                        Call AddDC(ADSMatrix, MultipleModelInput(Inputs_w1p(kk)), MechanismList1)   'See if we can add in DC bias
                        ADSInput(kk).Fill(ADSMatrix)
                    Next kk
                    'Gustavo writes the citifile to myADSPath + "\w1p.cit" for ADS here
                    CreateCITI(ADSInput, Freq, ".w1p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
                End If

                'Get the Count_w2p .w2p matrices for ADS
                If Count_w2p > 0 Then
                    Dim ADSInput(Count_w2p - 1) As RealMatrix
                    For kk As Integer = 0 To Count_w2p - 1
                        Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_w2p(kk)).getSParams(MechanismList1)
                        Call AddDC(ADSMatrix, MultipleModelInput(Inputs_w2p(kk)), MechanismList1)   'See if we can add in DC bias
                        ADSInput(kk).Fill(ADSMatrix)
                    Next kk
                    'Gustavo writes the citifile to myADSPath + "\w2p.cit" for ADS here
                    CreateCITI(ADSInput, Freq, ".w2p", myADSPath, Count_s1p, Count_s2p, Count_s4p, Count_w1p, Count_w2p)
                End If

                'Get the Count_variables .variables matrices for ADS
                If Count_variables > 0 Then

                    Dim ADSInput(Count_variables - 1) As RealMatrix
                    For kk As Integer = 0 To Count_variables - 1
                        Dim ADSMatrix As RealMatrix = MultipleModelInput(Inputs_variables(kk)).getSParams(MechanismList1)
                        ADSInput(kk).Fill(ADSMatrix)
                    Next kk
                    Dim Index As Integer = ADSInput(0).NRows
                    If Count_variables > 1 Then
                        For kk As Integer = 0 To Count_variables - 1
                            If Index <> ADSInput(kk).NRows Then
                                MsgBox("Error: All variable lists must be of the same length!", MsgBoxStyle.Critical, "Run ADS Improved")
                            End If
                        Next kk
                    End If
                    Call CreateCITIfromVAR(ADSInput, Index, ".variables", myADSPath, Count_variables)

                End If

                'Run ADS. ADS will take the five citi files and create some output files
                If IO.File.Exists(myADSPath + "\dummy.txt") Then IO.File.Delete(myADSPath + "\dummy.txt")
                Dim DummyFile As Boolean = False
                'RunADS.cmd runs ads.exe and the macro which contains the instructions to be executed by ADS
                Dim ID As Integer = Shell(myADSFileName, 6, True, 10000)
                'System.Diagnostics.Process.Start(myADSFileName)
                'This loop freezes VB untill ADS finishes operations
                While (Not DummyFile)
                    DummyFile = IO.File.Exists(myADSPath + "\dummy.txt")
                    Threading.Thread.Sleep(100) 'Wait for 100 ms
                End While

                'Close ADS
                If myPullDownSelection1 <= 0 Then
                    Dim CloseADSFileName As String = Path.GetDirectoryName(myADSFileName) + "\CloseADS.cmd"
                    Threading.Thread.Sleep(100) 'Wait for 100 ms
                    Shell(CloseADSFileName, 6, True, 10000)
                End If

                'Add a pause to give ADS some extra time to create and close all files.
                Threading.Thread.Sleep(50) 'Wait for 100 ms
                GC.Collect()    'Collect garbage
                Threading.Thread.Sleep(50) 'Wait for 100 ms

                'Find the names of the files created by ADS. Do this only once.
                If myFirst2 Then
                    myFirst2 = False
                    'Count the files created by ADS
                    Dim files As ReadOnlyCollection(Of String)
                    files = My.Computer.FileSystem.GetFiles(myADSPath, FileIO.SearchOption.SearchTopLevelOnly, "*.*")
                    ReDim myADSFileNames(files.Count - 1)
                    'Make a list of the file names for later
                    Dim NFile As Integer = 0
                    For Each File As String In files
                        myADSFileNames(NFile) = "" : NFile = NFile + 1
                        For k As Integer = 0 To FileExtensions.Count - 1
                            If System.IO.Path.GetExtension(File).ToLower.Replace("_binary", "") = FileExtensions(k) Then
                                If InStr(System.IO.Path.GetFileNameWithoutExtension(File).ToLower, "muf2ads") = 0 Then
                                    myADSFileNames(NFiles) = File : NFiles = NFiles + 1
                                End If
                            End If
                        Next k
                    Next File
                    If NFiles <= 0 Then MechanismList1.ErrorReport = "Could not find any files created by ADS" : MechanismList1.FatalError = True : Return ToArray(Dummy)
                End If

                'Read in the result the user asked for from ADS and return it to the MUF in a format that the MUF understands
                Dim ADSOutput(NFiles) As Object
                ADSOutput(NFiles) = ICCAP_variables
                For k As Integer = 0 To NFiles - 1
                    ADSOutput(k) = New RealMatrix(1)
                    Dim FileName As String = myADSFileNames(k)
                    'Check that ADS actually created the file we are going to ask for.
                    If My.Computer.FileSystem.FileExists(FileName) Then
                        ADSOutput(k).Read(FileName)    'Read in the file created by ADS 
                    Else
                        MechanismList1.ErrorReport = "Could not find the ADS file " + FileName : MechanismList1.FatalError = True
                    End If
                Next k

                Return ADSOutput    'Return the files created by ADS to the MUF

            End If

        End Function

        'Private Function SelectFrequencies(ByRef MatrixIn As RealMatrix, ByVal FStart As Double, ByVal FStop As Double, ByVal FStep As Double) As RealMatrix

        '    Dim n As Integer = CInt((FStop - FStart) / FStep) + 1
        '    Dim Indices(n + 1) As Integer
        '    For Index = 1 To n + 1
        '        Dim Ftarget = FStop + CDbl(Index - 1) * FStep
        '        For k As Integer = 1 To MatrixIn.NRows
        '            If Math.Abs(MatrixIn(k, 1) - Ftarget) < 0.000000001 Then Indices(Index) = k
        '        Next k
        '    Next Index

        '    If MatrixIn(1, 1) = 0.0 And FStart <> 0.0 Then  'Need to add in 0 frequency

        '        Indices(0) = 1
        '        Dim MatrixOut As New RealMatrix(n + 2, MatrixIn.NCols, MatrixIn.DataType)
        '        For Index As Integer = 0 To n + 1
        '            For k As Integer = 1 To MatrixIn.NCols
        '                MatrixOut(Index + 1, k) = MatrixIn(Indices(Index), k)
        '            Next k
        '        Next Index
        '        Return MatrixOut

        '    Else    'No zero frequency or zero frequency already in list

        '        Dim MatrixOut As New RealMatrix(n + 1, MatrixIn.NCols, MatrixIn.DataType)
        '        For Index As Integer = 1 To n + 1
        '            For k As Integer = 1 To MatrixIn.NCols
        '                MatrixOut(Index, k) = MatrixIn(Indices(Index), k)
        '            Next k
        '        Next Index
        '        Return MatrixOut

        '    End If

        'End Function

    End Class

    Private Sub CreateCITI(ByRef Data() As RealMatrix, ByRef frequency As RealMatrix, ByVal Extension As String, ByVal myADSPath As String, ByVal Count_s1p As Integer, ByVal Count_s2p As Integer, ByVal Count_s4p As Integer, ByVal Count_w1p As Integer, ByVal Count_w2p As Integer)
        Dim FileName As String = "\" + Extension.Split(".")(1) + ".citi"
        Dim FileName2(Data.Count - 1) As String, Header(0) As String
        Header(0) = "# GHz S RI R 50"
        For k As Integer = 0 To Data.Count - 1
            FileName2(k) = "\MUF2ADS" + k.ToString + Extension
        Next
        'Independent variables of Citifile

        Dim FreqList(frequency.NRows - 1) As String
        'Create frequency list
        For index = 1 To FreqList.Length
            FreqList(index - 1) = frequency(index, 1).ToString
        Next

        Select Case Extension
            Case ".s1p"
                Dim S11(Count_s1p * frequency.NRows - 1) As String
                Dim NExp(Count_s1p - 1) As String
                For index = 0 To Count_s1p - 1
                    NExp(index) = index.ToString
                Next
                'Initialize Citifile
                InitializeCITI(myADSPath + FileName, Extension, NExp, FreqList)
                '...Read in from the input files
                For k As Integer = 1 To Count_s1p
                    Dim myData As RealMatrix = Data(k - 1)
                    'Write out the .snp file.
                    myData.Write(myADSPath + FileName2(k - 1), Header) 'add "# GHz S RI R 50")
                    For h As Integer = 1 To frequency.NRows
                        S11((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 2).ToString, myData(h, 3).ToString)
                    Next
                Next
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S11)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)

            Case ".s2p"
                Dim S11(Count_s2p * frequency.NRows - 1) As String : Dim S12(Count_s2p * frequency.NRows - 1) As String
                Dim S21(Count_s2p * frequency.NRows - 1) As String : Dim S22(Count_s2p * frequency.NRows - 1) As String
                Dim NExp(Count_s2p - 1) As String
                For index = 0 To Count_s2p - 1
                    NExp(index) = index.ToString
                Next
                'Initialize Citifile
                InitializeCITI(myADSPath + FileName, Extension, NExp, FreqList)
                '...Read in from the input files
                For k As Integer = 1 To Count_s2p
                    Dim myData As RealMatrix = Data(k - 1)
                    'Write out the .snp file.
                    myData.Write(myADSPath + FileName2(k - 1), Header) 'add "# GHz S RI R 50")
                    'Write out the .citi file.
                    For h As Integer = 1 To frequency.NRows
                        S11((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 2).ToString, myData(h, 3).ToString)
                        S21((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 4).ToString, myData(h, 5).ToString)
                        S12((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 6).ToString, myData(h, 7).ToString)
                        S22((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 8).ToString, myData(h, 9).ToString)
                    Next
                Next
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S11)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S12)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S21)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S22)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)

            Case ".s4p"
                Dim S11(Count_s4p * frequency.NRows - 1) As String : Dim S12(Count_s4p * frequency.NRows - 1) As String
                Dim S13(Count_s4p * frequency.NRows - 1) As String : Dim S14(Count_s4p * frequency.NRows - 1) As String
                Dim S21(Count_s4p * frequency.NRows - 1) As String : Dim S22(Count_s4p * frequency.NRows - 1) As String
                Dim S23(Count_s4p * frequency.NRows - 1) As String : Dim S24(Count_s4p * frequency.NRows - 1) As String
                Dim S31(Count_s4p * frequency.NRows - 1) As String : Dim S32(Count_s4p * frequency.NRows - 1) As String
                Dim S33(Count_s4p * frequency.NRows - 1) As String : Dim S34(Count_s4p * frequency.NRows - 1) As String
                Dim S41(Count_s4p * frequency.NRows - 1) As String : Dim S42(Count_s4p * frequency.NRows - 1) As String
                Dim S43(Count_s4p * frequency.NRows - 1) As String : Dim S44(Count_s4p * frequency.NRows - 1) As String
                Dim NExp(Count_s4p - 1) As String
                For index = 0 To Count_s4p - 1
                    NExp(index) = index.ToString
                Next
                'Initialize Citifile
                InitializeCITI(myADSPath + FileName, Extension, NExp, FreqList)
                '...Read in from the input files
                For k As Integer = 1 To Count_s4p
                    Dim myData As RealMatrix = Data(k - 1)
                    'Write out the .snp file.
                    myData.Write(myADSPath + FileName2(k - 1), Header) 'add "# GHz S RI R 50")
                    For h As Integer = 1 To frequency.NRows
                        S11((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 2).ToString, myData(h, 3).ToString)
                        S12((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 4).ToString, myData(h, 5).ToString)
                        S13((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 6).ToString, myData(h, 7).ToString)
                        S14((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 8).ToString, myData(h, 9).ToString)
                        S21((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 10).ToString, myData(h, 11).ToString)
                        S22((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 12).ToString, myData(h, 13).ToString)
                        S23((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 14).ToString, myData(h, 15).ToString)
                        S24((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 16).ToString, myData(h, 17).ToString)
                        S31((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 18).ToString, myData(h, 19).ToString)
                        S32((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 20).ToString, myData(h, 21).ToString)
                        S33((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 22).ToString, myData(h, 23).ToString)
                        S34((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 24).ToString, myData(h, 25).ToString)
                        S41((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 26).ToString, myData(h, 27).ToString)
                        S42((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 28).ToString, myData(h, 29).ToString)
                        S43((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 30).ToString, myData(h, 31).ToString)
                        S44((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 32).ToString, myData(h, 33).ToString)
                    Next
                Next
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S11)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S12)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S13)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S14)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S21)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S22)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S23)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S24)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S31)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S32)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S33)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S34)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S41)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S42)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S43)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, S44)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)

            Case ".w1p"
                Dim A11(Count_w1p * frequency.NRows - 1) As String : Dim B11(Count_w1p * frequency.NRows - 1) As String
                Dim NExp(Count_w1p - 1) As String
                For index = 0 To Count_w1p - 1
                    NExp(index) = index.ToString
                Next
                'Initialize Citifile
                InitializeCITI(myADSPath + FileName, Extension, NExp, FreqList)
                '...Read in from the input files
                For k As Integer = 1 To Count_w1p
                    Dim myData As RealMatrix = Data(k - 1)
                    For h As Integer = 1 To frequency.NRows
                        A11((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 2).ToString, myData(h, 3).ToString)
                        B11((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 4).ToString, myData(h, 5).ToString)
                    Next
                Next
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, A11)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, B11)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)

            Case ".w2p"
                Dim A11(Count_w2p * frequency.NRows - 1) As String : Dim B11(Count_w2p * frequency.NRows - 1) As String
                Dim A21(Count_w2p * frequency.NRows - 1) As String : Dim B21(Count_w2p * frequency.NRows - 1) As String
                Dim NExp(Count_w2p - 1) As String
                For index = 0 To Count_w2p - 1
                    NExp(index) = index.ToString
                Next
                'Initialize Citifile
                InitializeCITI(myADSPath + FileName, Extension, NExp, FreqList)
                '...Read in from the input files
                For k As Integer = 1 To Count_w2p
                    Dim myData As RealMatrix = Data(k - 1)
                    For h As Integer = 1 To frequency.NRows
                        A11((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 2).ToString, myData(h, 3).ToString)
                        B11((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 4).ToString, myData(h, 5).ToString)
                        A21((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 6).ToString, myData(h, 7).ToString)
                        B21((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 8).ToString, myData(h, 9).ToString)
                    Next
                Next
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, A11)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, B11)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, A21)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
                System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(myADSPath + FileName, B21)
                System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
        End Select
    End Sub

    Private Sub InitializeCITI(ByVal Path As String, ByVal Extension As String, ByVal NExp() As String, ByVal FreqList() As String)
        Select Case Extension
            Case ".s1p"
                System.IO.File.WriteAllText(Path, "CITIFILE A.01.01" + vbCrLf)
                System.IO.File.AppendAllText(Path, "NAME Spar" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR NExp MAG" + " " + NExp.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR FREQ MAG" + " " + FreqList.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S11 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, NExp)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, FreqList)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
            Case ".s2p"
                System.IO.File.WriteAllText(Path, "CITIFILE A.01.01" + vbCrLf)
                System.IO.File.AppendAllText(Path, "NAME Spar" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR NExp MAG" + " " + NExp.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR FREQ MAG" + " " + FreqList.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S11 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S12 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S21 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S22 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, NExp)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, FreqList)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
            Case ".s4p"
                System.IO.File.WriteAllText(Path, "CITIFILE A.01.01" + vbCrLf)
                System.IO.File.AppendAllText(Path, "NAME Spar" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR NExp MAG" + " " + NExp.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR FREQ MAG" + " " + FreqList.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S11 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S12 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S13 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S14 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S21 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S22 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S23 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S24 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S31 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S32 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S33 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S34 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S41 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S42 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S43 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA S44 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, NExp)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, FreqList)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
            Case ".w1p"
                System.IO.File.WriteAllText(Path, "CITIFILE A.01.01" + vbCrLf)
                System.IO.File.AppendAllText(Path, "NAME Wave" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR NExp MAG" + " " + NExp.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR FREQ MAG" + " " + FreqList.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA A11 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA B11 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, NExp)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, FreqList)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
            Case ".w2p"
                System.IO.File.WriteAllText(Path, "CITIFILE A.01.01" + vbCrLf)
                System.IO.File.AppendAllText(Path, "NAME Wave" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR NExp MAG" + " " + NExp.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR FREQ MAG" + " " + FreqList.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA A11 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA B11 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA A21 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA B21 RI" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, NExp)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, FreqList)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
            Case ".variables"
                System.IO.File.WriteAllText(Path, "CITIFILE A.01.01" + vbCrLf)
                System.IO.File.AppendAllText(Path, "NAME Variables" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR NExp MAG" + " " + NExp.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR NVAR MAG" + " " + FreqList.Length.ToString + vbCrLf)
                System.IO.File.AppendAllText(Path, "DATA VAR MAG" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, NExp)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
                System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
                System.IO.File.AppendAllLines(Path, FreqList)
                System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
        End Select
    End Sub

    Private Sub AddDC(ByRef ADSMatrix As RealMatrix, ByRef MultipleModelInput As Object, ByRef MechanismList1 As MechanismList)

        'Test the conditions.
        Dim myConditions As ConditionSupport = MultipleModelInput.getConditionSupport()
        If Not IsNothing(myConditions) Then
            Dim ConditionsList() As String = myConditions.getNameList
            If Not IsNothing(ConditionsList) Then
                For Indx As Integer = 0 To ConditionsList.Count - 1
                    If ConditionsList(Indx) = "Bias" Then   'Make sure this is the right type of condition
                        Dim IsRealMatrix As Boolean = myConditions.IsRealMatrix(ConditionsList(Indx))   'Make sure that it could have bias values and is not a parameter
                        If IsRealMatrix Then
                            Dim Cond As RealMatrix = myConditions.getSParams(ConditionsList(Indx), MechanismList1)  'Get the RealMatrix
                            'See if this might be bias condition
                            If Cond.NCols = ADSMatrix.NCols And Cond.NRows = 1 Then 'Do we have the correct size?
                                If InStr(Cond.DataType.ToLower, "dc") > 0 Then  'Does the extention seem correct?
                                    If ADSMatrix(1, 1) > 0.0 And Cond(1, 1) = 0.0 Then  'Is it zero frequency data?
                                        'Looks like we have a dc bias
                                        Dim ADSMatrix1 As RealMatrix = Stack(Cond, ADSMatrix)
                                        ADSMatrix1.DataType = ADSMatrix.DataType
                                        ADSMatrix.Fill(ADSMatrix1)
                                    End If
                                End If
                            End If
                        End If
                    End If
                Next Indx
            End If
        End If
    End Sub

    Private Sub CreateCITIforComplex(ByVal Data As Array, ByVal frequency As RealMatrix, ByVal Extension As String, ByVal myADSPath As String, ByVal Count_complex As Integer)
        'Folder path and filename
        Dim FileName As String = "\" + Extension.Split(".")(1) + ".citi"
        Dim Path As String = myADSPath + FileName
        'Independent variables of Citifile
        ''Frequency
        Dim FreqList(frequency.NRows - 1) As String
        For index = 1 To FreqList.Length
            FreqList(index - 1) = frequency(index, 1).ToString
        Next
        ''Number of experiments
        Dim NExp(Count_complex - 1) As String
        For index = 0 To Count_complex - 1
            NExp(index) = index.ToString
        Next
        'Count complex variables
        Dim myData As RealMatrix = Data(0)
        Dim NColumns As Double = myData.NCols
        'Dependent variable of Citifile
        Dim C(Count_complex * frequency.NRows - 1) As String
        'Initialization
        System.IO.File.WriteAllText(Path, "CITIFILE A.01.01" + vbCrLf)
        System.IO.File.AppendAllText(Path, "NAME Wave" + vbCrLf)
        System.IO.File.AppendAllText(Path, "VAR NExp MAG" + " " + NExp.Length.ToString + vbCrLf)
        System.IO.File.AppendAllText(Path, "VAR FREQ MAG" + " " + FreqList.Length.ToString + vbCrLf)
        For i As Integer = 1 To (NColumns - 1) / 2
            System.IO.File.AppendAllText(Path, "DATA " + "Var" + i.ToString + " RI" + vbCrLf)
        Next
        System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
        System.IO.File.AppendAllLines(Path, NExp)
        System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
        System.IO.File.AppendAllText(Path, "VAR_LIST_BEGIN" + vbCrLf)
        System.IO.File.AppendAllLines(Path, FreqList)
        System.IO.File.AppendAllText(Path, "VAR_LIST_END" + vbCrLf)
        'Write to Citifile
        For col As Integer = 1 To (NColumns - 1) / 2
            System.IO.File.AppendAllText(Path, "BEGIN" + vbCrLf)
            For k As Integer = 1 To Count_complex
                myData = Data(k - 1)
                For h As Integer = 1 To frequency.NRows
                    C((k - 1) * (frequency.NRows) + (h - 1)) = String.Join(",", myData(h, 2 * col).ToString, myData(h, 2 * col + 1).ToString)
                Next
            Next
            System.IO.File.AppendAllLines(Path, C)
            System.IO.File.AppendAllText(Path, "END" + vbCrLf)
        Next
    End Sub

    Private Sub CreateCITIfromVAR(ByVal Data() As RealMatrix, ByVal Index As Integer, ByVal Extension As String, ByVal myADSPath As String, ByVal Count_variables As Integer)
        Dim FileName As String = "\" + Extension.Split(".")(1) + ".citi"
        'Independent variables of Citifile
        Dim Var(Count_variables * Index - 1) As String
        Dim NExp(Count_variables - 1) As String
        Dim IndList(Index - 1) As String
        For ind As Integer = 0 To Count_variables - 1
            NExp(ind) = ind.ToString
        Next
        'Create list
        For ind As Integer = 0 To Index - 1
            IndList(ind) = ind.ToString
        Next
        'Initialize Citifile
        InitializeCITI(myADSPath + FileName, Extension, NExp, IndList)
        '...Read in from the input files
        For k As Integer = 1 To Count_variables
            Dim myData As RealMatrix = Data(k - 1)
            For h As Integer = 1 To Index
                Var((k - 1) * (Index) + (h - 1)) = myData(h, 2).ToString
            Next
        Next
        System.IO.File.AppendAllText(myADSPath + FileName, "BEGIN" + vbCrLf)
        System.IO.File.AppendAllLines(myADSPath + FileName, Var)
        System.IO.File.AppendAllText(myADSPath + FileName, "END" + vbCrLf)
    End Sub


    ''' <summary>
    ''' Take raw scattering paraemters in an .mdm file and calibrate them
    ''' </summary>
    ''' <param name="FileNameIn">The .mdm file with the raw scattering parameters we read in</param>
    ''' <param name="FileNameOut">The .mdm file with the corrected scattering parameters we write out</param>
    ''' <param name="Calibration_S4P">The calibration matrix</param>
    ''' <param name="SwitchTerms">The switch terms</param>
    ''' <remarks></remarks>
    Private Sub UpdateMDM(ByVal FileNameIn As String, ByVal FileNameOut As String, ByRef Calibration_S4P As RealMatrix, ByRef SwitchTerms As RealMatrix)

        Dim myStreamReader As New StreamReader(FileNameIn), FirstLine As Boolean = True
        Dim SingleFreq As Double = 0.0, SingleFreqString As String = "", InSParameterMeasurementLoop As Boolean = False
        While Not myStreamReader.EndOfStream

            'Get a line and split out any comments
            Dim LineInLiteral As String = myStreamReader.ReadLine
            Dim LineIn As String = LineInLiteral, LineInComment As String = ""
            If InStr(LineInLiteral, "!") > 0 Then
                LineIn = Microsoft.VisualBasic.Left(LineInLiteral, InStr(LineInLiteral, "!") - 1)
                LineInComment = Microsoft.VisualBasic.Mid(LineInLiteral, InStr(LineInLiteral, "!"))
            End If

            If FirstLine Then

                System.IO.File.WriteAllText(FileNameOut, LineIn + LineInComment + vbCrLf)
                FirstLine = False

            Else

                'Check to see if we are using just a fixed frequency. Make a note of it if we are.
                If InStr(LineIn, "ICCAP_VAR") > 0 And InStr(LineIn, "freq") > 0 Then
                    SingleFreqString = Microsoft.VisualBasic.Mid(LineIn, InStr(LineIn, "freq") + 4)
                    SingleFreq = Val(SingleFreqString.Replace(" ", "").Replace(vbTab, ""))
                End If

                'Check to see if we are starting an S-parameter measurement
                If InStr(LineIn, "#") > 0 And InStr(LineIn, "R:s(1,1)") > 0 Then  'Starting an s-parameter measurement

                    InSParameterMeasurementLoop = True
                    System.IO.File.AppendAllText(FileNameOut, LineIn + LineInComment + vbCrLf)

                Else    'Not Starting and s-parameter measurement, but we may already be in the loop.

                    If InSParameterMeasurementLoop Then 'In Scattering-parameter measurement loop

                        If InStr(LineIn, "END_DB") > 0 Then 'Ending this scattering-parameter measurement loop.

                            InSParameterMeasurementLoop = False
                            System.IO.File.AppendAllText(FileNameOut, LineIn + LineInComment + vbCrLf)

                        Else    'Smack in the middle of a scattering-parameter measurement loop

                            'Parse the line
                            Dim LineIn1 As String = LineIn
                            While InStr(LineIn1, vbTab)
                                LineIn1 = LineIn1.Replace(vbTab, " ")
                            End While
                            While InStr(LineIn1, "  ")
                                LineIn1 = LineIn1.Replace("  ", " ")
                            End While
                            LineIn1 = LineIn1.Trim
                            Dim Parts() As String = LineIn1.Split(" ")

                            'Make up a single-frequency S-parameter file.
                            Dim NewS As New RealMatrix(1, 9, ".s2p")
                            'Note that mdm order is S11 S12 S21 S22.
                            NewS(1, 2) = Val(Parts(1)) : NewS(1, 3) = Val(Parts(2)) : NewS(1, 4) = Val(Parts(5)) : NewS(1, 5) = Val(Parts(6))
                            NewS(1, 6) = Val(Parts(3)) : NewS(1, 7) = Val(Parts(4)) : NewS(1, 8) = Val(Parts(7)) : NewS(1, 9) = Val(Parts(8))
                            If SingleFreq = 0.0 Then    'We are sweeping frequency in the first column.
                                NewS(1, 1) = Val(Parts(0)) / 1000000000.0
                            Else                        'We have a single fixed frequency and are sweeping some other variable in the first column.
                                NewS(1, 1) = SingleFreq / 1000000000.0
                            End If

                            'Calibrate the scattering paraemters and write out the line.
                            System.IO.File.AppendAllText(FileNameOut, UpdatedLine(NewS, Parts, Calibration_S4P, SwitchTerms) + LineInComment + vbCrLf)

                        End If

                    Else    'Not in Scattering-parameter measurement loop

                        System.IO.File.AppendAllText(FileNameOut, LineIn + LineInComment + vbCrLf)

                    End If

                End If

            End If
        End While

    End Sub

    ''' <summary>
    ''' Correct the scattering paraemters and create the new text line
    ''' </summary>
    ''' <param name="NewS"></param>
    ''' <param name="Parts"></param>
    ''' <param name="Calibration_S4P"></param>
    ''' <param name="SwitchTerms"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function UpdatedLine(ByRef NewS As RealMatrix, ByRef Parts() As String, ByRef Calibration_S4P As RealMatrix, ByRef SwitchTerms As RealMatrix) As String

        'Correct the scattering paraemters at a single frequency
        Dim FreqList As New RealMatrix(1) : FreqList(1) = NewS(1, 1)    'First extract the calibration parameters we need at the single frequency
        Dim Calibration_SingleFrequency As New RealMatrix(1, 33, ".s4p")
        Dim SwitchTerms_SingleFrequency As New RealMatrix(1, 9, ".s2p")
        Dim FoundFreq As Integer = 0
        For k As Integer = 1 To Calibration_S4P.NRows
            If Math.Abs(Calibration_S4P(k, 1) - NewS(1, 1)) < 0.00001 Then  'Found a matching frequency
                FoundFreq = FoundFreq + 1
                For kk As Integer = 1 To 33
                    Calibration_SingleFrequency(1, kk) = Calibration_S4P(k, kk)
                Next kk
                For kk As Integer = 1 To 9
                    SwitchTerms_SingleFrequency(1, kk) = SwitchTerms(k, kk)
                Next kk
            End If
        Next k
        If FoundFreq <> 1 Then MsgBox("Fatal Error: Could not find a unique matching calibration frequency", MsgBoxStyle.Exclamation, "UpdatedLine")

        'Create the MechanismList with the calibration
        Dim MechanismList1 As New MechanismList(FreqList, 1.0, 0.0)
        MechanismList1.SwitchTerms = SwitchTerms_SingleFrequency
        MechanismList1.PreSolution = Calibration_SingleFrequency

        'Calibrate the scattering parameters
        NewS.Calibrate(MechanismList1)

        'Assemble the new line. Note that mdm order is S11 S12 S21 S22.
        Dim NewLine As String = " "
        NewLine = NewLine + " " + Parts(0)
        NewLine = NewLine + " " + NewS(1, 2).ToString
        NewLine = NewLine + " " + NewS(1, 3).ToString
        NewLine = NewLine + " " + NewS(1, 6).ToString
        NewLine = NewLine + " " + NewS(1, 7).ToString
        NewLine = NewLine + " " + NewS(1, 4).ToString
        NewLine = NewLine + " " + NewS(1, 5).ToString
        NewLine = NewLine + " " + NewS(1, 8).ToString
        NewLine = NewLine + " " + NewS(1, 9).ToString
        If Parts.Length > 9 Then
            For Index As Integer = 9 To Parts.Length - 1
                NewLine = NewLine + " " + Parts(Index)
            Next Index
        End If

        Return NewLine

    End Function


    ''' <summary>
    ''' Post processor adds errors from one result to another result
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AddNewErrors
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myFirstTime As Boolean = True
        Private myFirstRealMatrixNominal1 As RealMatrix 'The nominal value of the second measurement.
        Dim myExtension As String = Nothing

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(2) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Add errors to this measurement (.meas)"    'The first measurement we are going to add errors to
                myNameList(1) = "New errors to add to measurement above (.meas)"    'Add the errors from this 
                myNameList(2) = "New-error scaling factor (.parameter)"    'Add the errors from this measurement
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas_archive"
                FileExtensions(2) = ".parameter" : FileExtensions(3) = ".sumofparameters" : FileExtensions(4) = ".sumofparameters_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing 'Set the frequency over which the fit is performed
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor adds new errors in the second entry to the first entry. You can also scale the new errors from the second entry before adding them to the first entry."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return myExtension
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Add new errors from second entry to first entry"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have two, the measured input sparameters.
            Dim myRealMatrix0 As New RealMatrix(1) : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)
            Dim myRealMatrix1 As New RealMatrix(1) : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)
            Dim myScalingFactor As Double = MechValues(2).MechanismValue(MechanismList1)

            'First time around get the nominal value
            If myFirstTime Then
                myFirstTime = False
                'Check the input to see if it has the right number of columns.
                If myRealMatrix0.NCols <> myRealMatrix1.NCols Then MechanismList1.ErrorReport = "The two inputs to the post processor have a different number of columns" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function
                If myRealMatrix0.NRows <> myRealMatrix1.NRows Then MechanismList1.ErrorReport = "The two inputs to the post processor have a different number of rows" : MechanismList1.FatalError = True : Return ToArray(myRealMatrix0) : Exit Function
                'Save initial data for later use
                myExtension = myRealMatrix0.DataType
                myFirstRealMatrixNominal1 = New RealMatrix(myRealMatrix1.NRows, myRealMatrix1.NCols, myRealMatrix1.DataType) : myFirstRealMatrixNominal1.Fill(myRealMatrix1)
            End If

            'Add the new errors. Leave the frequencies alone.
            Dim OutputMatrix As New RealMatrix(myRealMatrix0.NRows, myRealMatrix0.NCols, myExtension)
            OutputMatrix.Vector(1) = myRealMatrix0.Vector(1)
            For kk As Integer = 2 To myRealMatrix0.NCols
                OutputMatrix.Vector(kk) = myRealMatrix0.Vector(kk) + myScalingFactor * (myRealMatrix1.Vector(kk) - myFirstRealMatrixNominal1.Vector(kk))
            Next kk

            'That's all folks! 
            Return ToArray(OutputMatrix)

        End Function


    End Class


    ''' <summary>
    ''' Post processor calibrates EOS measurements.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_EOS
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myFirst As Boolean = True
        Private Frequencies As RealMatrix

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(27) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "EOS Top Scan (.dat)" ' EOSScanTop As RealMatrix
                myNameList(1) = "EOS Bottom Scan (.dat)" ' EOSScanBot As RealMatrix
                myNameList(2) = "PD Current Sense Resistor (1000 ohm default)" ' RSense As Double
                myNameList(3) = "PD Dark Current Voltage (V)" ' DarkCurrentValue As Double
                myNameList(4) = "Maximum Frequency for Linear-Phase Removal" ' MaxPhaseLin As Double
                myNameList(5) = "EOS Offset-Error Scale Factor (default 1 +/- 0.5)" ' EOS_Offset_Error As Double
                myNameList(6) = "Laser repetition rate" ' LaserRepRate As Double
                myNameList(7) = "EOS Scan Interpolation Start Time (0 +/- half time step)" ' EOSScanDeltaTime As Double A zero time with a +/- 1/2 time-step rectangular uncertainty to find interpolation error
                myNameList(8) = "DC Resistance of CPW Resistor (ohms)" ' CPWResDCRes As Double
                myNameList(9) = "DC Resistance of Probe head (ohms)" ' RProbeDC As Double
                myNameList(10) = "DC Resistance of Shorted 1 kHz Cable (ohms)" ' RCableShort As Double
                myNameList(11) = "DC Resistance Measured at Ohm Meter When 1 kHz Source Shorted (ohms)" ' RShort As Double
                myNameList(12) = "Stage Alignment Angle in Radians (0 +/- uncertainty)" ' StageAlignmentAngleRadians As Double
                myNameList(13) = "Chopper Waveform (.dat)" ' ChopperWaveform As RealMatrix
                myNameList(14) = "Top 1 kHz Calibration Scan (.dat)" ' EOSCalTop As RealMatrix
                myNameList(15) = "Bot 1 kHz Calibration Scan (.dat)" ' EOSCalBot As RealMatrix
                myNameList(16) = "Top 1 kHz Calibration Scan Reduced Power (.dat)" ' EOSCalTopReduced As RealMatrix
                myNameList(17) = "Bot 1 kHz Calibration Scan Reduced Power (.dat)" ' EOSCalBotReduced As RealMatrix
                myNameList(18) = "Probe-Head Scattering Parameters (.s2p)" ' ProbeHeadS As RealMatrix
                myNameList(19) = "CPW Resistor Reflection Coefficient (.s2p)" ' CPWResSPar As RealMatrix
                myNameList(20) = "Photodiode Reflection Coefficient (.s2p)" ' PDSparams As RealMatrix
                myNameList(21) = "Autocorrelation Trace (before, .dat)" ' AutoCorBeforeTimeData As RealMatrix
                myNameList(22) = "Autocorrelation Trace (after. dat)" ' AutoCorAfterTimeData As RealMatrix
                myNameList(23) = "CPW Center-Conductor Width" ' CPWCenterWidth As Double in meters
                myNameList(24) = "EM Results from Heinrich Code (ImpulseResponseMag.dat)" ' ImpulseResponseMag As RealMatrix
                myNameList(25) = "EM Results from Heinrich Code (ImpulseResponsePhase.dat)" ' ImpulseResponsePhase As RealMatrix
                myNameList(26) = "Autocorrelator Translation Scale (ps/ms, unitless)" ' AutocorScale As Double
                myNameList(27) = "Autocorrelator Scope Scale in us/division (25=default, unitless)" ' DivAutocor As Double

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                'Dim FileExtensions(45) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                'FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".model_archive" : FileExtensions(8) = ".cascade_archive" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                'FileExtensions(13) = ".complex"
                'For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                '    FileExtensions(14 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                '    FileExtensions(15 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                'Next i1
                Dim FileExtensions(11) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".model" : FileExtensions(2) = ".cascade"
                FileExtensions(3) = ".meas_archive" : FileExtensions(4) = ".model_archive" : FileExtensions(5) = ".cascade_archive"
                FileExtensions(6) = ".dat" : FileExtensions(7) = ".dat"
                FileExtensions(8) = ".parameter" : FileExtensions(9) = ".s2p"
                FileExtensions(10) = ".variables" : FileExtensions(11) = ".parameterlist"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Interpolation off except for .snp and .wnp files, which are fixed by Run>Set frequencies by pull-down menu = -3, 
        ''' Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -3   'Interpolation off except for .snp and .wnp files, which are fixed by Run>Set frequencies by pull-down menu = -3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Ignore 1 kHz signal-monitor voltage (old way, default)"
                PullDownList(1) = "Use std and reduced 1 kHz signal-monitor voltages"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Photodiode reflection coefficient on port 1"
                PullDownList(1) = "Photodiode reflection coefficient on port 2"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor preforms an EOS calibration."
                myDescription(1) = "The default frequency list for .snp and .wnp files is determined from the Run>Set frequencies pull-down menu. Other input files are not interpolated."
                myDescription(2) = "Cable bending and probe-tip positioning errors should be included in the probe-head scattering parameters."
                myDescription(4) = "Written by Dylan Williams and Paul Hale."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"   'The MUF will ignore this as multiple extensions can be returned.
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "EOS postprocessor"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNamesShort() As String = Nothing
                Return myFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1), GeneratePlots As Boolean = False
            If myFirst Then 'Only do this stuff the first time

                myFirst = False
                GeneratePlots = True    'Maybe use a pull-down menu to turn this on??

                Dim Frequencies1 As RealMatrix = MechanismList1.FrequencyList, Frequencies2 As New RealMatrix(1, 1)   ', MaximumFrequency As Double = MechanismList1.FrequencyList(MechanismList1.FrequencyList.NRows, 1)
                Frequencies = Stack(Frequencies2, Frequencies1)

            End If



            Dim EOSScanTop As RealMatrix : EOSScanTop = MechValues(0).getSParams(MechanismList1)    'myNameList(0) = "EOS Top Scan (.txt)" ' EOSScanTop As RealMatrix
            Dim EOSScanBot As RealMatrix : EOSScanBot = MechValues(1).getSParams(MechanismList1)    'myNameList(1) = "EOS Bottom Scan (.txt)" ' EOSScanBot As RealMatrix
            Dim RSense As Double = MechValues(2).MechanismValue(MechanismList1)                     'myNameList(2) = "PD Current Sense Resistor (1000 ohm default)" ' RSense As Double
            Dim DarkCurrentValue As Double = MechValues(3).MechanismValue(MechanismList1)           'myNameList(3) = "PD Dark Current Voltage (V)" ' DarkCurrentValue As Double
            Dim MaxPhaseLin As Double = MechValues(4).MechanismValue(MechanismList1)                'myNameList(4) = "Maximum Frequency for Phase Normalization" ' MaxPhaseLin As Double
            Dim EOS_Offset_Error As Double = MechValues(5).MechanismValue(MechanismList1)           'myNameList(5) = "EOS Offest Error Scale Factor (default 1 +/- 0.5)" ' EOS_Offset_Error As Double
            Dim LaserRepRate As Double = MechValues(6).MechanismValue(MechanismList1)               'myNameList(6) = "Laser repetition rate" ' LaserRepRate As Double
            Dim EOSScanDeltaTime As Double = MechValues(7).MechanismValue(MechanismList1)           'myNameList(7) = "EOS Scan Interpolation Start Time (0 +/- half step)" ' EOSScanDeltaTime As Double A zero time with a +/- 1/2 time-step rectangular uncertainty to find interpolation error
            Dim CPWResDCRes As Double = MechValues(8).MechanismValue(MechanismList1)                'myNameList(8) = "DC Resistance of CPW Resistor" ' CPWResDCRes As Double
            Dim RProbeDC As Double = MechValues(9).MechanismValue(MechanismList1)                   'myNameList(9) = "DC Resistance of Probe head" ' RProbeDC As Double
            Dim RCableShort As Double = MechValues(10).MechanismValue(MechanismList1)               'myNameList(10) = "DC Resistance of Shorted 1 kHz Cable" ' RCableShort As Double
            Dim RShort As Double = MechValues(11).MechanismValue(MechanismList1)                    'myNameList(11) = "DC Resistance Measured at Ohm Meter When 1 kHz Source Shorted" ' RShort As Double
            Dim StageAlignmentAngleRadians As Double = MechValues(12).MechanismValue(MechanismList1)        'myNameList(12) = "Stage Alignment Angle in Radians" ' StageAlignmentAngleRadians As Double
            Dim ChopperWaveform As RealMatrix : ChopperWaveform = MechValues(13).getSParams(MechanismList1) 'myNameList(13) = "" ' ChopperWaveform As RealMatrix
            Dim EOSCalTop As RealMatrix : EOSCalTop = MechValues(14).getSParams(MechanismList1)     'myNameList(14) = "Top 1 kHz Calibration Scan" ' EOSCalTop As RealMatrix
            Dim EOSCalBot As RealMatrix : EOSCalBot = MechValues(15).getSParams(MechanismList1)     'myNameList(15) = "Bot 1 kHz Calibration Scan" ' EOSCalBot As RealMatrix
            Dim EOSCalTopReduced As RealMatrix : EOSCalTopReduced = MechValues(16).getSParams(MechanismList1)   'myNameList(16) = "Top 1 kHz Calibration Scan Reduced Power" ' EOSCalTopReduced As RealMatrix
            Dim EOSCalBotReduced As RealMatrix : EOSCalBotReduced = MechValues(17).getSParams(MechanismList1)   'myNameList(17) = "Bot 1 kHz Calibration Scan Reduced Power" ' EOSCalBotReduced As RealMatrix
            Dim ProbeHeadS As RealMatrix : ProbeHeadS = MechValues(18).getSParams(MechanismList1)   'myNameList(18) = "Probe-Head Scattering Parameters (.s2p)" ' ProbeHeadS As RealMatrix
            Dim CPWResSPar As RealMatrix : CPWResSPar = MechValues(19).getSParams(MechanismList1)   'myNameList(19) = "CPW Resistor Scattering Parameters (.s2p)" ' CPWResSPar As RealMatrix
            Dim PDSparams As RealMatrix : PDSparams = MechValues(20).getSParams(MechanismList1)     'myNameList(20) = "Photodiode Scattering Parameters (.s2p)" ' PDSparams As RealMatrix
            Dim AutoCorBeforeTimeData As RealMatrix : AutoCorBeforeTimeData = MechValues(21).getSParams(MechanismList1)     'myNameList(21) = "Autocorrelation Trace (before)" ' AutoCorBeforeTimeData As RealMatrix
            Dim AutoCorAfterTimeData As RealMatrix : AutoCorAfterTimeData = MechValues(22).getSParams(MechanismList1)       'myNameList(22) = "Autocorrelation Trace (after)" ' AutoCorAfterTimeData As RealMatrix
            Dim CPWCenterWidth As Double = MechValues(23).MechanismValue(MechanismList1)                                    'myNameList(23) = "CPW Center-Conductor Width" ' CPWCenterWidth As Double in meters
            Dim ImpulseResponseMag As RealMatrix : ImpulseResponseMag = MechValues(24).getSParams(MechanismList1)           'myNameList(24) = "EM Results from Heinrich Code (ImpulseResponseMag.txt)" ' ImpulseResponseMag As RealMatrix
            Dim ImpulseResponsePhase As RealMatrix : ImpulseResponsePhase = MechValues(25).getSParams(MechanismList1)       'myNameList(25) = "EM Results from Heinrich Code (ImpulseResponsePhase.txt)" ' ImpulseResponsePhase As RealMatrix
            Dim AutocorScale As Double = MechValues(26).MechanismValue(MechanismList1)              'myNameList(26) = "Autocorrelation Scale (ps/ms)" ' AutocorScale As Double
            Dim DivAutocor As Double = MechValues(27).MechanismValue(MechanismList1)                'myNameList(27) = "Autocorrelation Scope Scale in us/division (25=default)" ' DivAutocor As Double


            'Read in the result the user asked for from ADS and return it to the MUF in a format that the MUF understands
            Dim Output As RealMatrix
            Output = SolveEOS(EOSScanTop, EOSScanBot, RSense, DarkCurrentValue, MaxPhaseLin, EOS_Offset_Error, LaserRepRate, EOSScanDeltaTime, CPWResDCRes, RProbeDC, RCableShort,
                               RShort, StageAlignmentAngleRadians, Frequencies, ChopperWaveform, EOSCalTop, EOSCalBot, EOSCalTopReduced, EOSCalBotReduced, ProbeHeadS, CPWResSPar, PDSparams,
                               AutoCorBeforeTimeData, AutoCorAfterTimeData, CPWCenterWidth, ImpulseResponseMag, ImpulseResponsePhase, AutocorScale, DivAutocor, GeneratePlots)

            Return ToArray(Output)    'Return the files created by ADS to the MUF

        End Function


        ''' <summary>
        ''' Solve the EOS calibration problem.
        ''' </summary>
        ''' <param name="EOSScanTop">The top scan of the photodiode impulse</param>
        ''' <param name="EOSScanBot">The bottom scan of the photodiode impulse</param>
        ''' <param name="RSense">PD Current sense resistor (ohms)</param>
        ''' <param name="DarkCurrentValue">Dark durrent voltage</param>
        ''' <param name="MaxPhaseLin">Maximum frequency to phase linearize to in GHz</param>
        ''' <param name="EOS_Offset_Error"></param>
        ''' <param name="LaserRepRate">The repetition rate of the laser in GHz.</param>
        ''' <param name="EOSScanDeltaTime">A zero time with a +/- 1/2 time-step rectangular uncertainty to find interpolation error.</param>
        ''' <param name="CPWResDCRes">Resistance of CPW access line</param>
        ''' <param name="RProbeDC"></param>
        ''' <param name="RCableShort">DC resistance measured at the end of the 1 kHz cable</param>
        ''' <param name="RShort">DC resistance measured at the ohm meter</param>
        ''' <param name="StageAlignmentAngleRadians">Stage Alignment Angle in Radians</param>
        ''' <param name="Frequencies">The vector of resulting frequencies starting at DC.</param>
        ''' <param name="ChopperWaveform"></param>
        ''' <param name="EOSCalTop">Top 1 kHz Calibration Scan</param>
        ''' <param name="EOSCalBot">Bot 1 kHz Calibration Scan</param>
        ''' <param name="EOSCalTopReduced">Top 1 kHz Calibration Scan Reduced Power</param>
        ''' <param name="EOSCalBotReduced">Bot 1 kHz Calibration Scan Reduced Power</param>
        ''' <param name="ProbeHeadS">Probe-Head Scattering Parameters</param>
        ''' <param name="CPWResSPar">CPW Resistor Scattering Parameters</param>
        ''' <param name="PDSparams">Photodiode Scattering Parameters</param>
        ''' <param name="AutoCorBeforeTimeData">Autocorrelation Trace (before)</param>
        ''' <param name="AutoCorAfterTimeData">Autocorrelation Trace (after)</param>
        ''' <param name="CPWCenterWidth">Width of the CPW center conductor in meters (used to be um)</param>
        ''' <param name="ImpulseResponseMag">Results of EM simulations in C:\Data\HTB386\PaulHale\Electrooptic\Heinrich\ImpulseResponseMag.txt calculated by EOS_impulse.mcd</param>
        ''' <param name="ImpulseResponsePhase">Results of EM simulations in C:\Data\HTB386\PaulHale\Electrooptic\Heinrich\ImpulseResponsePhase.txt calculated by EOS_impulse.mcd</param>
        ''' <param name="AutocorScale">Autocorrelation Scale (ps/ms)</param>
        ''' <param name="DivAutocor">Autocorrelation Scope Scale in us/division (25=default)</param>
        ''' <param name="GeneratePlots">This is set true the first time to generate plots for the user to look at.</param>
        ''' <returns>A RealMatrix with the frequencies starting from 0 and the frequency response of the photodiode.</returns>
        ''' <remarks></remarks>
        Private Function SolveEOS(ByRef EOSScanTop As RealMatrix, ByRef EOSScanBot As RealMatrix,
                          ByVal RSense As Double, ByVal DarkCurrentValue As Double, ByVal MaxPhaseLin As Double,
                          ByVal EOS_Offset_Error As Double, ByVal LaserRepRate As Double, ByVal EOSScanDeltaTime As Double, ByVal CPWResDCRes As Double,
                          ByVal RProbeDC As Double, ByVal RCableShort As Double, ByVal RShort As Double,
                          ByVal StageAlignmentAngleRadians As Double, ByRef Frequencies As RealMatrix, ByRef ChopperWaveform As RealMatrix,
                          ByRef EOSCalTop As RealMatrix, ByRef EOSCalBot As RealMatrix, ByRef EOSCalTopReduced As RealMatrix, ByRef EOSCalBotReduced As RealMatrix,
                          ByVal ProbeHeadS As RealMatrix, ByRef CPWResSPar As RealMatrix, ByRef PDSparams As RealMatrix,
                          ByRef AutoCorBeforeTimeData As RealMatrix, ByRef AutoCorAfterTimeData As RealMatrix,
                          ByVal CPWCenterWidth As Double, ByRef ImpulseResponseMag As RealMatrix, ByRef ImpulseResponsePhase As RealMatrix,
                          ByVal AutocorScale As Double, ByVal DivAutocor As Double,
                          ByVal GeneratePlots As Boolean) As RealMatrix

            'ToDo: Make sure that we can input mixed time and frequency-domain data without automatically interpolating to meaningless grids.
            'PROCESS THE INCOMING TEMPORAL DATA IN THE TIME DOMAIN.

            'Temporarily generate reduced scans by putting in zero read voltage and zero sig mon voltage if you
            'did not do the reduced 1 kHz scans
            If myPullDownSelection1 <= 0 Then
                EOSCalTopReduced.Fill(EOSCalTop) : EOSCalBotReduced.Fill(EOSCalBot)
                For i As Integer = 1 To EOSCalTop.NRows
                    EOSCalTopReduced(i, 2) = 0.0 : EOSCalTopReduced(i, 11) = 0.0
                    EOSCalBotReduced(i, 2) = 0.0 : EOSCalBotReduced(i, 11) = 0.0
                Next
            End If

            'Eliminate repeated points
            EOSScanTop = CompressRepeats(EOSScanTop)
            EOSScanBot = CompressRepeats(EOSScanBot)
            EOSCalTop = CompressRepeats(EOSCalTop)
            EOSCalBot = CompressRepeats(EOSCalBot)
            EOSCalTopReduced = CompressRepeats(EOSCalTopReduced)
            EOSCalBotReduced = CompressRepeats(EOSCalBotReduced)

            'Normalize times from ps to ns. By using ns everywhere, we will naturally transform to GHz.
            EOSScanTop.Vector(1) = 0.001 * EOSScanTop.Vector(1)
            EOSScanBot.Vector(1) = 0.001 * EOSScanBot.Vector(1)
            EOSCalTop.Vector(1) = 0.001 * EOSCalTop.Vector(1)
            EOSCalBot.Vector(1) = 0.001 * EOSCalBot.Vector(1)
            EOSCalTopReduced.Vector(1) = 0.001 * EOSCalTopReduced.Vector(1)
            EOSCalBotReduced.Vector(1) = 0.001 * EOSCalBotReduced.Vector(1)

            'Start on the time data
            Dim EOSScanTopNorm As New RealMatrix(EOSScanTop.NRows), EOSScanBotNorm As New RealMatrix(EOSScanBot.NRows)
            EOSScanTopNorm = EOSScanTop.Vector(2) : EOSScanBotNorm = EOSScanBot.Vector(2)

            'Subtract off the offset in the time data. This offset is found from the data taken at the first NStat time points.
            'Find the region in which nothing is happening before the main pulse.
            'Dim NStat As Integer = NumFromTxt(MaskedTextBoxNStats)
            Dim NStat As Integer = 0, MaxMeasure As Double = 0.0
            For i As Integer = 1 To EOSScanTopNorm.NRows
                If Abs(EOSScanTopNorm(i)) > MaxMeasure Then
                    NStat = i
                    MaxMeasure = Abs(EOSScanTopNorm(i))
                End If
            Next
            NStat = (2 * NStat) / 3
            If NStat < 5 Then MsgBox("Warning: NStat = " + NStat.ToString, MsgBoxStyle.Information, "EOS Calibration")
            'Subtract the offset
            Dim AvgTop As Double = 0.0, AvgBot As Double = 0.0
            For i As Integer = 1 To NStat + 1
                AvgTop = AvgTop + EOSScanTopNorm(i) : AvgBot = AvgBot + EOSScanBotNorm(i)
            Next i
            AvgTop = AvgTop / CType(NStat, Double) : AvgBot = AvgBot / CType(NStat, Double)
            For i As Integer = 1 To EOSScanTopNorm.NRows
                EOSScanTopNorm(i) = EOSScanTopNorm(i) - EOS_Offset_Error * AvgTop : EOSScanBotNorm(i) = EOSScanBotNorm(i) - EOS_Offset_Error * AvgBot
            Next i
            'Plot the part of the curve used to subtract offsets.
            If GeneratePlots Then
                Dim ShortPlot As New RealMatrix(NStat), ShortPlotTimes As New RealMatrix(NStat)
                Dim Plot10 As New Plot("Time (ns)", "Lockin voltage (V)", "Offset Determination Region (0 - " + EOSScanTop(NStat, 1).ToString + " ns)")
                Plot10.AddCurve(EOSScanTop.Vector(1), EOSScanTopNorm, "Top")
                Plot10.AddCurve(EOSScanBot.Vector(1), -EOSScanBotNorm, "Bottom")
                For i As Integer = 1 To NStat
                    ShortPlot(i) = EOSScanTopNorm(i) + AvgTop
                    ShortPlotTimes(i) = EOSScanTop(i, 1)
                Next i
                Plot10.AddCurve(ShortPlotTimes, ShortPlot, "Used for top offset")
                For i As Integer = 1 To NStat
                    ShortPlot(i) = EOSScanBotNorm(i) + AvgBot
                Next i
                Plot10.AddCurve(ShortPlotTimes, -ShortPlot, "Used for bottom offset")
                Plot10.Show()
                'Plot10.SaveToFile(EOSDirectory.Text + "\OffsetDetermination" + ScanNumber.ToString + ".png")
            End If

            'Chopper duty cycle
            'Dim ChopperWaveform As New RealMatrix(1)
            'Read(ChopperWaveform, ChopperFile.Text)
            'Find a period
            Dim Med As Double = 0.0
            For i As Integer = 1 To ChopperWaveform.NRows
                If ChopperWaveform(i) > Med Then Med = ChopperWaveform(i)
            Next
            Med = Med / 2.0
            Dim CSign As Double = 1.0 : If ChopperWaveform(1) < Med Then CSign = -1.0
            Dim LowIndex As Integer = 1, HighIndex As Integer = ChopperWaveform.NRows
            While CSign * ChopperWaveform(LowIndex) > CSign * Med
                LowIndex = LowIndex + 1
            End While
            ''Old way searches from top down
            'While Not( CSign * ChopperWaveform(HighIndex) < CSign * Med
            '    HighIndex = HighIndex - 1
            'End While
            'Dim NPeriod As Integer = HighIndex + 1 - LowIndex
            HighIndex = LowIndex + 5
            While CSign * ChopperWaveform(HighIndex) < CSign * Med
                HighIndex = HighIndex + 1
            End While
            HighIndex = HighIndex + 5
            While CSign * ChopperWaveform(HighIndex) > CSign * Med And HighIndex < ChopperWaveform.NRows
                HighIndex = HighIndex + 1
            End While
            Dim NPeriod As Integer = HighIndex + 1 - LowIndex
            Dim A0 As Double = 0.0, A1C As Double = 0.0, A1S As Double = 0.0
            For i As Integer = LowIndex To HighIndex
                A0 = A0 + CType(ChopperWaveform(i), Double)  'The DC term
                A1C = A1C + CType(ChopperWaveform(i), Double) * Math.Cos(2.0 * Math.PI * CType(i - LowIndex, Double) / CType(NPeriod, Double)) 'The cos term
                A1S = A1S + CType(ChopperWaveform(i), Double) * Math.Sin(2.0 * Math.PI * CType(i - LowIndex, Double) / CType(NPeriod, Double)) 'The sin term
            Next
            Dim ChopperFactor As Double = (Abs(A0) / Abs(toComplex(A1C, A1S))) / Math.Sqrt(2.0)
            'Make a graph showing the user that the chopper file was correctly analyzed.

            If GeneratePlots Then
                If HighIndex >= ChopperWaveform.NRows Then
                    MsgBox("Warning: Could not find a full cycle in chopper waveform!", MsgBoxStyle.Information, "PostProcessorModule:Post_EOS:SolveEOS")
                End If
                Dim ShortChopperWaveform As New RealMatrix(NPeriod), ShortX As New RealMatrix(NPeriod)
                For i As Integer = LowIndex To HighIndex
                    ShortChopperWaveform(i - LowIndex + 1) = ChopperWaveform(i)
                    ShortX(i - LowIndex + 1) = i
                Next i
                Dim Plot2 As New Plot("Index", "Chopper waveform", "Chopper factor = " + ChopperFactor.ToString)
                Plot2.AddCurve(ShortX, ShortChopperWaveform, "Selected portion")
                Plot2.Show()
                'Plot2.SaveToFile(EOSDirectory.Text + "\ChopperWaveform.png")
            End If

            'Normalize the time data by the photodiode current and repetition rate. The new units are lockin V/(A-Hz) = lockin V/C
            Dim Max As Double = 0.0 ', RSense As Double = NumFromTxt(MaskedTextBoxSenseResistance)
            'Dim DarkCurrentValue As Double = NumFromTxt(DarkCurrent)    'Account for the dark current.
            'If myMechanism.MechanismName = "DarkCurrent" Then DarkCurrentValue = 0.0 'The dark current value is not very accurate at all and changes from time to time.
            For i As Integer = 1 To EOSScanTop.NRows
                'Units are now LockinVolts/amps
                'EOSScanTopNorm(i) = EOSScanTopNorm(i, 1) / (Abs(EOSScanTop(i, 10)) - Abs(DarkCurrentValue / 1000.0))
                'EOSScanBotNorm(i) = EOSScanBotNorm(i, 1) / (Abs(EOSScanBot(i, 10)) - Abs(DarkCurrentValue / 1000.0))
                EOSScanTopNorm(i) = EOSScanTopNorm(i, 1) / (Abs(EOSScanTop(i, 10)) - Abs(DarkCurrentValue))
                EOSScanBotNorm(i) = EOSScanBotNorm(i, 1) / (Abs(EOSScanBot(i, 10)) - Abs(DarkCurrentValue))
                'EOSScanTopNorm(i) = EOSScanTopNorm(i) * (RSense * LaserRepRateMHz * 1000000.0)
                'EOSScanBotNorm(i) = EOSScanBotNorm(i) * (RSense * LaserRepRateMHz * 1000000.0)
                EOSScanTopNorm(i) = EOSScanTopNorm(i) * (RSense * LaserRepRate * 1000000000.0)
                EOSScanBotNorm(i) = EOSScanBotNorm(i) * (RSense * LaserRepRate * 1000000000.0)
                EOSScanTopNorm(i) = EOSScanTopNorm(i) * ChopperFactor   'Also account for the chopper factor. This is calculated from the chopper waveform. Maybe we can just use repeated measurements??
                EOSScanBotNorm(i) = EOSScanBotNorm(i) * ChopperFactor
                ''Maybe here we use repeated measurements instead of this ad-hoc approach.
                'If myMechanism.MechanismName = "ChopperFactor" Then 'The chopper factor bounces all over the place, and we don't have a good way of measuring it. So this is a reasonable error in the factor to add.
                '    EOSScanTopNorm(i) = EOSScanTopNorm(i) * 1.05
                '    EOSScanBotNorm(i) = EOSScanBotNorm(i) * 1.05
                'End If
                If Abs(EOSScanTopNorm(i)) > Max Then Max = Abs(EOSScanTopNorm(i))
            Next

            ''Add in observed scaling and cancellation errors. Note that the bottom scan has not been multiplied by -1 yet.
            ''The top and botton scans still have oppposite signs here, so we have some different signs from the MathCad code here.
            ''These scaling errors were determined by looking at repeated scans measured on the EOS system.
            ''Maybe here we can use repeated measurements??
            'If myMechanism.MechanismName = "Scaling1" Then EOSScanTopNorm = 1.02 * EOSScanTopNorm : EOSScanBotNorm = 1.02 * EOSScanBotNorm
            'If myMechanism.MechanismName = "Scaling2" Then EOSScanTopNorm = 1.02 * EOSScanTopNorm : EOSScanBotNorm = 0.98 * EOSScanBotNorm

            ''Turned off after 12Jan08 discussion with Paul. Pages 34-38.
            ''In the MathCad version this happens before the offset is taken out by looking at the data before the main pulse arrives.
            ''Here we do this after this offset is taken out, which makes more sense. Obviously the difference in the size of the error is huge.
            ''The MathCad version gives this offset as 0.003. 
            ''We removed it because the offset seemed to have been pulled out of the air initially.
            'If myMechanism.MechanismName = "Scaling3" Then
            '    For i As Integer = 1 To EOSScanTopNorm.NRows
            '        EOSScanTopNorm(i) = EOSScanTopNorm(i) + 0.001 * Max : EOSScanBotNorm(i) = EOSScanBotNorm(i) - 0.001 * Max
            '    Next i
            'End If

            ''Perhaps this is captured by repeated measurements??
            'If myMechanism.MechanismName = "Scaling4" Then
            '    'Account for S_factor_dif in MathCad program.
            '    'This factor accounts for the change in lockin voltage as a function of laser spot position on the wafer.
            '    'It is not clear if the amplitude has to do with the field pattern in the CPW or the local properties of the LiTaO3.
            '    Dim S_factor_dif As Double = -0.045 / Math.Sqrt(3.0)
            '    For i As Integer = 1 To EOSScanTopNorm.NRows
            '        EOSScanTopNorm(i) = EOSScanTopNorm(i) + S_factor_dif * (EOSScanTopNorm(i) + EOSScanBotNorm(i))
            '    Next i
            'End If

            'Get the time variable From B. Edlen, "The refractive index of air," Metrologia, vol 2, pp. 71-80, 1966.
            Dim EOSScanTopTime As New RealMatrix(EOSScanTop.NRows), EOSScanBotTime As New RealMatrix(EOSScanTop.NRows)
            'Dim EOSScanDeltaTime As Double = EOSScanTop(2, 1) - EOSScanTop(1, 1)
            For i As Integer = 1 To EOSScanTop.NRows

                'Do not change the time zero. This should not have been needed here anyway, and simplifies doing the 1 kHz calibration scan.
                'This is the standard value of the time.
                EOSScanTopTime(i) = 1.0002764 * EOSScanTop(i, 1) : EOSScanBotTime(i) = EOSScanTopTime(i, 1)

                'Now add an error to account for change of time scale with stage misalignment.
                'Here I assume we have no more than 4 mm of misalignment in a 1 foot = 0.3 meter stage movement.
                'This gives 0.0001 cosine error. This is really much smaller than other temporal errors, so we could leave it out.
                EOSScanTopTime(i) = 1.0002764 * Math.Cos(StageAlignmentAngleRadians) * EOSScanTop(i, 1) : EOSScanBotTime(i) = EOSScanTopTime(i, 1)

                ''This is a new error to capture what happens when we change the way we interpolate.
                'If myMechanism.MechanismName = "Linterp" Then   'Change the way we do interpolation.
                '    EOSScanTopTime(i) = EOSScanTopTime(i) + (EOSScanDeltaTime / 2.0)
                '    EOSScanBotTime(i) = EOSScanBotTime(i) + (EOSScanDeltaTime / 2.0)
                'End If
                'Let's capture this interpolation error by adding a 0 time to the data with a rectangular distribution of +/- one half time step
                EOSScanTopTime(i) = EOSScanTopTime(i) + EOSScanDeltaTime
                EOSScanBotTime(i) = EOSScanBotTime(i) + EOSScanDeltaTime

            Next i

            'Plot the raw time responces
            If GeneratePlots Then
                Dim Plot1 As New Plot("Time (ns)", "Lockin response (V/A)", "Raw lockin measurements")
                Plot1.AddCurve(EOSScanTop.Vector(1), EOSScanTopNorm, "Top: Raw times")
                Plot1.AddCurve(EOSScanTopTime, EOSScanTopNorm, "Top: Adjusted times")
                Plot1.AddCurve(EOSScanBot.Vector(1), -EOSScanBotNorm, "Bot: Raw times")
                Plot1.AddCurve(EOSScanBotTime, -EOSScanBotNorm, "Bot: Adjusted times")
                Plot1.Show()
                'Plot1.SaveToFile(EOSDirectory.Text + "\RawVoltagesScan" + ScanNumber.ToString + ".png")
            End If

            'DO THE 1 KHZ CALIBRATIONS

            'Dim CPWResDCRes As Double = NumFromTxt(MaskedTextBoxCPWResDCRes) 'Resistance of CPW resistor on the wafer
            'If myMechanism.MechanismName = "DCres" Then CPWResDCRes = CPWResDCRes + sigmaDCres 'Errors in measuring the DC resistance

            'Read in the 1 kHz calibrations
            Dim EOSCalTopV As New RealMatrix(EOSCalTop.NRows), EOSCalBotV As New RealMatrix(EOSCalTop.NRows), Rratio As Double
            Dim EOSCalTopReducedV As New RealMatrix(EOSCalTop.NRows), EOSCalBotReducedV As New RealMatrix(EOSCalTop.NRows)
            'The MathCad code does not subtract the resitance of a short measured by the ohm meter from the resistance of the cable we measure.
            'This version is better, as it does this, but the differences are negigable.
            Rratio = (CPWResDCRes + RProbeDC + (RCableShort - RShort)) / CPWResDCRes
            'Normalize the 1 kHz measurements by the voltage from the signal generator.
            'Units are LockinVolts/VoltsAt1KHz
            EOSCalTopV = Rratio * DivideElementByElement(EOSCalTop.Vector(2), EOSCalTop.Vector(10))
            EOSCalTopReducedV = Rratio * DivideElementByElement(EOSCalTopReduced.Vector(2), EOSCalTopReduced.Vector(10))
            EOSCalBotV = Rratio * DivideElementByElement(EOSCalBot.Vector(2), EOSCalBot.Vector(10))
            EOSCalBotReducedV = Rratio * DivideElementByElement(EOSCalBotReduced.Vector(2), EOSCalBotReduced.Vector(10))

            ''Should we just ignore these and use repeat measurements??
            ''These are scaling errors for the 1kHz calibration scans. There are a lot of them because there are potentially many calibration scans.
            'If myMechanism.MechanismName = "SFactor1" Then EOSCalTopV = EOSCalTopV * 0.993
            'If myMechanism.MechanismName = "SFactor2" Then EOSCalTopV = EOSCalTopV / 0.993
            ''Note that for the bottom we use 0.985, a much more realistic number than used in the MathCad program.
            ''(In the MathCad program we were near the cusp of a parabola, so that was not realistic.)
            'If myMechanism.MechanismName = "SFactor3" Then EOSCalBotV = EOSCalBotV * 0.985
            'If myMechanism.MechanismName = "SFactor4" Then EOSCalBotV = EOSCalBotV / 0.985
            'If myMechanism.MechanismName = "SFactor5" Then EOSCalTopReducedV = EOSCalTopReducedV * 0.993
            'If myMechanism.MechanismName = "SFactor6" Then EOSCalTopReducedV = EOSCalTopReducedV / 0.993
            'If myMechanism.MechanismName = "SFactor7" Then EOSCalBotReducedV = EOSCalBotReducedV * 0.985
            'If myMechanism.MechanismName = "SFactor8" Then EOSCalBotReducedV = EOSCalBotReducedV / 0.985

            'Is there an extra factor here due to 1 kHz RMS.

            'Fit the data with the function y=b0+b1x1+b2x2
            'x1=vsigmon, x2=vsigmon*time
            Dim X As New RealMatrix(2 * EOSCalTop.NRows, 3), XtX As New RealMatrix(3, 3)
            Dim BetaTop As New RealMatrix(3), BetaBot As New RealMatrix(3), Index(3) As Integer, D As Double
            'Also do this the old way, not worrying about the change in Signal Monitor voltage.
            Dim XOld As New RealMatrix(EOSCalTop.NRows, 4), XtXOld As New RealMatrix(4, 4)
            Dim BetaTopOld As New RealMatrix(4), BetaBotOld As New RealMatrix(4), IndexOld(4) As Integer
            For i As Integer = 1 To EOSCalTop.NRows
                'Do the top measurement
                X(i, 1) = 1.0 : X(i, 2) = EOSCalTop(i, 11) : X(i, 3) = EOSCalTop(i) * EOSCalTop(i, 11)
                'Add in the top reduced measurement
                X(i + EOSCalTop.NRows, 1) = 1.0 : X(i + EOSCalTop.NRows, 2) = EOSCalTopReduced(i, 11)
                X(i + EOSCalTop.NRows, 3) = EOSCalTop(i) * EOSCalTopReduced(i, 11)
                'The old way. Ignores the signal monitor voltage.
                XOld(i, 1) = 1.0 : XOld(i, 2) = EOSCalTop(i) : XOld(i, 3) = EOSCalTop(i) ^ 2 : XOld(i, 4) = EOSCalTop(i) ^ 3
            Next i
            XtX = Transpose(X) * X : BetaTop = Transpose(X) * Stack(EOSCalTopV, EOSCalTopReducedV)
            XtXOld = Transpose(XOld) * XOld : BetaTopOld = Transpose(XOld) * EOSCalTopV
            'Solve for BetaTop = (XtX^-1)*XtY
            Call LUDCMPr(XtX, Index, D) : Call LUDCMPr(XtXOld, IndexOld, D)
            Call LUBKSBr(XtX, Index, BetaTop) : Call LUBKSBr(XtXOld, IndexOld, BetaTopOld)

            'Now do the same thing for the bottom measurements.
            For i As Integer = 1 To EOSCalTop.NRows
                'Do the top measurement
                X(i, 1) = 1.0 : X(i, 2) = EOSCalBot(i, 11) : X(i, 3) = EOSCalTop(i) * EOSCalBot(i, 11)
                'Add in the top reduced measurement
                X(i + EOSCalTop.NRows, 1) = 1.0 : X(i + EOSCalTop.NRows, 2) = EOSCalBotReduced(i, 11)
                X(i + EOSCalTop.NRows, 3) = EOSCalTop(i) * EOSCalBotReduced(i, 11)
                'The old way. Ignores the signal monitor voltage.
                XOld(i, 1) = 1.0 : XOld(i, 2) = EOSCalTop(i) : XOld(i, 3) = EOSCalTop(i) ^ 2 : XOld(i, 4) = EOSCalTop(i) ^ 3
            Next i
            XtX = Transpose(X) * X : BetaBot = Transpose(X) * Stack(EOSCalBotV, EOSCalBotReducedV)
            XtXOld = Transpose(XOld) * XOld : BetaBotOld = Transpose(XOld) * EOSCalBotV
            'Solve for BetaBot = (XtX^-1)*XtY
            Call LUDCMPr(XtX, Index, D) : Call LUDCMPr(XtXOld, IndexOld, D)
            Call LUBKSBr(XtX, Index, BetaBot) : Call LUBKSBr(XtXOld, IndexOld, BetaBotOld)

            'Plot the 1 kHz calibration scan results.
            If GeneratePlots Then
                Dim Plot2 As New Plot("Time (ns)", "Calibration voltage factor (V/V)", "New 1 kHz cal scan voltages")
                Dim Plot2a As New Plot("Time (ns)", "Calibration voltage factor (V/V)", "Old 1 kHz cal scan voltages")
                Plot2.AddCurve(EOSCalTop.Vector(1), EOSCalTopV, "Top")
                Plot2.AddCurve(EOSCalBot.Vector(1), -EOSCalBotV, "Bottom")
                Plot2a.AddCurve(EOSCalTop.Vector(1), EOSCalTopV, "Top")
                Plot2a.AddCurve(EOSCalBot.Vector(1), -EOSCalBotV, "Bottom")
                Plot2.AddCurve(EOSCalTop.Vector(1), EOSCalTopReducedV, "Top reduced")
                Plot2.AddCurve(EOSCalBot.Vector(1), -EOSCalBotReducedV, "Bottom reduced")
                Dim CalFactorT As New RealMatrix(EOSScanTop.NRows), CalFactorB As New RealMatrix(EOSScanTop.NRows)
                For i As Integer = 1 To EOSScanTop.NRows
                    'Do the top. First form y=b0+b1x1+b2x2+b3x3+b4x4+b5x5
                    CalFactorT(i) = BetaTop(1)
                    CalFactorT(i) = CalFactorT(i) + BetaTop(2) * EOSScanTop(i, 11)
                    CalFactorT(i) = CalFactorT(i) + BetaTop(3) * EOSScanTop(i, 11) * EOSScanTop(i)
                    'Do the bottom. Note that the times are the same for top and bottom.
                    CalFactorB(i) = BetaBot(1)
                    CalFactorB(i) = CalFactorB(i) + BetaBot(2) * EOSScanBot(i, 11)
                    CalFactorB(i) = CalFactorB(i) + BetaBot(3) * EOSScanBot(i, 11) * EOSScanTop(i)
                Next i
                Plot2.AddCurve(EOSScanTop.Vector(1), CalFactorT, "Top fit")
                Plot2.AddCurve(EOSScanTop.Vector(1), -CalFactorB, "Bottom fit")
                For i As Integer = 1 To EOSScanTop.NRows
                    'Do the top. First form y=b0+b1x1+b2x2+b3x3 (the old way)
                    CalFactorT(i) = BetaTopOld(1) + BetaTopOld(2) * EOSScanTop(i)
                    CalFactorT(i) = CalFactorT(i) + BetaTopOld(3) * (EOSScanTop(i) ^ 2)
                    CalFactorT(i) = CalFactorT(i) + BetaTopOld(4) * (EOSScanTop(i) ^ 3)
                    'Do the bottom. Note that the times are the same for top and bottom.
                    CalFactorB(i) = BetaBotOld(1) + BetaBotOld(2) * EOSScanTop(i)
                    CalFactorB(i) = CalFactorB(i) + BetaBotOld(3) * (EOSScanTop(i) ^ 2)
                    CalFactorB(i) = CalFactorB(i) + BetaBotOld(4) * (EOSScanTop(i) ^ 3)
                Next i
                Plot2a.AddCurve(EOSScanTop.Vector(1), CalFactorT, "Old top fit")
                Plot2a.AddCurve(EOSScanTop.Vector(1), -CalFactorB, "Old bottom fit")
                Plot2.Show()
                'Plot2.SaveToFile(EOSDirectory.Text + "\New1kHzCalScan" + ScanNumber.ToString + ".png")
                Plot2a.Show()
                'Plot2a.SaveToFile(EOSDirectory.Text + "\Old1kHzCalScan" + ScanNumber.ToString + ".png")
            End If

            'Normalize by the 1 kHz calibration scans.
            'CalFactor inherits units of LockinVolts/VoltsAt1KHz
            'EOSScan{}Norm has units of LockinVolts/Coulombs
            'After division EOSScan{}Norm has units of VoltsAt1KHz/Coulombs. This is the voltage on the wafer normalized by the PD current.
            Dim CalFactorTop As Double, CalFactorBot As Double
            For i As Integer = 1 To EOSScanTop.NRows
                'First form y=b0+b1x1+b2x2+b3x3+b4x4+b5x5

                'The error IgnoreSigMon only has effect if we are using the Nirvana SigMon output to normalize the results.
                'If Old1kHz.Checked Or myMechanism.MechanismName = "IgnoreSigMon" Then
                If myPullDownSelection1 <= 0 Then   'Ignore signal-monitor voltage (Old1kHz.Checked = True)
                    CalFactorTop = BetaTopOld(1) + BetaTopOld(2) * EOSScanTop(i)
                    CalFactorTop = CalFactorTop + BetaTopOld(3) * (EOSScanTop(i) ^ 2)
                    CalFactorTop = CalFactorTop + BetaTopOld(4) * (EOSScanTop(i) ^ 3)
                    CalFactorBot = BetaBotOld(1) + BetaBotOld(2) * EOSScanTop(i)
                    CalFactorBot = CalFactorBot + BetaBotOld(3) * (EOSScanTop(i) ^ 2)
                    CalFactorBot = CalFactorBot + BetaBotOld(4) * (EOSScanTop(i) ^ 3)
                Else                            'Use signal-monitor voltage (Old1kHz.Checked = False)
                    CalFactorTop = BetaTop(1)
                    CalFactorTop = CalFactorTop + BetaTop(2) * EOSScanTop(i, 11)
                    CalFactorTop = CalFactorTop + BetaTop(3) * EOSScanTop(i, 11) * EOSScanTop(i)
                    CalFactorBot = BetaBot(1)
                    CalFactorBot = CalFactorBot + BetaBot(2) * EOSScanBot(i, 11)
                    CalFactorBot = CalFactorBot + BetaBot(3) * EOSScanBot(i, 11) * EOSScanTop(i)
                End If

                ''If Avg1kHzFactors.Checked Then
                ''    Average the top and bottom 1 kHz calibration factors before applying them to the measurements.
                ''    EOSScanTopNorm(i) = EOSScanTopNorm(i) / (0.5 * (CalFactorTop - CalFactorBot))
                ''    EOSScanBotNorm(i) = EOSScanBotNorm(i) / (0.5 * (CalFactorBot - CalFactorTop))
                ''Else
                ''In the MathCad code the top measurements were normalized by the top 1 kHz calibration factor only,
                ''and the bottom measurements were normalized by the bottom 1 kHz calibration factor only. 
                ''This seems like the best approach. However, the EOS program this replaces allows Avg1kHzFactors.Checked
                ''Then we average the top and bottom 1 kHz calibration factors before applying them to the measurements.
                EOSScanTopNorm(i) = EOSScanTopNorm(i) / CalFactorTop
                EOSScanBotNorm(i) = EOSScanBotNorm(i) / CalFactorBot
                ''End If
            Next i

            'Plot the normalized time responces
            If GeneratePlots Then
                Dim Plot3 As New Plot("Time (ns)", "Normalized voltage (V/C)", "Normalized lockin voltages")
                Plot3.AddCurve(EOSScanTopTime, EOSScanTopNorm, "Top")
                Plot3.AddCurve(EOSScanBotTime, EOSScanBotNorm, "Bot")
                Plot3.Show()
                'Plot3.SaveToFile(EOSDirectory.Text + "\NormalizedVoltagesScan" + ScanNumber.ToString + ".png")
            End If

            ''Extend the time records with low-frequency data to simulate problems with truncating temporal data in the EOS system.
            ''The long-time data is measured by an osciloscope.
            ''Alternatives would be to somehow truncate the data earlier to see what these errors look like.
            ''But how much earlier is not clear. Since we are not sure how to do this now, especially since we have a 5 ns stage, 
            ''let's disable this until Paul and I discuss and we come up with a good idea.
            'If myMechanism.MechanismName = "LowFrequency" And Not DisableLowFreqMechanism.Checked Then
            '    Dim PDSig5ns As New RealMatrix(1) : Read(PDSig5ns, LabelLowFreqEOSData.Text)
            '    Dim PDint As Double = 0.0, PDtime As Double = 0.0, PDmax As Double = 0.0
            '    For i As Integer = 1 To EOSScanTopTime.NRows
            '        PDint = PDint + EOSScanTopNorm(i) * EOSScanTopNorm(i)
            '        If PDmax < EOSScanTopNorm(i) Then
            '            PDmax = EOSScanTopNorm(i) : PDtime = EOSScanTopTime(i)
            '        End If
            '    Next i
            '    PDint = PDint * (EOSScanTopTime(2) - EOSScanTopTime(1))
            '    'Find out where we should paste on the remaining times.
            '    Dim IStart As Integer = 0
            '    For i As Integer = 1 To PDSig5ns.NRows
            '        If IStart = 0 And PDSig5ns(i, 1) + PDtime > EOSScanTopTime(EOSScanTopTime.NRows) And PDSig5ns(i, 1) + PDtime > EOSScanBotTime(EOSScanBotTime.NRows) Then
            '            IStart = i
            '        End If
            '    Next
            '    'Paste on the remaining times.
            '    If IStart > 0 Then
            '        Dim PDExtTimes As New RealMatrix(PDSig5ns.NRows + 1 - IStart)
            '        Dim PDExtVolt As New RealMatrix(PDSig5ns.NRows + 1 - IStart)
            '        For i As Integer = IStart To PDSig5ns.NRows
            '            PDExtTimes(i + 1 - IStart) = PDSig5ns(i, 1) + PDtime
            '            PDExtVolt(i + 1 - IStart) = Math.Sqrt(PDint) * PDSig5ns(i, 2)
            '        Next
            '        EOSScanTopTime = Stack(EOSScanTopTime, PDExtTimes) : EOSScanBotTime = Stack(EOSScanBotTime, PDExtTimes)
            '        EOSScanTopNorm = Stack(EOSScanTopNorm, PDExtVolt) : EOSScanBotNorm = Stack(EOSScanBotNorm, PDExtVolt)
            '    End If
            'End If

            'GO TO THE FREQUENCY DOMAIN

            'Interpolate the top and bottom traces onto the same grid and take the Fourier transforms of the top and bottom scans separately.
            'Hopefully Andrew will come up with a better way to do this.
            Dim NFrequency As Integer, Even As Boolean
            'Build the frequency list
            'NFrequency = MaximumFrequency * 5 + 1
            NFrequency = Frequencies.NRows
            Dim FreqResp As New ComplexMatrix(NFrequency)   ', Frequencies As New RealMatrix(NFrequency)
            Dim FreqRespTop As New ComplexMatrix(NFrequency), FreqRespBot As New ComplexMatrix(NFrequency)
            ''This next assignment is no longer needed. This is performed by the user when the default frequency list is specified.
            'For i As Integer = 1 To NFrequency
            '    Frequencies(i) = (i - 1) * 0.2
            'Next i


            'Units going in are VoltsAt1KHz/C, so units coming out are VoltsAt1KHz/(C * GHz)
            'Call TimeToFixedFrequencySpecial(EOSScanTopTime, EOSScanTopNorm, Frequencies, FreqRespTop, Even, EOSScanBotTime, EOSScanBotNorm, FreqRespBot, myMechanism.MechanismName = "Unpreturbed" And GeneratePlots, ScanNumber)
            Call TimeToFixedFrequency(EOSScanTopTime, EOSScanTopNorm, Frequencies, FreqRespTop, Even)
            Call TimeToFixedFrequency(EOSScanBotTime, EOSScanBotNorm, Frequencies, FreqRespBot, Even)


            'Linearize the phase of the response before averaging.
            'This is another thing we do differently now that is probably better than what we did before.
            'The end result is that we have a largish deviation from what we had previously due to this.
            'However, this should be replaced by a better temporal approach to lining up the data before averaging.
            'If Not myMechanism.MechanismName = "PhaseLinearizeBeforeAvg" Then  
            'But maybe we don't need this as an error. So let's just let the user put an uncertaintly on MaxPhaseLin
            Dim PhaseLint As New RealMatrix(FreqResp.NRows)
            PhaseLint = PhaseLinearize(UnWrap(FreqRespTop), Frequencies, MaxPhaseLin)
            For i As Integer = 1 To FreqResp.NRows
                FreqRespTop(i) = Abs(FreqRespTop(i)) * Exp(toComplex(0.0, 1.0) * PhaseLint(i))
            Next i
            PhaseLint = PhaseLinearize(UnWrap(FreqRespBot), Frequencies, MaxPhaseLin)
            For i As Integer = 1 To FreqResp.NRows
                FreqRespBot(i) = Abs(FreqRespBot(i)) * Exp(toComplex(0.0, 1.0) * PhaseLint(i))
            Next i
            'End If

            'Save temporal and frequency data for Andrew.
            'Call Write(EOSScanTopTime, "c:\EOSScanTopTime.txt")
            'Call Write(EOSScanBotTime, "c:\EOSScanBotTime.txt")
            'Call Write(EOSScanTopNorm, "c:\EOSScanTopNorm.txt")
            'Call Write(EOSScanBotNorm, "c:\EOSScanBotNorm.txt")
            'Call Write(Frequencies, "c:\Frequencies.txt")
            'Call Write(FreqRespTop, "c:\FreqRespTop.txt")
            'Call Write(FreqRespBot, "c:\FreqRespBot.txt")
            'Call Write(0.5 * (FreqRespTop + FreqRespBot), "c:\FreqResp.txt")

            'Combine the top and bottom scans in the frequency domain.
            'Units are VoltsAt1KHz/(Amps * Hz) as we multiply by 1 GHz/1E9 Hz
            FreqResp = (0.5 / 1000000000.0) * (FreqRespTop + FreqRespBot)

            'Linearize the phase of the response.
            Dim PhaseLin As New RealMatrix(FreqResp.NRows)
            PhaseLin = PhaseLinearize(UnWrap(FreqResp), Frequencies, MaxPhaseLin)
            For i As Integer = 1 To FreqResp.NRows
                FreqResp(i) = Abs(FreqResp(i)) * Exp(toComplex(0.0, 1.0) * PhaseLin(i))
            Next i

            'Plot energy in the slot mode.
            If GeneratePlots Then
                Dim FreqRespSlot As New ComplexMatrix(Frequencies.NRows)
                FreqRespSlot = DivideElementByElement((0.5 / 1000000000.0) * (FreqRespTop - FreqRespBot), FreqResp)
                Dim Plot4 As New Plot("Frequency (GHz)", "Ratio (dB)", "Ratio of slot response to sum")
                Plot4.AddCurve(Frequencies, dB(FreqRespSlot))
                Plot4.Show()
                'Plot4.SaveToFile(EOSDirectory.Text + "\SlotRatioScan" + ScanNumber.ToString + ".png")
            End If

            'DO THE MISMATCH CORRECTIONS

            'Read in scattering parameters.
            Dim SProbe As New RealMatrix(Frequencies.NRows, 9, ".s2p")
            Dim GammaPD As New ComplexMatrix(Frequencies.NRows), GammaCPWLoad As New ComplexMatrix(Frequencies.NRows)

            'Add in the zero frequency point to these scattering parameters.
            Dim S0 As New RealMatrix(1, 9), S1 As New RealMatrix(Frequencies.NRows - 1, 9, ".s2p"), S2 As New RealMatrix(Frequencies.NRows, 9, ".s2p")
            'The probe-head scattering parameters.
            'Read(S1, LabelProbeHeadS.Text)
            'Dim RProbeDC As Double = NumFromTxt(MaskedTextBoxRProbeDC)
            'If myMechanism.MechanismName = "RProbeDC" Then RProbeDC = RProbeDC + sigmaDCres    'Don't need this as we can add errors to RProbeDC directly
            S0(1, 2) = RProbeDC / (RProbeDC + 100.0) : S0(1, 8) = S0(1, 2)
            S0(1, 4) = 100.0 / (RProbeDC + 100.0) : S0(1, 6) = S0(1, 4)
            SProbe = Stack(S0, ProbeHeadS) : SProbe.DataType = ".s2p"
            'The reflection coefficent of the CPW resistor on the wafer.
            'Read(S1, LabelCPWResSPar.Text)
            S0(1, 2) = (CPWResDCRes - 50.0) / (CPWResDCRes + 50.0) : S0(1, 8) = S0(1, 2)
            S2 = Stack(S0, CPWResSPar)
            GammaCPWLoad.VectorRealPart(1) = S2.Vector(2) : GammaCPWLoad.VectorImagPart(1) = S2.Vector(3)
            'The reflection coefficent of the PD.
            'Read(S1, LabelPDSparams.Text)
            S0(1, 2) = Math.Sqrt(PDSparams(1, 2) ^ 2 + PDSparams(1, 3) ^ 2) : S0(1, 8) = Math.Sqrt(PDSparams(1, 8) ^ 2 + PDSparams(1, 9) ^ 2)
            If PDSparams(1, 2) < 0.0 Then S0(1, 2) = -S0(1, 2) : If S1(1, 8) < 0.0 Then S0(1, 8) = -S0(1, 8)
            S2 = Stack(S0, PDSparams)
            'If PDonP1.Checked Then GammaPD.VectorRealPart(1) = S2.Vector(2) : GammaPD.VectorImagPart(1) = S2.Vector(3)
            'If PDonP2.Checked Then GammaPD.VectorRealPart(1) = S2.Vector(8) : GammaPD.VectorImagPart(1) = S2.Vector(9)
            If myPullDownSelection2 <= 0 Then   'PD on port 1
                GammaPD.VectorRealPart(1) = S2.Vector(2) : GammaPD.VectorImagPart(1) = S2.Vector(3)
            Else                                'PD on port 2
                GammaPD.VectorRealPart(1) = S2.Vector(8) : GammaPD.VectorImagPart(1) = S2.Vector(9)
            End If

            'Plot out the gammas and s-parameters of the probe.
            If GeneratePlots Then
                Dim M As New ComplexMatrix(Frequencies.NRows)
                Dim Plot8 As New Plot("Frequency (GHz)", "Magnitude (dB)", "Scattering parameters")
                Dim Plot8a As New Plot("Frequency (GHz)", "Phase (degrees)", "Scattering parameters")
                Plot8.AddCurve(Frequencies, dB(GammaCPWLoad), "Gamma CPW load")
                Plot8.AddCurve(Frequencies, dB(GammaPD), "Gamma PD")
                M.VectorRealPart(1) = SProbe.Vector(2) : M.VectorImagPart(1) = SProbe.Vector(3)
                Plot8.AddCurve(Frequencies, dB(M), "S11 probe head")
                M.VectorRealPart(1) = SProbe.Vector(4) : M.VectorImagPart(1) = SProbe.Vector(5)
                Plot8.AddCurve(Frequencies, dB(M), "S21 probe head")
                Plot8a.AddCurve(Frequencies, (180.0 / Math.PI) * PhaseLinearize(UnWrap(M), Frequencies, 40.0), "S21 probe head")
                M.VectorRealPart(1) = SProbe.Vector(8) : M.VectorImagPart(1) = SProbe.Vector(9)
                Plot8.AddCurve(Frequencies, dB(M), "S22 probe head")
                Plot8.Show()
                Plot8a.Show()
                'Plot8.SaveToFile(EOSDirectory.Text + "\SPar" + ScanNumber.ToString + ".png")
            End If

            ''This should be done by creating a cascade for the probe head S-Parameters and adding in the cable bending errors.
            ''Add in the phase error from bending the cables as measured by checking the thru measurement after the experiment.
            ''This dose not account correctly for the actual change in cable phase as the cable is always in its relaxed state.
            ''This was found from a statistical study of thru measurements performed early in the project.
            ''This appeared twice in the MathCad code, for in4=10 on page 11 and in4=12 on page 17, as the error changes the S-parameters of the probe and the gamma of the PD.
            ''Turned off after 12Jan08 discussion with Paul. Pages 34-38. Already included in calibration comparison.
            'If myMechanism.MechanismName = "Theta1" Then
            '    Dim Theta As Double = 0.003035
            '    Dim STheta As New ComplexMatrix(2, 2)
            '    Dim T0 As New ComplexMatrix(2, 2)
            '    For i As Integer = 1 To Frequencies.NRows
            '        STheta(2, 1) = toComplex(1.0, Theta * Math.PI * Frequencies(i) / 180.0) : STheta(1, 2) = STheta(2, 1)
            '        T0 = TFromS(STheta) * TFromS(SProbe.SMatrix(i))
            '        SProbe.SMatrix(i) = SFromT(T0)
            '    Next i
            'End If

            ''This would be best cascaded with the error boxes externally. That will allow us to use the most up-to-date algorithms, and keep the approach flexible.
            ''Add in the second phase error from bending the cables on the phase of the photodetector.
            ''This is the phase error when the cable is under stress. This is a much larger change of 2.5 degrees at 110 GHz.
            ''This is a new error mechanism based on recent experiments based on bending a cable with a short at the end,
            ''   which gave a measured phase deviation (two-way) of 5 degrees and 0.05 dB.
            ''Turned off after 12Jan08 discussion with Paul. Pages 34-38. Already included in calibration comparison.
            'If myMechanism.MechanismName = "Theta2" Then
            '    Dim Theta As Double = 0.003035, STheta As New ComplexMatrix(2, 2)
            '    For i As Integer = 1 To Frequencies.NRows
            '        STheta(2, 1) = toComplex(1.0, Theta * Math.PI * Frequencies(i) / 180.0) : STheta(1, 2) = STheta(2, 1)
            '        GammaPD(i) = STheta(2, 2) + GammaPD(i) * STheta(2, 1) * STheta(1, 2) / (toComplex(1.0, 0.0) - GammaPD(i) * STheta(1, 1))
            '    Next i
            'End If

            ''Add in the third phase error from bending the cables.
            ''This is the phase error when the cable is under stress. This can be a much larger change of 2.5 degrees at 110 GHz.
            ''This is a new error mechanism based on a recent experiment based on repeatably bending a cable with a short at the end,
            ''   which gave a measured phase deviation (two-way) of 3 degrees and 0.03 dB.
            ''This shows up as a phase change of 1.5degrees/110GHz=0.0136 degrees/GHz.
            ''These are really quite huristic, but should do the trick until we can replace this by Arek's analysis.
            'If myMechanism.MechanismName = "Theta3" Then
            '    Dim Theta As Double = 0.0136
            '    Dim STheta As New ComplexMatrix(2, 2)
            '    Dim T0 As New ComplexMatrix(2, 2)
            '    For i As Integer = 1 To Frequencies.NRows
            '        STheta(2, 1) = toComplex(1.0, Theta * Math.PI * Frequencies(i) / 180.0) : STheta(1, 2) = STheta(2, 1)
            '        T0 = TFromS(STheta) * TFromS(SProbe.SMatrix(i))
            '        SProbe.SMatrix(i) = SFromT(T0)
            '    Next i
            'End If

            ''Another error we should be adding in with Cascades!
            ''Now comes the sqrt loss. See C:\Data\HTB386\PaulHale\Electrooptic\28Mar08_TekPD\CableStress.xmcd
            ''This is the culprit that really adds in most of the error in the normalized magnitude!!!
            'If myMechanism.MechanismName = "Theta4" Then
            '    Dim Loss As Double = 0.00008, STheta As New ComplexMatrix(2, 2)
            '    Dim T0 As New ComplexMatrix(2, 2), Sinv As New ComplexMatrix(2, 2)
            '    For i As Integer = 1 To Frequencies.NRows
            '        STheta(2, 1) = toComplex(Math.Sqrt(1.0 - Loss * Math.Sqrt(Frequencies(i))), 0.0) : STheta(1, 2) = STheta(2, 1)
            '        T0 = TFromS(STheta) * TFromS(SProbe.SMatrix(i))
            '        SProbe.SMatrix(i) = SFromT(T0)
            '    Next i
            'End If

            ''Another error we should be adding in with Cascades!
            ''Add in a third phase error from the teflon dielectric changing temperature at the teflon "knee".
            ''This is a 1000 PPM = 0.001 change. The length of the probe is about 8.5 lambda at 110 GHz, and this is a delay of 0.077 ps.
            ''The phase change is 8.5*360degrees/1000 at 110 GHz, or 0.0278 degrees/GHz.
            ''This is a new error mechanism based on recent experiments based on bending a cable with a short at the end.
            'If myMechanism.MechanismName = "Teflon" Then
            '    Dim Theta As Double = 0.0278, STheta As New ComplexMatrix(2, 2)
            '    Dim T0 As New ComplexMatrix(2, 2)
            '    For i As Integer = 1 To Frequencies.NRows
            '        STheta(2, 1) = toComplex(1.0, Theta * Math.PI * Frequencies(i) / 180.0) : STheta(1, 2) = STheta(2, 1)
            '        T0 = TFromS(STheta) * TFromS(SProbe.SMatrix(i))
            '        SProbe.SMatrix(i) = SFromT(T0)
            '    Next i
            'End If

            ''This one can be added in by the MUF calibration engine automatically.
            ''Add in the on-wafer drift error from the calibration comparison method.
            ''This gets added to the probe-head error box and the gamma of the CPW resistor.
            'If myMechanism.MechanismName = "DriftCC" Then
            '    Dim DeltaS As New RealMatrix(Frequencies.NRows - 1, 9, ".s2p") : Read(DeltaS, LabelOnWaferCC.Text)
            '    Dim SDrift As New ComplexMatrix(2, 2), T0 As New ComplexMatrix(2, 2)
            '    Dim Sinv As New ComplexMatrix(2, 2)
            '    For i As Integer = 2 To Frequencies.NRows
            '        SDrift = DeltaS.SMatrix(i - 1)
            '        SDrift(1, 1) = SDrift(1, 1) / Math.Sqrt(3.0) : SDrift(2, 2) = SDrift(2, 2) / Math.Sqrt(3.0)
            '        SDrift(2, 1) = 1.0 + (SDrift(2, 1) - 1.0) / Math.Sqrt(3.0) : SDrift(1, 2) = SDrift(2, 1)
            '        T0 = TFromS(SProbe.SMatrix(i)) * TFromS(SDrift)
            '        SProbe.SMatrix(i) = SFromT(T0)
            '        'Add CPW load impdance error
            '        Sinv = SFromT(TFromS(SDrift) ^ -1)
            '        GammaCPWLoad(i) = Sinv(1, 1) + GammaCPWLoad(i) * Sinv(2, 1) * Sinv(1, 2) / (toComplex(1.0, 0.0) - GammaCPWLoad(i) * Sinv(2, 2))
            '    Next i
            'End If

            ''Seems that we don't need this anymore given the notes below.
            ''Add in the DC resistance differences between calibration sets.
            ''Turned off after 12Jan08 discussion with Paul. Pages 34-38. (Heuristic patch added only for wafer 8021 and left in the code. See my notebook, 10May04.)
            'If myMechanism.MechanismName = "SProbeDC_CC" Then
            '    Dim DeltaS As New RealMatrix(Frequencies.NRows - 1, 9, ".s2p") : Read(DeltaS, LabelS_P1_CC.Text)
            '    Dim SDrift As New ComplexMatrix(2, 2), T0 As New ComplexMatrix(2, 2)
            '    For i As Integer = 2 To Frequencies.NRows
            '        SDrift = DeltaS.SMatrix(i - 1)
            '        SDrift(1, 1) = SDrift(1, 1) / Math.Sqrt(3.0) : SDrift(2, 2) = SDrift(2, 2) / Math.Sqrt(3.0)
            '        SDrift(2, 1) = 1.0 + (SDrift(2, 1) - 1.0) / Math.Sqrt(3.0) : SDrift(1, 2) = SDrift(2, 1)
            '        T0 = TFromS(SProbe.SMatrix(i)) * TFromS(SDrift)
            '        SProbe.SMatrix(i) = SFromT(T0)
            '    Next i
            'End If

            ''Another error we should be adding in with Cascades!
            ''Add in the error due to an asymetric short. Part of Raian's error analysis.
            'If myMechanism.MechanismName = "LAsym" Then
            '    Dim eps_s As Double = 43.0, delta_l As Double = 1.0 '1.0 um short asymetry.
            '    Dim Dfactor As Double = (2.0 * Math.PI * 1000000000.0 * (delta_l * 0.000001 / Math.Sqrt(3.0)) / 299792500.0) * Math.Sqrt((1.0 + eps_s) / 2.0)
            '    Dim SDrift As New ComplexMatrix(2, 2), T0 As New ComplexMatrix(2, 2), TDrift As New ComplexMatrix(2, 2)
            '    Dim Sinv As New ComplexMatrix(2, 2)
            '    For i As Integer = 1 To Frequencies.NRows
            '        SDrift(2, 1) = toComplex(1.0, Dfactor * Frequencies(i)) : SDrift(1, 2) = SDrift(2, 1)
            '        TDrift = TFromS(SDrift)
            '        T0 = TFromS(SProbe.SMatrix(i)) * TDrift
            '        SProbe.SMatrix(i) = SFromT(T0)
            '        'Add CPW load impdance error
            '        Sinv = SFromT(TDrift ^ -1)
            '        GammaCPWLoad(i) = Sinv(1, 1) + GammaCPWLoad(i) * Sinv(2, 1) * Sinv(1, 2) / (toComplex(1.0, 0.0) - GammaCPWLoad(i) * Sinv(2, 2))
            '    Next i
            'End If

            ''A correction we should be adding in with Cascades!
            ''Add in an offset to the probe length to adjust for observed lack of cancellation of mismatch correction.
            ''This should only be added into the menu if you can observe an improvement in mismatch correction.
            'Dim DeltaTau As Double = Val(DeltaTauFromUser.Text) 'Time in ps
            'Dim STau As New ComplexMatrix(2, 2), TTau As New ComplexMatrix(2, 2), TTemp As New ComplexMatrix(2, 2)
            'For i As Integer = 1 To Frequencies.NRows
            '    STau(2, 1) = Exp(toComplex(0.0, -2.0 * Math.PI * (DeltaTau * 0.001) * Frequencies(i))) : STau(1, 2) = STau(2, 1)
            '    TTau = TFromS(STau)
            '    TTemp = TTau * TFromS(SProbe.SMatrix(i))
            '    SProbe.SMatrix(i) = SFromT(TTemp)
            'Next i

            ''Another error we should be adding in with Cascades!
            ''Add in the error due to differences in how different operators align the probe tips to the alignment marks.
            ''Delta_L is the misalignment in microns.
            ''With just one operator (me), I get better than 5 um alignment.
            ''However, even I forget exactly how I did it during the calibrations and easily get 5 um off in the EOS lab.
            ''Given that different operators are doing this, 10 um total seems possible, but we probably get about 5 um on average.
            'If myMechanism.MechanismName = "ProbeTipAlignment" Then
            '    Dim Delta_L As Double = 5.0 '5.0 um average misalignment.
            '    Dim T0 As New ComplexMatrix(2, 2), TDrift As New ComplexMatrix(2, 2)
            '    For i As Integer = 1 To Frequencies.NRows
            '        'Subtract off the 200 um of CPW, add the capacitance under the tip due to misalignment, and then move back through the now shorter CPW to the reference plane.
            '        TDrift = CPWLine(-200.0, Frequencies(i)) * CPWStub(Delta_L, Frequencies(i)) * CPWLine(200.0 - Delta_L, Frequencies(i))
            '        T0 = TFromS(SProbe.SMatrix(i)) * TDrift
            '        SProbe.SMatrix(i) = SFromT(T0)
            '    Next i
            'End If

            ''Another error we should be adding in with Cascades!
            ''Add in the error due to GAMMA. This is the part of Raian's error analysis that is described by an impedance transformation.
            'If InStr(myMechanism.MechanismName, "GAMMA") Then
            '    Dim delta As Double = 0.0
            '    If myMechanism.MechanismName = "GAMMA1" Then delta = 0.01
            '    If myMechanism.MechanismName = "GAMMA2" Then delta = 0.024 * (30.0 / NumFromTxt(CPWCenterWidth))
            '    If myMechanism.MechanismName = "GAMMA3" Then delta = 0.000001 / (20 * 0.01)
            '    If myMechanism.MechanismName = "GAMMA4" Then delta = sigmaDCres / NumFromTxt(MaskedTextBoxRLoadCPWCap)
            '    Dim GAMMA As New Complex(0.0, 0.0), Dfactor As New Complex(0.0, 0.0)
            '    GAMMA = 0.5 * delta / Math.Sqrt(3.0)
            '    Dfactor = Sqrt(1.0 - GAMMA * GAMMA)
            '    Dim TDrift As New ComplexMatrix(2, 2), T0 As New ComplexMatrix(2, 2)
            '    Dim Sinv As New ComplexMatrix(2, 2)
            '    TDrift(1, 1) = toComplex(1.0, 0.0) / Dfactor : TDrift(2, 2) = TDrift(1, 1)
            '    TDrift(2, 1) = GAMMA / Dfactor : TDrift(1, 2) = TDrift(2, 1)
            '    Sinv = SFromT(TDrift ^ -1)
            '    For i As Integer = 1 To Frequencies.NRows
            '        T0 = TFromS(SProbe.SMatrix(i)) * TDrift
            '        SProbe.SMatrix(i) = SFromT(T0)
            '        'Add CPW load impdance error
            '        GammaCPWLoad(i) = Sinv(1, 1) + GammaCPWLoad(i) * Sinv(2, 1) * Sinv(1, 2) / (toComplex(1.0, 0.0) - GammaCPWLoad(i) * Sinv(2, 2))
            '    Next i
            'End If

            ''Another error we should be adding in with Cascades!
            ''Add in error due to line resistance from Raian's calculations. This is the loss due to variation of metal conductivity over the wafer.
            'If myMechanism.MechanismName = "SRaian" Then
            '    Dim DeltaS1 As New RealMatrix(1) : Read(DeltaS1, LabelRaianDCResError.Text)
            '    Dim DeltaS As New RealMatrix(Frequencies.NRows, 9, ".s2p")
            '    'Interpolate the data onto the new grid
            '    For i As Integer = 1 To Frequencies.NRows - 1
            '        For j As Integer = 2 To 9
            '            DeltaS.Vector(j) = Linterp(Frequencies, DeltaS1.Vector(j), DeltaS1.Vector(1))
            '        Next j
            '    Next i
            '    Dim SDrift As New ComplexMatrix(2, 2), T0 As New ComplexMatrix(2, 2)
            '    Dim Sinv As New ComplexMatrix(2, 2)
            '    For i As Integer = 2 To Frequencies.NRows
            '        SDrift = DeltaS.SMatrix(i)
            '        SDrift(1, 1) = SDrift(1, 1) * (30.0 / NumFromTxt(CPWCenterWidth)) / Math.Sqrt(3.0)
            '        SDrift(2, 2) = SDrift(2, 2) * (30.0 / NumFromTxt(CPWCenterWidth)) / Math.Sqrt(3.0)
            '        SDrift(2, 1) = 1.0 + (SDrift(2, 1) - 1.0) * (30.0 / NumFromTxt(CPWCenterWidth)) / Math.Sqrt(3.0) : SDrift(1, 2) = SDrift(2, 1)
            '        T0 = TFromS(SProbe.SMatrix(i)) * TFromS(SDrift)
            '        SProbe.SMatrix(i) = SFromT(T0)
            '        'Add CPW load impdance error
            '        Sinv = SFromT(TFromS(SDrift) ^ -1)
            '        GammaCPWLoad(i) = Sinv(1, 1) + GammaCPWLoad(i) * Sinv(2, 1) * Sinv(1, 2) / (toComplex(1.0, 0.0) - GammaCPWLoad(i) * Sinv(2, 2))
            '    Next i
            'End If

            ''Another error we should be adding in with Cascades!
            ''Add in error from 1.0 mm SOLT calibration to the probe-head S-parameters
            'If myMechanism.ProbeHeadS <> "" Then
            '    Dim DeltaS As New RealMatrix(Frequencies.NRows - 1, 9, ".s2p") : Read(DeltaS, myMechanism.ProbeHeadS)
            '    Dim T0 As New ComplexMatrix(2, 2)
            '    For i As Integer = 2 To Frequencies.NRows
            '        T0 = TFromS(DeltaS.SMatrix(i - 1)) * TFromS(SProbe.SMatrix(i))
            '        SProbe.SMatrix(i) = SFromT(T0)
            '    Next i
            'End If

            ''Another error we should be adding in with Cascades!
            ''Add in error from 1.0 mm SOLT calibration to the PD gamma
            'If myMechanism.PhotoDiodeS <> "" Then
            '    Dim DeltaS As New RealMatrix(Frequencies.NRows - 1, 9, ".s2p") : Read(DeltaS, myMechanism.PhotoDiodeS)
            '    Dim SDSB As New ComplexMatrix(2, 2)
            '    For i As Integer = 2 To Frequencies.NRows
            '        'Add PD load impdance error
            '        SDSB = DeltaS.SMatrix(i - 1)
            '        GammaPD(i) = SDSB(2, 2) + GammaPD(i) * SDSB(2, 1) * SDSB(1, 2) / (toComplex(1.0, 0.0) - GammaPD(i) * SDSB(1, 1))
            '    Next i
            'End If

            'Make sure that the photodiode GAMMA is properly extrapolated to 0 even after perturbations.
            GammaPD(1) = Abs(GammaPD(2)) : If GammaPD.Re(2) < 0 Then GammaPD(1) = -GammaPD(1)

            'Calculate the mismatch-corrected result
            Dim FreqRespMMC As New ComplexMatrix(Frequencies.NRows), SProbe1 As New ComplexMatrix(2, 2)
            For i As Integer = 1 To Frequencies.NRows
                SProbe1 = SProbe.SMatrix(i)   'The 2x2 scattering parameter matrix of the probe head at frequency i
                'Use (10) of terminology paper with h=1 to solve for vg in terms of vs.
                'Then use vCPW=v2/(1+GCPW)
                'vPD=vCPW[1-GPD*S11-GCPW*S22-GPD*GCPW*(S21*S12-S11*S22)]/S21
                FreqRespMMC(i) = 1.0 - GammaPD(i) * SProbe1(1, 1) - GammaCPWLoad(i) * SProbe1(2, 2) - GammaPD(i) * GammaCPWLoad(i) * (SProbe1(2, 1) * SProbe1(1, 2) - SProbe1(1, 1) * SProbe1(2, 2))
                FreqRespMMC(i) = FreqRespMMC(i) / (toComplex(1.0, 0.0) + GammaCPWLoad(i))
                FreqRespMMC(i) = FreqRespMMC(i) / SProbe1(2, 1) 'This is the mismatch correction factor.
                'It does not seem that we shuld include this option,given the limited number of options we are allowed in the MUF postprocessors.
                'If Not PerformMismatchCorrectionsToolStripMenuItem.Checked Then FreqRespMMC(i) = toComplex(1.0, 0.0) 'Set the mismatch dorrection to 1 if asked for.
                FreqRespMMC(i) = FreqResp(i) * FreqRespMMC(i)   'Now multiply the uncorrected result by the mismatch correction factor.
                'FreqRespMMC(i) = FreqResp(i) / SProbe1(2, 1)
            Next i

            'Take out the autocorrelation magnitude error, field penetration error, and beamwidth error.
            'Don't compensate for Backreflections, as we don't know the sign.


            'Read in the autocorrelator files.
            'Dim AutoCorAfterTimeData As New RealMatrix(1), AutoCorBeforeTimeData As New RealMatrix(1)
            'Read(AutoCorAfterTimeData, AutocorAfter.Text) : Read(AutoCorBeforeTimeData, AutocorBefore.Text)
            'Get the time step for the autocorrelation trace in ns. (is in ps in MathCad code)
            Dim DeltaTAutoCor As Double = AutocorScale * DivAutocor * 0.001 * 10.0 / (1000.0 * (AutoCorBeforeTimeData.NRows + 1))
            'Subtract the offset.
            Dim AutoCorAvgBefore As Double = 0.0, AutoCorAvgAfter As Double = 0.0
            For i As Integer = 1 To 100
                AutoCorAvgBefore = AutoCorAvgBefore + AutoCorBeforeTimeData(i)
                AutoCorAvgBefore = AutoCorAvgBefore + AutoCorBeforeTimeData(AutoCorBeforeTimeData.NRows + 1 - i)
                AutoCorAvgAfter = AutoCorAvgAfter + AutoCorAfterTimeData(i)
                AutoCorAvgAfter = AutoCorAvgAfter + AutoCorAfterTimeData(AutoCorAfterTimeData.NRows + 1 - i)
            Next i
            AutoCorAvgBefore = AutoCorAvgBefore / 200.0 : AutoCorAvgAfter = AutoCorAvgAfter / 200.0
            Dim Times As New RealMatrix(AutoCorBeforeTimeData.NRows)
            For i As Integer = 1 To AutoCorBeforeTimeData.NRows
                Times(i) = i * DeltaTAutoCor
                AutoCorBeforeTimeData(i) = AutoCorBeforeTimeData(i) - AutoCorAvgBefore
                AutoCorAfterTimeData(i) = AutoCorAfterTimeData(i) - AutoCorAvgAfter
            Next i
            'Go to frequency.
            Dim AutoCorAfterFreqQData As New ComplexMatrix(NFrequency), AutoCorBeforeFreqQData As New ComplexMatrix(NFrequency)
            Dim even1 As Boolean, Freqs As New RealMatrix(1), NFreq As Integer = 0
            Dim AutoCorBeforeFreqData As New ComplexMatrix(NFrequency), AutoCorAfterFreqData As New ComplexMatrix(NFrequency)
            Call TimeToFixedFrequency(Times, AutoCorBeforeTimeData, Frequencies, AutoCorBeforeFreqQData, even1)
            Call TimeToFixedFrequency(Times, AutoCorAfterTimeData, Frequencies, AutoCorAfterFreqQData, even1)
            For i As Integer = 1 To NFrequency
                AutoCorBeforeFreqData(i) = Abs(AutoCorBeforeFreqQData(i) / AutoCorBeforeFreqQData(1))
                AutoCorAfterFreqData(i) = Abs(AutoCorAfterFreqQData(i) / AutoCorAfterFreqQData(1))
            Next i
            If GeneratePlots Then
                'Make a graph showing the user that the autocorrelation files were correctly analyzed.
                Dim Plot1 As New Plot("Time", "Autocorrelation measurement", "Before and after autocorrelations")
                Plot1.AddCurve(Times, AutoCorBeforeTimeData, "Autocorrelation before")
                Plot1.AddCurve(Times, AutoCorAfterTimeData, "Autocorrelation after")
                Plot1.Show()
                'Plot1.SaveToFile(EOSDirectory.Text + "\Autocorrelation.png")
            End If

            'Field penetration and backreflection errors.
            'Note: The magnitudes of FieldPen and BackRefl are less than one. These are the impulse responses of the EOS system.
            'Note: The EOS system has a time-reversed impulse response.
            'Note: Thus the phases of FieldPen and BackRefl are positive.
            Dim DataIn As New RealMatrix(1)
            Dim FieldPen As New ComplexMatrix(NFrequency), BackRefl As New ComplexMatrix(NFrequency), BeamWidth As New ComplexMatrix(NFrequency)
            'Read(DataIn, ImpulseResponseMag.Text)  'This data is in dB.
            DataIn.Fill(ImpulseResponseMag)
            For i As Integer = 1 To DataIn.NRows    'Turn back to amplitude from dB.
                DataIn(i, 3) = DataIn(i, 3) * CPWCenterWidth / 0.00003
                For j As Integer = 3 To 6
                    DataIn(i, j) = 10.0 ^ (DataIn(i, j) / 20.0)
                Next j
            Next i
            FieldPen = Linterp(Frequencies, DataIn.Vector(3), DataIn.Vector(1))
            BackRefl = Linterp(Frequencies, DataIn.Vector(4), DataIn.Vector(1))
            BeamWidth = Linterp(Frequencies, DataIn.Vector(6), DataIn.Vector(1))
            'Read(DataIn, ImpulseResponsePhase.Text)    'Here are the phases in degrees.
            DataIn.Fill(ImpulseResponsePhase)
            For i As Integer = 1 To DataIn.NRows    'Convert from degrees to radians.
                DataIn(i, 3) = DataIn(i, 3) * Math.PI / 180.0 * CPWCenterWidth / 0.00003
                DataIn(i, 4) = DataIn(i, 4) * Math.PI / 180.0
            Next i
            Dim Phase1 As New RealMatrix(NFrequency)
            Phase1 = Linterp(Frequencies, DataIn.Vector(3), DataIn.Vector(1))
            For i As Integer = 1 To NFrequency
                FieldPen(i) = FieldPen(i) * Exp(toComplex(0.0, 1.0) * Phase1(i)) 'Since the impulse response of the EOS system is time reversed, we set this up to get a positive phase.
            Next
            Phase1 = Linterp(Frequencies, DataIn.Vector(4), DataIn.Vector(1))
            For i As Integer = 1 To NFrequency
                BackRefl(i) = BackRefl(i) * Exp(toComplex(0.0, 1.0) * Phase1(i))
            Next

            'Take out the autocorrelation magnitude error, field penetration error, and beamwidth error.
            For i As Integer = 1 To NFrequency
                FreqRespMMC(i) = FreqRespMMC(i) / (0.5 * (AutoCorAfterFreqData(i) + AutoCorBeforeFreqData(i)))
                FreqRespMMC(i) = FreqRespMMC(i) / FieldPen(i)
                FreqRespMMC(i) = FreqRespMMC(i) / BeamWidth(i)
                FreqRespMMC(i) = FreqRespMMC(i) / BackRefl(i)       'The nominal value of this uncertainty should be 1 as we do not know the sign of the correction!
            Next i

            ''Seems that we should do this by letting the mean be calculated with it's uncertainty.
            ''Laser autocorrelation trace measurement error.
            'If myMechanism.MechanismName = "AutoCor" Then
            '    Dim AutoError As New Complex(0.0, 0.0)
            '    For i As Integer = 1 To NFrequency
            '        AutoError = 0.5 * (AutoCorAfterFreqData(i) + AutoCorBeforeFreqData(i)) - toComplex(1.0, 0.0)  'Residual correction.
            '        AutoError = 0.5 * AutoError / Math.Sqrt(3.0)    'Only part of this is error.
            '        AutoError = toComplex(1.0, 0.0) + AutoError     'Make this a multiplicitave error again.
            '        FreqRespMMC(i) = FreqRespMMC(i) / AutoError
            '    Next i
            'End If

            ''Seems that we should do this by assigning uncertainty to the FieldPen variables.
            ''FieldPen error due to electromagentic penetration of the fields into the CPW.
            'If myMechanism.MechanismName = "FieldPen" Then
            '    Dim AutoError As New Complex(0.0, 0.0)
            '    For i As Integer = 1 To NFrequency
            '        AutoError = FieldPen(i) - toComplex(1.0, 0.0)  'Residual correction. Before we did this in dB and phase, but it seems that did not get the correlations correct. So this is better
            '        AutoError = 0.26 * AutoError / Math.Sqrt(3.0)   'Only part of this is error.
            '        AutoError = toComplex(1.0, 0.0) + AutoError     'Make this a multiplicitave error again.
            '        FreqRespMMC(i) = FreqRespMMC(i) / AutoError
            '    Next i
            'End If

            ''Seems that we should do this by assigning uncertainty to the BackRefl variables. 
            ''BackRefl error due to the reflected laser pulses off of the back side of the wafer.
            'If myMechanism.MechanismName = "BackRefl" Then
            '    Dim AutoError As New Complex(0.0, 0.0)
            '    For i As Integer = 1 To NFrequency
            '        AutoError = BackRefl(i) - toComplex(1.0, 0.0)  'Residual correction. Before we did this in dB and phase, but it seems that did not get the correlations correct. So this is better
            '        AutoError = AutoError / Math.Sqrt(3.0)          'Only part of this is error.
            '        AutoError = toComplex(1.0, 0.0) + AutoError     'Make this a multiplicitave error again.
            '        FreqRespMMC(i) = FreqRespMMC(i) / AutoError
            '    Next i
            'End If

            ''Seems that we should do this by assigning uncertainty to the BeamWidth variables.
            ''BeamWidth error due to the finite width of the laser beam in the LiTaO3.
            'If myMechanism.MechanismName = "BeamWidth" Then
            '    Dim AutoError As New Complex(0.0, 0.0)
            '    For i As Integer = 1 To NFrequency
            '        AutoError = BeamWidth(i) - toComplex(1.0, 0.0)  'Residual correction. Before we did this in dB and phase, but it seems that did not get the correlations correct. So this is better
            '        AutoError = AutoError / Math.Sqrt(3.0)          'Only part of this is error.
            '        AutoError = toComplex(1.0, 0.0) + AutoError     'Make this a multiplicitave error again.
            '        FreqRespMMC(i) = FreqRespMMC(i) / AutoError
            '    Next i
            'End If

            'Take out the linear term in the frequency response.
            PhaseLin = PhaseLinearize(UnWrap(FreqRespMMC), Frequencies, MaxPhaseLin)
            For i As Integer = 1 To FreqResp.NRows
                FreqRespMMC(i) = Abs(FreqRespMMC(i)) * Exp(toComplex(0.0, 1.0) * PhaseLin(i))
            Next i

            'Plot comparison of mismatch and non-mismatch corrected results
            If GeneratePlots Then
                Dim Plot5 As New Plot("Frequency (GHz)", "Magnitude of voltage response (V/C)", "Mismatch correction comparison")
                Plot5.AddCurve(Frequencies, Abs(FreqResp), "No mismatch correction")
                Plot5.AddCurve(Frequencies, Abs(FreqRespMMC), "Mismatch corrected")
                Plot5.Show()
                'Plot5.SaveToFile(EOSDirectory.Text + "\AbsScan" + ScanNumber.ToString + ".png")
                'Write(Augment(Frequencies, Augment(Abs(FreqResp), Abs(FreqRespMMC))), EOSDirectory.Text + "\AbsScan" + ScanNumber.ToString + ".txt")
                Dim decibels As New RealMatrix(Frequencies.NRows)
                Dim Plot6 As New Plot("Frequency (GHz)", "Magnitude of voltage response (dB)", "Mismatch correction comparison")
                decibels.Fill(10.0 * Math.Log10(FreqResp.Re(1) * FreqResp.Re(1) + FreqResp.Im(1) * FreqResp.Im(1)))
                decibels = dB(FreqResp) - decibels
                Plot6.AddCurve(Frequencies, decibels, "No mismatch correction")
                'Write(Augment(Frequencies, decibels), EOSDirectory.Text + "\dBScanNoMismatch" + ScanNumber.ToString + ".txt")
                decibels.Fill(10.0 * Math.Log10(FreqRespMMC.Re(1) * FreqRespMMC.Re(1) + FreqRespMMC.Im(1) * FreqRespMMC.Im(1)))
                decibels = dB(FreqRespMMC) - decibels
                Plot6.AddCurve(Frequencies, decibels, "Mismatch corrected")
                'Write(Augment(Frequencies, decibels), EOSDirectory.Text + "\dBScanWithMismatch" + ScanNumber.ToString + ".txt")
                Plot6.Show()
                'Plot6.SaveToFile(EOSDirectory.Text + "\dBScan" + ScanNumber.ToString + ".png")
                Dim Plot7 As New Plot("Frequency (GHz)", "Phase of voltage response (degrees)", "Mismatch correction comparison")
                Plot7.AddCurve(Frequencies, Complex_Number_Class.Phase(FreqResp), "No mismatch correction")
                Plot7.AddCurve(Frequencies, Complex_Number_Class.Phase(FreqRespMMC), "Mismatch corrected")
                Plot7.Show()
                'Plot7.SaveToFile(EOSDirectory.Text + "\PhaseScan" + ScanNumber.ToString + ".png")
                'Write(Augment(Frequencies, Augment(Phase(FreqResp), Phase(FreqRespMMC))), EOSDirectory.Text + "\PhaseScan" + ScanNumber.ToString + ".txt")
            End If

            'Prepare a .complex file for output.
            Dim FreqRespOutput As New RealMatrix(NFrequency, 3, ".complex")
            For kk As Integer = 1 To NFrequency
                FreqRespOutput(kk, 1) = Frequencies(kk)
                FreqRespOutput(kk, 2) = FreqRespMMC(kk).Re
                FreqRespOutput(kk, 3) = FreqRespMMC(kk).Im
            Next kk
            Return FreqRespOutput

        End Function


        ''' <summary>
        ''' This function eliminates multiple measurements performed when the temperature is screwed up
        ''' </summary>
        ''' <param name="MatrixIn">Input result with multiple measurements</param>
        ''' <returns>Final result</returns>
        ''' <remarks></remarks>
        Private Function CompressRepeats(ByRef MatrixIn As RealMatrix) As RealMatrix

            Dim N As Integer = 1
            For i As Integer = 2 To MatrixIn.NRows
                If MatrixIn(i, 1) <> MatrixIn(i - 1, 1) Then N = N + 1
            Next i

            Dim MatrixOut As New RealMatrix(N, MatrixIn.NCols, MatrixIn.DataType)
            Dim N_current As Integer = 1
            For i As Integer = 1 To MatrixIn.NRows - 1
                If MatrixIn(i, 1) <> MatrixIn(i + 1, 1) Then    'Must be that this is a valid point as the next point is at a different time.
                    For j As Integer = 1 To MatrixIn.NCols
                        MatrixOut(N_current, j) = MatrixIn(i, j)
                    Next j
                    N_current = N_current + 1
                End If
            Next i

            'Last point is always valid
            For j As Integer = 1 To MatrixIn.NCols
                MatrixOut(N, j) = MatrixIn(MatrixIn.NRows, j)
            Next j

            Return MatrixOut

        End Function


    End Class


    ''' <summary>
    ''' Post processor uses the NIST algorithm to calcuate EVM
    ''' </summary>
    ''' <remarks>Inputs in the time domain. User must supply both ideal signal and ideal sampling times.</remarks>
    <Serializable()> Public Class Post_NIST_EVM
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private First As Boolean = True

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input measured temporal waveform (.waveform)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Ideal temporal waveform at RF (.waveform)"
                myNameList(1) = "Center frequency (.parameter)"
                myNameList(2) = "Symbol sampling interval (.parameter)"
                myNameList(3) = "Filter delay (time-domain only, .parameter)"
                myNameList(4) = "Filter alpha (.parameter)"
                myNameList(5) = "First symbol sampling time (ns, optional, .parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".waveform" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".meas_archive" : FileExtensions(3) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Normalize EVM to average constellation magnitude."
                PullDownList(1) = "Normalize EVM to peak constellation magnitude."
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Frequency-domain alignment"
                PullDownList(1) = "Frequency-domain alignment w. multi-try"
                PullDownList(2) = "Frequency-domain alignment w. conv. guess"
                PullDownList(3) = "Temporal-convolution alignment (slow)"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Automatically find first symbol sampling time"
                PullDownList(1) = "Specify first symbol sampling time above"
                PullDownList(2) = "Generate test signals from grids above"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(5) As String
                myDescription(0) = "This post processor uses a NIST algorithm to find the EVM of a measured repetative temporal waveform at RF from the ideal waveform and ideal sampling times provided by the user."
                myDescription(1) = "The post-processor returns both the rms EVM and the EVM for each symbol in the .meas file in the directory EVM."
                myDescription(2) = "The post-processor returns the ideal samples and the measured samples in the .meas file in the directory SampledValues."
                myDescription(3) = "The default input time list is determined from the ideal temporal waveform."
                myDescription(5) = "Written by Dylan Williams and Ray R. Tanuhardja. "
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".variables"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "EVM from NIST algorithm"
            End Get
        End Property
        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNamesShort(1) As String
                myFileNamesShort(0) = "\EVM"
                myFileNamesShort(1) = "\SampledValues"
                Return myFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Things are a bit confusing as Frequencies from the MUF are really input grid times and times from the MUF are really output grid frequencies.

            'Read in the input data.
            Dim NTimes As Integer = MechanismList1.FrequencyList.NRows  'The number of temporal measurements.
            Dim TimeSignalIdeal As New RealMatrix(NTimes, 3)            'The ideal temporal signal
            TimeSignalIdeal = MechValues(0).getSParams(MechanismList1)
            Dim TimeSignalIdealComplex As New ComplexMatrix(NTimes), Times As New RealMatrix(NTimes)
            TimeSignalIdealComplex = TimeSignalIdeal.Vector(2) + toComplex(0.0, 1.0) * TimeSignalIdeal.Vector(3)
            Times = TimeSignalIdeal.Vector(1)

            Dim TimeSignalMeasured As New RealMatrix(NTimes, 3)      'The measured temporal signal
            TimeSignalMeasured = MultipleModelInput(0).getSParams(MechanismList1)
            Dim TimeSignalMeasuredComplex As New ComplexMatrix(NTimes)
            TimeSignalMeasuredComplex = TimeSignalMeasured.Vector(2) + toComplex(0.0, 1.0) * TimeSignalMeasured.Vector(3)

            'Read in the parameters
            Dim Fc As Double = MechValues(1).MechanismValue(MechanismList1)                     'Center frequency in GHz
            Dim Tsym As Double = MechValues(2).MechanismValue(MechanismList1)                   'Ideal sampling-time interval = "Filter Tsym (.parameter)"
            Dim delay As Double = MechValues(3).MechanismValue(MechanismList1)                  'myNameList(5) = "Filter delay (.parameter)"
            Dim alpha As Double = MechValues(4).MechanismValue(MechanismList1)                  'myNameList(6) = "Filter alpha (.parameter)"
            Dim FirstIdealSampleTime As Double = MechValues(5).MechanismValue(MechanismList1)   'First ideal sampling time (optional)


            'Find time spacings.
            'deltaT and the input time grid are the oscilloscope sampling times. 
            'These should already be interpolated to the ideal grid.
            'Dim deltaT As Double = MechanismList1.FrequencyList(2) - MechanismList1.FrequencyList(1)    'Tims step in ns
            Dim DeltaT As Double = MechanismList1.FrequencyList(2) - MechanismList1.FrequencyList(1)
            Dim Fs As Double = 1 / DeltaT   'The sampling frequency as determined from the sampling time.
            Dim kSampleSpacing As Integer = CInt(Tsym / DeltaT)    'Cint rounds to nearest integer.
            Dim NSampleTimes As Integer = CInt(CDbl(NTimes) * DeltaT / Tsym)    'Number of symbols. CInt rounds to nearest integer.

            'Check the times to be sure that we have a periodic signal.
            If kSampleSpacing * NSampleTimes <> NTimes Then
                Dim str As String = "The " + NTimes.ToString + " total sample times are not equal to the product of the " + NSampleTimes.ToString + " symbols  and the " + kSampleSpacing.ToString + " samples per symbol."
                MsgBox(str, MsgBoxStyle.OkOnly, "Post_NIST_EVM fatal error")
                MechanismList1.ErrorReport = str : MechanismList1.FatalError = True
            End If

            'Find the first sampling index, and the offset index for sampling. This can be useful in special cases where we don't have any samples in the first few time points, but generally should not happen.
            Dim kFirstSample As Integer = 0, dBest As Double = 10.0 * DeltaT
            For kk As Integer = 1 To Times.NRows
                If Math.Abs(Times(kk) - FirstIdealSampleTime) < dBest Then
                    dBest = Math.Abs(Times(kk) - FirstIdealSampleTime)
                    kFirstSample = kk
                End If
            Next kk
            If kFirstSample <> 1 Then   'This really should not happen. Make sure that the user knows what he or she is doing before continuing.
                Dim str As String = "The first " + kFirstSample.ToString + " samples are zero."
                Dim msgBoxResult1 As MsgBoxResult = MsgBox(str + " Continue?", MsgBoxStyle.OkCancel, "Post_NIST_EVM warning")
                MechanismList1.ErrorReport = str
                MechanismList1.FatalError = (msgBoxResult1 = MsgBoxResult.Cancel)
            End If

            'Downconvert measured and ideal RF signals to baseband
            Dim NConstellationPoints As Integer, Residuals As Double, XConstMax As Double, YConstMax As Double
            Dim TimeSignalIdealComplexBaseband As New ComplexMatrix(NTimes), TimeSignalIdealComplexBasebandUnFiltered As New ComplexMatrix(NTimes)
            Dim TimeSignalMeasuredComplexBaseband As New ComplexMatrix(NTimes), TimeSignalMeasuredComplexBasebandUnFiltered As New ComplexMatrix(NTimes)

            'Self-generate ideal and measured signal for testing. Check to see that the real Generate gets properly translated to the complex matris
            If myPullDownSelection3 = 2 Then
                TimeSignalIdealComplex = GenerateQAMTestSignal(Times, Fc, Tsym, NSampleTimes, kSampleSpacing, False,,,, 1)
                TimeSignalMeasuredComplex = GenerateQAMTestSignal(Times, Fc, Tsym, NSampleTimes, kSampleSpacing, True,,,, 1)
            End If

            ''Test the impact of introducing time delays by rotating the measured or ideal signal. This is only for testing.
            'Dim krotate As Integer = 0
            'Dim TimeSignalTempComplex As New ComplexMatrix(NTimes)  'Make a quick copy to work from
            'TimeSignalTempComplex.Fill(TimeSignalMeasuredComplex)
            'For k As Integer = 1 To NTimes
            '    Dim ktarget As Integer = k + krotate
            '    If ktarget < 1 Then
            '        ktarget += NTimes
            '    End If
            '    If ktarget > NTimes Then
            '        ktarget += -NTimes
            '    End If
            '    TimeSignalMeasuredComplex(k) = TimeSignalTempComplex(ktarget)
            'Next
            'Dim PlotRotate As New Plot("Time (ns)", "Woltage", "Signal with carrier")
            'PlotRotate.AddCurve(Times, TimeSignalTempComplex.VectorRealPart(1), "Before rotation")
            'PlotRotate.AddCurve(Times, TimeSignalMeasuredComplex.VectorRealPart(1), "After rotation")
            'PlotRotate.Show()

            'Downconvert the signals using the measurement times Times
            TimeSignalIdealComplexBasebandUnFiltered = downConversion(TimeSignalIdealComplex, Fc, Times)
            TimeSignalMeasuredComplexBasebandUnFiltered = downConversion(TimeSignalMeasuredComplex, Fc, Times)

            Select Case myPullDownSelection2    'Select frequency-domain or temporal approache

                Case -1, 0, 1, 2     'Frequency-domain approachs

                    'Map everything to the frequency domain
                    Dim FrequencyFilterComplexBaseband As ComplexMatrix = FrequencysqrtRaisedCosine(Tsym, delay, alpha, DeltaT, NTimes)
                    Dim FrequencySignalIdealComplexBaseband As ComplexMatrix, ns As Integer = (FrequencyFilterComplexBaseband.NRows - 1) / 2
                    FrequencySignalIdealComplexBaseband = BasebandT2F(TimeSignalIdealComplexBasebandUnFiltered, ns)
                    Dim FrequencySignalMeasuredComplexBaseband As ComplexMatrix
                    FrequencySignalMeasuredComplexBaseband = BasebandT2F(TimeSignalMeasuredComplexBasebandUnFiltered, ns)

                    'Plot out the results in the frequency domain.
                    If First Then
                        Dim PlotFreq As New Plot("Frequency indices", "Magnitude", "Frequency-domain representation")
                        Dim Freqs As New RealMatrix(FrequencySignalIdealComplexBaseband.NRows)
                        For k As Integer = -ns To ns
                            Freqs(k + ns + 1) = CDbl(k)
                        Next k
                        PlotFreq.AddCurve(Freqs, Abs(FrequencySignalIdealComplexBaseband), "Ideal")
                        PlotFreq.AddCurve(Freqs, Abs(FrequencySignalMeasuredComplexBaseband), "Measured")
                        PlotFreq.Show()
                    End If

                    'Filter (multiply) the signals
                    For k As Integer = 1 To 2 * ns + 1
                        FrequencySignalIdealComplexBaseband(k) = FrequencySignalIdealComplexBaseband(k) * FrequencyFilterComplexBaseband(k)
                        FrequencySignalMeasuredComplexBaseband(k) = FrequencySignalMeasuredComplexBaseband(k) * FrequencyFilterComplexBaseband(k)
                    Next k

                    'Time and theta adjust the measured signal.
                    Dim Residual As Double = 0.0
                    If myPullDownSelection2 <= 0 Then   'Standard approach, should be good for most problems.

                        FrequencySignalMeasuredComplexBaseband = PhaseAdjust(FrequencySignalMeasuredComplexBaseband, FrequencySignalIdealComplexBaseband, Residual)

                    ElseIf myPullDownSelection2 = 1 Then    'Robust multi-try approach

                        'Old way of making things robust
                        FrequencySignalMeasuredComplexBaseband = RobustPhaseAdjust(FrequencySignalMeasuredComplexBaseband, FrequencySignalIdealComplexBaseband, Residual)

                    ElseIf myPullDownSelection2 = 2 Then    'Robust frequency-domian convolution guess approach

                        FrequencySignalMeasuredComplexBaseband = PhaseAdjust(FrequencySignalMeasuredComplexBaseband, FrequencySignalIdealComplexBaseband, Residual)

                    End If

                    'Map things back to time
                    TimeSignalIdealComplexBaseband = BasebandF2T(FrequencySignalIdealComplexBaseband, TimeSignalIdealComplexBaseband.NRows)
                    TimeSignalMeasuredComplexBaseband = BasebandF2T(FrequencySignalMeasuredComplexBaseband, TimeSignalMeasuredComplexBaseband.NRows)

                Case 3          'Temporal approach

                    'Filter the signals
                    Dim hrrc As RealMatrix
                    hrrc = sqrtRaisedCosine(Tsym, delay, alpha, DeltaT)
                    TimeSignalIdealComplexBaseband = conv(hrrc, TimeSignalIdealComplexBasebandUnFiltered)
                    TimeSignalMeasuredComplexBaseband = conv(hrrc, TimeSignalMeasuredComplexBasebandUnFiltered)

                    'Time and theta align the measured signal to the ideal signal
                    TimeSignalMeasuredComplexBaseband = AlignTimes(TimeSignalMeasuredComplexBaseband, TimeSignalIdealComplexBaseband, Times)

                    'Could refine the time using the frequency-domain approach here.

            End Select

            'Find the starting point by trying to indentify the constellation points
            NConstellationPoints = NSampleTimes + 1 : Residuals = -1.0 : XConstMax = 0.0 : YConstMax = 0.0
            Select Case myPullDownSelection3
                Case -1, 0, 2  'Find starting point automatically (including when using test signals
                    For k As Integer = 1 To kSampleSpacing
                        Dim NConstellationPointsTrial As Integer, ResidualsTrial As Double
                        Call FindConstellation(TimeSignalIdealComplexBaseband, k, kSampleSpacing, NSampleTimes, NConstellationPointsTrial, ResidualsTrial, XConstMax, YConstMax)
                        If NConstellationPointsTrial <= NConstellationPoints Then
                            If NConstellationPointsTrial = NConstellationPoints Then    'We have a contender for the best starting point. See if the residual is better too
                                If ResidualsTrial < Residuals Or Residuals < 0.0 Then
                                    kFirstSample = k : NConstellationPoints = NConstellationPointsTrial : Residuals = ResidualsTrial    'Indeed, this is a better choice
                                End If
                            Else    'This is clearly a better choice
                                kFirstSample = k : NConstellationPoints = NConstellationPointsTrial : Residuals = ResidualsTrial
                            End If
                        End If
                    Next k
                Case 1      'Use the optional value entered by the user. 
                    Call FindConstellation(TimeSignalIdealComplexBaseband, kFirstSample, kSampleSpacing, NSampleTimes, NConstellationPoints, Residuals, XConstMax, YConstMax)
            End Select

            'Warn the user if the number of constellation points is off, and possibly recalculate theta if things are not working right.
            If First Then
                Select Case NConstellationPoints
                    Case 2, 4, 8, 16, 64, 128  'The common numbers of constellation points
                    Case Else
                        MsgBox("Warning: " + NConstellationPoints.ToString + " constellation points detected. This may indicate that sampling times are incorrect.", MsgBoxStyle.Information, "NIST Standard EVM Algorithm")
                End Select
            End If

            'Sample (decimate) the signals
            Dim TimeSignalIdealSampled As New ComplexMatrix(NSampleTimes), IdealSampleTimes As New RealMatrix(NSampleTimes), TimeSignalMeasuredSampled As New ComplexMatrix(NSampleTimes)
            Dim kx As Integer = kFirstSample
            For k As Integer = 1 To NSampleTimes
                IdealSampleTimes(k) = Times(kFirstSample) + CDbl(k - 1) * Tsym
                TimeSignalIdealSampled(k) = TimeSignalIdealComplexBaseband(kx)
                TimeSignalMeasuredSampled(k) = TimeSignalMeasuredComplexBaseband(kx)
                kx += kSampleSpacing : If kx > TimeSignalIdealComplexBaseband.NRows Then kx += -TimeSignalIdealComplexBaseband.NRows
            Next k

            'Normalize the constellations
            Dim AIdeal As Double = 0.0, AMeasured As Double = 0.0   'The ideal and measured normalization factors
            Select Case myPullDownSelection1
                Case -1, 0  'Normalize EVM to average constellation magnitude.
                    TimeSignalIdealSampled = normaliseConstellation(TimeSignalIdealSampled, TimeSignalIdealSampled, AIdeal)
                    TimeSignalMeasuredSampled = normaliseConstellation(TimeSignalMeasuredSampled, TimeSignalIdealSampled, AMeasured)
                Case 1      'Normalize EVM to peak constellation magnitude.
                    TimeSignalIdealSampled = normaliseConstellationMax(TimeSignalIdealSampled, TimeSignalIdealSampled, AIdeal)
                    TimeSignalMeasuredSampled = normaliseConstellationMax(TimeSignalMeasuredSampled, TimeSignalIdealSampled, AMeasured)
            End Select

            'Calculate the EVM
            Dim EVMrms As Double = 0.0, SampledValues As New RealMatrix(NSampleTimes, 5, ".complex")
            Dim EVM As New RealMatrix(NSampleTimes + 1, 2, ".variables")
            For k As Integer = 1 To NSampleTimes
                EVM(k + 1, 1) = k
                EVM(k + 1, 2) = Abs(TimeSignalMeasuredSampled(k) - TimeSignalIdealSampled(k))   'The EVM for each symbol
                SampledValues(k, 1) = IdealSampleTimes(k)               'The samples for each symbol
                SampledValues(k, 2) = TimeSignalIdealSampled(k).Re
                SampledValues(k, 3) = TimeSignalIdealSampled(k).Im
                SampledValues(k, 4) = TimeSignalMeasuredSampled(k).Re
                SampledValues(k, 5) = TimeSignalMeasuredSampled(k).Im
                EVMrms = EVMrms + EVM(k + 1, 2) ^ 2                     'The RMS value of the EVM averaged over all symbols
            Next k
            'Get the overall EVM
            EVMrms = Math.Sqrt(EVMrms / CDbl(NSampleTimes))
            EVM(1, 1) = 0 : EVM(1, 2) = EVMrms

            'Report the results
            Dim Output(1) As Object
            Output(0) = EVM             'The EVM
            Output(1) = SampledValues   'The samples for each symbol

            'Make plots for the user
            If First Then

                Dim Plot1 As New Plot("Times (ns)", "Signal", "Complex baseband signals after filtering" + vbCrLf + "(" + NConstellationPoints.ToString + " constellation points, first sampling index is " + kFirstSample.ToString + ")")
                Dim TimeSignalIdealRe As New RealMatrix(TimeSignalIdealComplexBaseband.NRows)
                Dim TimeSignalIdealIm As New RealMatrix(TimeSignalIdealComplexBaseband.NRows)
                Dim TimeSignalMeasuredRe As New RealMatrix(TimeSignalMeasuredComplexBaseband.NRows)
                Dim TimeSignalMeasuredIm As New RealMatrix(TimeSignalMeasuredComplexBaseband.NRows)
                For k As Integer = 1 To Times.NRows
                    TimeSignalIdealRe(k) = TimeSignalIdealComplexBaseband(k).Re
                    TimeSignalIdealIm(k) = TimeSignalIdealComplexBaseband(k).Im
                    TimeSignalMeasuredRe(k) = TimeSignalMeasuredComplexBaseband(k).Re
                    TimeSignalMeasuredIm(k) = TimeSignalMeasuredComplexBaseband(k).Im
                Next
                Plot1.AddCurve(Times, TimeSignalIdealRe, "Real part of Ideal signal")
                Plot1.AddCurve(Times, TimeSignalIdealIm, "Imag part of Ideal signal")
                Plot1.AddCurve(Times, TimeSignalMeasuredRe, "Real part of Measured signal")
                Plot1.AddCurve(Times, TimeSignalMeasuredIm, "Imag part of Measured signal")
                Plot1.Show()

                Dim PlotConstellation1 As New Plot("Real", "Imaginary", "Constellation Diagram (EVM = " + (100.0 * EVMrms).ToString("F2") + " %)", True)
                PlotConstellation1.AddCurve(SampledValues.Vector(2), SampledValues.Vector(3), "Ideal constellation points", 1, 8, , False)      'Red Crosses
                PlotConstellation1.AddCurve(SampledValues.Vector(4), SampledValues.Vector(5), "Measured sampling points", 0, 3, , False)        'Black squares
                PlotConstellation1.AddCurve(AMeasured * TimeSignalMeasuredRe, AMeasured * TimeSignalMeasuredIm, "Measured trajectory", 8, 0)    'Grey lines
                PlotConstellation1.Show()

                First = False

            End If

            'That's all folks!
            Return Output

        End Function

        ''' <summary>
        ''' Transform the complex temporal baseband signal to the frequency domain
        ''' </summary>
        ''' <param name="TemporalValues">The N temporal values</param>
        ''' <param name="ns">Half of the number of frequencies we will use = SPAN/deltaT</param>
        ''' <returns>The 2*ns+1 complex frequency values</returns>
        ''' <remarks>This would be faster if we used an optimzed FFT and threw out the unused frequencies.</remarks>
        Private Function BasebandT2F(ByRef TemporalValues As ComplexMatrix, ByVal ns As Integer) As ComplexMatrix

            Dim FreqDomain As New ComplexMatrix(1 + 2 * ns)

            For n As Integer = -ns To ns
                For k As Integer = 1 To TemporalValues.NRows
                    FreqDomain(n + ns + 1) = FreqDomain(n + ns + 1) + TemporalValues(k) * Complex_Number_Class.Exp(toComplex(0.0, -(2.0 * Math.PI * CDbl(n) / CDbl(TemporalValues.NRows)) * CDbl(k - 1)))
                Next k
                FreqDomain(n + ns + 1) = (1.0 / CDbl(TemporalValues.NRows)) * FreqDomain(n + ns + 1)
            Next n

            Return FreqDomain

        End Function

        ''' <summary>
        ''' Transform the complex frequency domain baseband signal to time 
        ''' </summary>
        ''' <param name="FreqDomain">The 2*ns+1 frequncy values</param>
        ''' <param name="N">The number of time points</param>
        ''' <returns>The N complex temporal values</returns>
        ''' <remarks>This would be faster if we used an optimzed FFT and threw out the unused times.</remarks>
        Private Function BasebandF2T(ByRef FreqDomain As ComplexMatrix, ByVal N As Integer) As ComplexMatrix

            Dim TemporalValues As New ComplexMatrix(N), ns As Integer = (FreqDomain.NRows - 1) / 2

            For k As Integer = 1 To TemporalValues.NRows
                For nf As Integer = -ns To ns
                    TemporalValues(k) = TemporalValues(k) + FreqDomain(nf + ns + 1) * Complex_Number_Class.Exp(toComplex(0.0, (2.0 * Math.PI * CDbl(k - 1) / CDbl(N)) * CDbl(nf)))
                Next nf
            Next k

            Return TemporalValues

        End Function

        Private Function AlignTimes(ByRef MeasuredComplex As ComplexMatrix, ByRef IdealComplex As ComplexMatrix, ByRef Times As RealMatrix) As ComplexMatrix

            Dim MeasuredComplexAligned As New ComplexMatrix(MeasuredComplex.NRows), MeasuredComplexConvolved As New ComplexMatrix(MeasuredComplex.NRows)

            'Use a complex convolution to find the approximate theta and time delay
            MeasuredComplexConvolved = convComplex(IdealComplex, MeasuredComplex)

            'Find the maximum convolved value. This gives us the approximate time offset and theta
            Dim kMax As Integer = 0, A As New Complex(0.0, 0.0)
            For k As Integer = 1 To MeasuredComplex.NRows
                If Abs(MeasuredComplexConvolved(k)) > Abs(A) Then
                    kMax = k : A = MeasuredComplexConvolved(k)
                End If
            Next k

            'Move the time and theta to best correspond to the ideal signal.
            Dim PhaseAdjust As New Complex(A.Re, -A.Im) : PhaseAdjust = PhaseAdjust / Abs(PhaseAdjust)  'Negative phase, unity magnitude.
            For k As Integer = 1 To MeasuredComplex.NRows
                Dim kAligned As Integer = k + kMax - 1  'The location we want to map back to k
                While kAligned > MeasuredComplex.NRows  'In case kAligned is too large and needs to be wrapped around
                    kAligned = kAligned - MeasuredComplex.NRows
                End While
                MeasuredComplexAligned(k) = PhaseAdjust * MeasuredComplex(kAligned) 'Map the value back to the time corresponding to the ideal signal and adjust the phase to match the ideal signal
            Next k

            'Do a fine adjustment on the time and phase

            'Convert to frequency domain
            'Call ComplexTimeToFixedFrequency(BasebandTimes, )

            'Divide measured signal by ideal signal

            'Fit ax+b to the phase

            'Adjust the phase of the measured frequency-domain signal

            'Convert the measured frequency-domain signal back to time

            'Upconvert the measured signal so that we can compare it with the ideal signal

            Return MeasuredComplexAligned

        End Function

        ''' <summary>
        ''' Convolve the filter response hrrc with the periodic complex signal x
        ''' </summary>
        ''' <param name="hrrc">The filter response</param>
        ''' <param name="x">The signal</param>
        ''' <returns>The convolution of the filter response and the signal.</returns>
        ''' <remarks>This could also be implemented with Fourier transforms.
        ''' The function does not delay the signal after convolution.</remarks>
        Private Function conv(ByRef hrrc As RealMatrix, ByRef x As ComplexMatrix) As ComplexMatrix

            Dim y As New ComplexMatrix(x.NRows)

            'Step through each point in y
            For ky As Integer = 1 To y.NRows

                'Calculate the kth point in y by convolving with hrrc with x at the kth point in x
                For kh As Integer = 1 To hrrc.NRows   'Step through hrrc

                    'Calcuate the point in x that corresponds to kh in hrrc
                    Dim p As Integer = kh - (1 + (hrrc.NRows - 1) / 2)    'This is the index of hrrc with p=0 at the center of the filter
                    Dim kx As Integer = ky + p  'This is the index in x we want.
                    While kx > x.NRows  'In case kx  is too large
                        kx += -x.NRows
                    End While
                    While kx < 1        'In case kx  is too small
                        kx += x.NRows
                    End While

                    y(ky) = y(ky) + hrrc(kh) * x(kx)

                Next kh

            Next ky

            Return y

        End Function


        ''' <summary>
        ''' Convolve the conjugate of the reference signal with the complex signal x
        ''' </summary>
        ''' <param name="ReferenceSignal">The complex reference signal</param>
        ''' <param name="x">The complex input signal.</param>
        ''' <returns>The convolution.</returns>
        ''' <remarks>This convolution can be used to determine the temporal offset and theta offset between the signal x and reference signal </remarks>
        Private Function convComplex(ByRef ReferenceSignal As ComplexMatrix, ByRef x As ComplexMatrix) As ComplexMatrix

            Dim y As New ComplexMatrix(x.NRows)

            'Step through each point in y
            For ky As Integer = 1 To y.NRows

                'Calculate the kth point in y by convolving the conjugate of the reference signal with x at the kth point in x
                For kh As Integer = 1 To ReferenceSignal.NRows   'Step through Reference signal

                    'Calcuate the point in x that corresponds to kh in the reference signal
                    Dim kx As Integer = ky + kh - 1  'This is the index in x we want.
                    While kx > x.NRows  'In case kx  is too large
                        kx += -x.NRows
                    End While
                    While kx < 1        'In case kx  is too small
                        kx += x.NRows
                    End While

                    y(ky) = y(ky) + Complex_Number_Class.Conj(ReferenceSignal(kh)) * x(kx)

                Next kh

            Next ky

            Return y

        End Function


        ''' <summary>
        ''' The square-root raised cosine filter
        ''' </summary>
        ''' <param name="Tsym"></param>
        ''' <param name="delay"></param>
        ''' <param name="alpha"></param>
        ''' <param name="deltaT">The time step between points in the RF signals</param>
        ''' <param name="N">The total number of points in the RF signals</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function FrequencysqrtRaisedCosine(ByVal Tsym As Double, ByVal delay As Double, ByVal alpha As Double, ByVal deltaT As Double, ByVal N As Double) As ComplexMatrix
            'function [hrrc t] = sqrtRaisedCosine(Tsym, delay, alpha, Fs)
            ' sqrtRaisedCosine generates the impulse response of a Square Root Raised Cosine.
            '
            ' REFERENCES:
            '
            ' [1] M. Joost, "Theory of Root-Raised Cosine Filter," published online at
            ' www.michael-joost.de/rrcfilter.pdf

            'Figure out the frequencies we will use
            Dim f2 As Double = ((1.0 + alpha) / 2.0) / CDbl(Tsym)   'Maximum filter frequency; alpha=r, Tsym=Tc
            Dim f1 As Double = ((1.0 - alpha) / 2.0) / CDbl(Tsym)   'Start of rolloff
            Dim deltaF As Double = 1.0 / (CDbl(N) * deltaT)         'Frequency spacing; N=total number of points, deltaT = point spacing
            Dim ns As Integer = Int(f2 / deltaF)                    'Int returns the inter portion of the number, so this is just the set of frequencies in the passband of the filter
            Dim Ntotal As Integer = 1 + 2 * ns
            Dim hrrc As New ComplexMatrix(Ntotal)
            Dim B As Double = Math.Sqrt(Tsym)

            'Create the filter values
            Dim k As Integer = 0, sum As Double = 0.0
            For kFreq As Integer = -ns To ns
                Dim Freq As Double = CDbl(kFreq) * deltaF
                k += 1
                Select Case Abs(Freq)
                    Case Is <= f1
                        hrrc(k) = B
                    Case Is <= f2
                        hrrc(k) = (B / Math.Sqrt(2.0)) * Math.Sqrt(1.0 + Math.Cos(Math.PI * ((Abs(Freq) - f1) / (alpha / Tsym))))
                End Select
            Next kFreq

            Return hrrc

        End Function

        ''' <summary>
        ''' Down-convert the RF signal to baseband
        ''' </summary>
        ''' <param name="x">The RF signal</param>
        ''' <param name="Fc">The center frequency of the RF signal</param>
        ''' <param name="Times">The times at which the RF samples were taken.</param>
        ''' <param name="ThetaAdjust">The theta adjustment for the ideal constellation diagram.</param>
        ''' <returns>The baseband signal.</returns>
        ''' <remarks></remarks>
        Private Function downConversion(ByRef x As ComplexMatrix, ByVal Fc As Double, ByRef Times As RealMatrix, Optional ByVal ThetaAdjust As Double = 0.0) As ComplexMatrix
            ' downConversion multiplies the input vector with a complex carrier signal.
            '
            ' [Y TC] = downConversion(X deltaT FC)
            ' multiplies the input vector X with a complex carrier with frequency FC.
            ' The time vector TC equals the length of vector X and has time steps
            ' of deltaT equal to the inverse of the sampling frequency FS (1/FS)

            '--------------------------------------------------------------------------
            ' CHANGELOG:
            ' Created Jun 19, 2014 -> R. R. Tanuhardja
            ' Modified by Dylan Williams - time generation not needed.
            '--------------------------------------------------------------------------

            Dim y As New ComplexMatrix(Times.NRows)

            For k As Integer = 1 To x.NRows

                ' Create time vector
                't = 1/Fs:1/Fs:length(x)/Fs;

                ' Multiply the input vector with the carrier
                'y = x.*exp(-1j*Fc*2*pi*t+1j*theta*pi/180);
                y(k) = x(k) * Exp(toComplex(0.0, ThetaAdjust - 2.0 * Math.PI * Fc * Times(k)))

            Next k

            Return y

        End Function

        ''' <summary>
        ''' Normalize the constellation to the average power in the signal
        ''' </summary>
        ''' <param name="x">The input constellation of symbols</param>
        ''' <param name="xideal">The ideal constellation of symbols</param>
        ''' <param name="A">The normalization constant we used</param>
        ''' <returns>The constellation normalized to power.</returns>
        ''' <remarks>Algorithm ensures that we use one and only one sample from each constellation point.</remarks>
        Private Function normaliseConstellation(ByRef x As ComplexMatrix, ByRef xideal As ComplexMatrix, ByRef A As Double) As ComplexMatrix
            ' normaliseConstellation normalises the complex input vector by dividing 
            ' the input by the sum of the squares of the amplitudes of all symbols
            '
            ' normaliseConstellation normalises the complex input vector X and returns
            ' the normalised values in output vector Y, which is the result of the
            ' normalisation factor A times the input vector X. This function can be 
            ' used for measured constellation diagrams as well as ideal constellation
            ' diagrams.
            '
            ' REFERENCES:
            '
            ' [1] M. D. McKinley, K. A. Remley, M. Myslinski, J. Stevenson Kenney, D.
            ' Schreurs, B. Nauwelaars, "EVM Calculation for Broadband Modulated
            ' Signals," 64th ARFTG Conf., Dig., Orlando, FL, pp. 45-52, Dec 2004

            '--------------------------------------------------------------------------
            ' CHANGELOG:
            ' Created Jun 19, 2014 -> R. R. Tanuhardja
            ' Modified by Dylan Williams to ensure that each constellation point is included once and only once when normalizing
            '--------------------------------------------------------------------------

            ' Calculate the sum of the squares of the amplitude of all values in x
            'P = sum(sum(real(x).^2+imag(x).^2));
            Dim Pmeasured As Double = 0.0, Pideal As Double = 0.0, PidealNoRepeats As Double = 0.0, N_NoRepeats As Integer = 0, XMax As Double = 0.0
            'Find the maximum constellation point
            For k As Integer = 1 To x.NRows
                If Abs(xideal(k)) > XMax Then XMax = Abs(xideal(k))
            Next k

            'See how many constelation points we have
            For k As Integer = 1 To x.NRows
                Pmeasured = Pmeasured + Abs(x(k)) ^ 2   'Power in the measured constellation
                Pideal = Pideal + Abs(xideal(k)) ^ 2    'Power in the ideal constellation
                'Power in the ideal constellation with no repeat points. This prevents the answer from depending on the choice of constellation.
                Dim Repeat As Boolean = False
                If k > 1 Then
                    For kRepeat As Integer = 1 To k - 1 'Do we have a repeat point? It is hard to determine what is a repeat, and what is an artifict. Here we use a 1 % difference. We may find that this criteia proves inadequate.
                        If Abs(xideal(k) - xideal(kRepeat)) < XMax / 100.0 Then Repeat = True
                    Next kRepeat
                End If
                'Add this to the sum if this is a new point. Otherwise, ignore it.
                If Not Repeat Then
                    N_NoRepeats += 1 : PidealNoRepeats = PidealNoRepeats + Abs(xideal(k)) ^ 2
                End If
            Next k

            ''Warn the user if the number of constellation points is off.
            'If First Then
            '    Select Case N_NoRepeats
            '        Case 2, 4, 8, 16, 64, 128  'The common numbers of constellation points
            '        Case Else
            '            MsgBox("Warning: " + N_NoRepeats.ToString + " constellation points detected. This may indicate that sampling times are incorrect.", MsgBoxStyle.Information, "NIST Standard EVM Algorithm")
            '    End Select
            'End If

            ' Calculate normalisation factor 
            A = Math.Sqrt((Pideal / Pmeasured)) / Math.Sqrt(PidealNoRepeats / CDbl(N_NoRepeats))

            ' Calculate normalised values
            'y = A*x;
            Dim y As New ComplexMatrix(x.NRows)
            y = A * x

            Return y

        End Function

        Sub FindConstellation(ByRef x As ComplexMatrix, ByVal kFirstSample As Integer, ByVal kSampleSpacing As Integer, ByVal NSampleTimes As Integer, ByRef NConstellationPoints As Integer, ByRef Residuals As Double, ByRef XConstMax As Double, ByRef YConstMax As Double)

            'Find the sample points in x and put them in xideal
            Dim xideal As New ComplexMatrix(NSampleTimes)
            For k As Integer = 1 To NSampleTimes
                Dim kSamplePosition As Integer = kFirstSample + (k - 1) * kSampleSpacing
                While kSamplePosition > x.NRows
                    kSamplePosition += -x.NRows
                End While
                xideal(k) = x(kSamplePosition)
            Next k

            'Find the maximum constellation point
            Dim XMax As Double = 0.0
            For k As Integer = 1 To xideal.NRows
                If Abs(xideal(k)) > XMax Then XMax = Abs(xideal(k))
            Next k

            'See how many constellation points we can find. Keep track of the maximum one.
            Dim XConst(0) As Double, YConst(0) As Double
            XConst(0) = xideal(1).Re : YConst(0) = xideal(1).Im : NConstellationPoints = 1 : Residuals = 0.0
            For k As Integer = 2 To xideal.NRows
                'Power in the ideal constellation with no repeat points. This prevents the answer from depending on the choice of constellation.
                Dim Repeat As Boolean = False
                For kk As Integer = 0 To NConstellationPoints - 1
                    If Not Repeat And Abs(xideal(k) - toComplex(XConst(kk), YConst(kk))) < XMax / 100.0 Then   'We already saw this constellation point.
                        Repeat = True
                        Residuals += Abs(xideal(k) - toComplex(XConst(kk), YConst(kk)))
                    End If
                Next kk
                'Add this to the log if this is a new point. Otherwise, See what the residuals look like.
                If Not Repeat Then  'Log in our repeat for next time
                    NConstellationPoints += 1
                    ReDim Preserve XConst(NConstellationPoints - 1) : XConst(NConstellationPoints - 1) = xideal(k).Re
                    ReDim Preserve YConst(NConstellationPoints - 1) : YConst(NConstellationPoints - 1) = xideal(k).Im
                    'Keep track of the largest constellation point
                    Dim ConstMax = XConst(NConstellationPoints - 1) * XConst(NConstellationPoints - 1) + YConst(NConstellationPoints - 1) * YConst(NConstellationPoints - 1)
                    If ConstMax > XConstMax * XConstMax + YConstMax * YConstMax Then XConstMax = XConst(NConstellationPoints - 1) : YConstMax = YConst(NConstellationPoints - 1)
                End If
            Next k

        End Sub

        ''' <summary>
        ''' Normalize the constellation to the maximum symbol amplitude.
        ''' </summary>
        ''' <param name="x">The measured constellation of symbols</param>
        ''' <param name="xideal">The ideal constellation of symbols</param>
        ''' <param name="A">The Normalization constant we used</param>
        ''' <returns>The constellation normalized to the maximum symbol amplitude.</returns>
        ''' <remarks></remarks>
        Private Function normaliseConstellationMax(ByRef x As ComplexMatrix, ByRef xideal As ComplexMatrix, ByRef A As Double) As ComplexMatrix
            ' normaliseConstellationMax normalises the complex input vector by dividing 
            ' the input by the distance of the symbol that is the farthest of the
            ' origin. This function only works square QAM schemes.
            '
            ' normaliseConstellationMax normalises the complex input vector X and 
            ' returns the normalised values in output vector Y, which is the result of
            ' the normalisation factor A times the input vector X. This function can be 
            ' used for measured constellation diagrams as well as ideal constellation
            ' diagrams. The normalisation factor A is here defined as the inverse of
            ' the biggest distance between a constellation point and the origin.
            '
            ' REFERENCES:
            '
            ' [1] National Instruments white paper, "Modulation Error Ratio (MER) and 
            ' Error Vector Magnitude (EVM)", published online at 
            ' http://www.ni.com/white-paper/3652/en/

            '--------------------------------------------------------------------------
            ' CHANGELOG:
            ' Created Jun 19, 2014 -> R. R. Tanuhardja
            ' Modified by Dylan Williams to find the constalation from the ideal signal
            '--------------------------------------------------------------------------


            ' Calculate the sum of the squares of the amplitude of all values in x
            'P = sum(sum(real(x).^2+imag(x).^2));
            Dim Pmeasured As Double = 0.0, Pideal As Double = 0.0, VidealMax As Double = 0.0
            For k As Integer = 1 To x.NRows
                Pmeasured = Pmeasured + Abs(x(k)) ^ 2
                Pideal = Pideal + Abs(xideal(k)) ^ 2
                If VidealMax < Abs(xideal(k)) Then
                    VidealMax = Abs(xideal(k))
                End If
            Next k

            ' Calculate normalisation factor 
            A = Math.Sqrt((Pideal / Pmeasured)) / VidealMax

            ' Calculate normalised values
            'y = A*x;
            Dim y As New ComplexMatrix(x.NRows)
            y = A * x

            Return y

        End Function


        ''' <summary>
        ''' Try different ways of adjusting the phase with a weighted least-squares algorithm and select the best result
        ''' </summary>
        ''' <param name="Measured">The Measured baseband signal</param>
        ''' <param name="Ideal">The ideal baseband signal</param>
        ''' <param name="Residual">The residual of the phase fit</param>
        ''' <returns>Signal with a time and theta adjustment.</returns>
        ''' <remarks>Call this several times with different initial temporal rotations to make this robust.</remarks>
        Private Function RobustPhaseAdjust(ByRef Measured As ComplexMatrix, ByRef Ideal As ComplexMatrix, ByRef Residual As Double) As ComplexMatrix

            'Time and theta adjust the measured signal. Try several starting guesses to find robust fit.
            Dim FrequencySignalMeasuredComplexBaseband As ComplexMatrix, FrequencySignalMeasuredComplexBaseband1 As ComplexMatrix, FrequencySignalMeasuredComplexBaseband2 As ComplexMatrix, FrequencySignalMeasuredComplexBaseband3 As ComplexMatrix, FrequencySignalMeasuredComplexBaseband4 As ComplexMatrix

            'Try with several different starting delays.
            Dim Residual1 As Double = 0.0, Residual2 As Double = 0.0, Residual3 As Double = 0.0, Residual4 As Double = 0.0
            FrequencySignalMeasuredComplexBaseband1 = TranslateTimeZero(Measured, 0.0)
            FrequencySignalMeasuredComplexBaseband1 = PhaseAdjust(FrequencySignalMeasuredComplexBaseband1, Ideal, Residual1)
            FrequencySignalMeasuredComplexBaseband2 = TranslateTimeZero(Measured, 0.25)
            FrequencySignalMeasuredComplexBaseband2 = PhaseAdjust(FrequencySignalMeasuredComplexBaseband2, Ideal, Residual2)
            FrequencySignalMeasuredComplexBaseband3 = TranslateTimeZero(Measured, 0.5)
            FrequencySignalMeasuredComplexBaseband3 = PhaseAdjust(FrequencySignalMeasuredComplexBaseband3, Ideal, Residual3)
            FrequencySignalMeasuredComplexBaseband4 = TranslateTimeZero(Measured, 0.75)
            FrequencySignalMeasuredComplexBaseband4 = PhaseAdjust(FrequencySignalMeasuredComplexBaseband4, Ideal, Residual4)

            'Pick the best answer
            If Residual1 <= Residual2 And Residual1 <= Residual3 And Residual1 <= Residual4 Then
                FrequencySignalMeasuredComplexBaseband = FrequencySignalMeasuredComplexBaseband1
                Residual = Residual1
            End If
            If Residual2 <= Residual1 And Residual2 <= Residual3 And Residual2 <= Residual4 Then
                FrequencySignalMeasuredComplexBaseband = FrequencySignalMeasuredComplexBaseband2
                Residual = Residual2
            End If
            If Residual3 <= Residual1 And Residual3 <= Residual2 And Residual3 <= Residual4 Then
                FrequencySignalMeasuredComplexBaseband = FrequencySignalMeasuredComplexBaseband3
                Residual = Residual3
            End If
            If Residual4 <= Residual1 And Residual4 <= Residual2 And Residual4 <= Residual3 Then
                FrequencySignalMeasuredComplexBaseband = FrequencySignalMeasuredComplexBaseband4
                Residual = Residual4
            End If

            Return FrequencySignalMeasuredComplexBaseband

        End Function

        ''' <summary>
        ''' Translate the tmie zero of a Fourier-transformed signal
        ''' </summary>
        ''' <param name="Measured">The complex signal</param>
        ''' <param name="Fraction">The fraction of the cycle to perform the transform over</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Private Function TranslateTimeZero(ByRef Measured As ComplexMatrix, ByVal Fraction As Double) As ComplexMatrix

            Dim Translated As New ComplexMatrix(Measured.NRows)
            For k = 1 To Measured.NRows
                Translated(k) = Measured(k) * Exp(toComplex(0.0, 2.0 * Math.PI * Fraction * (CDbl(k)))) '/ CDbl(Measured.NRows)
            Next k

            Return Translated

        End Function

        ''' <summary>
        ''' Adjust the phase with a weighted least-squares algorithm
        ''' </summary>
        ''' <param name="Measured">The Measured baseband signal</param>
        ''' <param name="Ideal">The ideal baseband signal</param>
        ''' <param name="Residual">The residual of the phase fit</param>
        ''' <returns>Signal with a time and theta adjustment.</returns>
        ''' <remarks>Can also call this several times with different initial temporal rotations to make this robust.</remarks>
        Private Function PhaseAdjust(ByRef Measured As ComplexMatrix, ByRef Ideal As ComplexMatrix, ByRef Residual As Double) As ComplexMatrix

            'Offset mag data
            Dim xph As New RealMatrix(Measured.NRows), xpha As New RealMatrix(Measured.NRows), xphb As New RealMatrix(Measured.NRows), xmag As New RealMatrix(Measured.NRows), MeasuredAdjusted As New ComplexMatrix(Measured.NRows)

            'Save initial phase before time shift for plotting later
            For k As Integer = 1 To Measured.NRows
                xphb(k) = Arg(Measured(k) * Complex_Number_Class.Conj(Ideal(k)))        'Initial phase(Meas/Ideal)
            Next k
            xphb = UnWrapSpecial(xphb, xmag) 'Initial phase after unwrapping for plotting

            If myPullDownSelection2 = 2 Then    'Robust temporal=convolution guess approach

                'Get the maximum of |Meas Ideal*|(t) so that we can estimate the time at which the phase will be nearly perfectly unwrapped.
                Dim MaxMag As Double = 0.0, MaxMagIndex As Integer = -1, xcmplx(Measured.NRows - 1) As alglib.complex
                Dim Convolution As New RealMatrix(Measured.NRows), Times As New RealMatrix(Measured.NRows)
                For k As Integer = 1 To Measured.NRows
                    Dim ThisComplex As Complex = Measured(k) * Complex_Number_Class.Conj(Ideal(k))   '[Meas Ideal*](f)
                    xcmplx(k - 1) = New alglib.complex(ThisComplex.Re, ThisComplex.Im)
                Next k

                'Transform frequency-domain convolution to time
                Call XAlglib.fftc1dinv(xcmplx)

                'Look for the maximum value
                For k As Integer = 1 To Measured.NRows
                    Dim MagComplex As Double = Abs(toComplex(xcmplx(k - 1).x, xcmplx(k - 1).y))  '|Meas Ideal*|(t)
                    Convolution(k) = MagComplex 'Keep the convolution for plotting.
                    Times(k) = CDbl(k)
                    If MaxMag < MagComplex Then
                        MaxMag = MagComplex : MaxMagIndex = k
                    End If
                Next k

                'Calculate the expected phase shift per frequency step from the offset in time.
                'Use exp(sqrt(-1) 2 pi j k / N) as phase shift in FFT to figure this out. This gives DeltaPhase = 2 pi k / N.
                Dim N As Integer = Measured.NRows
                Dim DeltaPhase As Double = -2.0 * Math.PI * CDbl(MaxMagIndex - 1) / CDbl(N)

                'Translate frequency-comain version of measured data to a place close to the ideal time using the offset determined from the convolution
                For k As Integer = 1 To Measured.NRows
                    Dim Phs As Double = -(DeltaPhase * CDbl(k) + 0.0) 'Offset (0.0) and unslope phase
                    Measured(k) = Measured(k) * toComplex(Math.Cos(Phs), Math.Sin(Phs))
                Next k

                If First Then   'Plot up some comparisons

                    'Get the maximum of |Meas Ideal*|(t) after the time shift.
                    Dim MaxMag2 As Double = 0.0, MaxMagIndex2 As Integer = -1, xcmplx2(Measured.NRows - 1) As alglib.complex
                    Dim Convolution2 As New RealMatrix(Measured.NRows)
                    For k As Integer = 1 To Measured.NRows
                        Dim ThisComplex As Complex = Measured(k) * Complex_Number_Class.Conj(Ideal(k))   '[Meas Ideal*](f)
                        xcmplx2(k - 1) = New alglib.complex(ThisComplex.Re, ThisComplex.Im)
                    Next k

                    'Transform frequency-domain convolution to time
                    Call XAlglib.fftc1dinv(xcmplx2)

                    'Look for the maximum value
                    For k As Integer = 1 To Measured.NRows
                        Dim MagComplex As Double = Abs(toComplex(xcmplx2(k - 1).x, xcmplx2(k - 1).y))  '|Meas Ideal*|(t)
                        Convolution2(k) = MagComplex 'Keep the convolution for plotting.
                        Times(k) = CDbl(k)
                        If MaxMag2 < MagComplex Then
                            MaxMag2 = MagComplex : MaxMagIndex2 = k
                        End If
                    Next k

                    Dim PlotConvolution As New Plot("Time index", "|Meas Ideal*|", "Baseband convolution - DeltaPhase = " + DeltaPhase.ToString)
                    PlotConvolution.AddCurve(Times, Convolution, "Before temporal translation")
                    PlotConvolution.AddCurve(Times, Convolution2, "After temporal translation")
                    PlotConvolution.Show()

                End If

            End If

            'Now calculate phase of Meas/Ideal. Then we will unwrap it, and fit it to y=mx+b
            For k As Integer = 1 To Measured.NRows
                xmag(k) = Abs(Ideal(k))                                                 '|Ideal|
                xpha(k) = Arg(Measured(k) * Complex_Number_Class.Conj(Ideal(k)))        'Phase(Meas/Ideal) after convolution shifts time reference
            Next k

            'unwrap phase Meas/Ideal
            'xph = UnWrap(xpha) unwraps the initial estimate xpha to give xph, which we can now try to fit with least squares.
            xph = UnWrapSpecial(xpha, xmag)

            'Least-Square curve-fit phase data 
TryAgain:   Dim len As Double = 0.0  'Was number of points in the fit. Now includes weight
            Dim sumx As Double = 0.0, sumy As Double = 0.0, sumxx As Double = 0.0, sumxy As Double = 0.0
            For k As Integer = 1 To Measured.NRows
                Dim Weight As Double = xmag(k)
                sumx = sumx + CDbl(k) * Weight
                sumy = sumy + xph(k) * Weight
                sumxx = sumxx + CDbl(k) * CDbl(k) * Weight
                sumxy = sumxy + CDbl(k) * xph(k) * Weight
                len = len + Weight
            Next k

            'Compute phase reference line y = m*x + b
            Dim m As Double = (len * sumxy - sumx * sumy) / (len * sumxx - sumx * sumx)
            Dim b As Double = (sumy - m * sumx) / len

            'Check to see that we really have done a good job unwrapping the phase
            Dim CouldDoBetter As Boolean = False, TimesTriedToDoBetter As Integer = 0
            For k As Integer = 1 To Measured.NRows
                If xmag(k) > 0.0 Then
                    Dim Phs As Double = m * CDbl(k) + b 'Offset and unslope phase
                    While xph(k) > Phs + Math.PI
                        xph(k) = xph(k) - 2.0 * Math.PI : CouldDoBetter = True
                    End While
                    While xph(k) < Phs - Math.PI
                        xph(k) = xph(k) + 2.0 * Math.PI : CouldDoBetter = True
                    End While
                End If
            Next k

            'See how well we have been doing, and try things over again.
            If TimesTriedToDoBetter > 10 Then
                MsgBox("Post_NIST_EVM Warning: Unable to unwrap phase!", MsgBoxStyle.Information, "NIST Standard EVM Algorithm")
            End If
            If CouldDoBetter And TimesTriedToDoBetter <= 10 Then TimesTriedToDoBetter += 1 : GoTo TryAgain

            'Everything looks good. Get everything back to ideal time and theta.
            For k As Integer = 1 To Measured.NRows
                Dim Phs As Double = -(m * CDbl(k) + b) '% offset and unslope phase
                MeasuredAdjusted(k) = Measured(k) * toComplex(Math.Cos(Phs), Math.Sin(Phs))
            Next k

            'Calculate the residuals
            Residual = 0.0
            For k As Integer = 1 To Measured.NRows
                Dim SingleResidual As Double = Arg(MeasuredAdjusted(k) * Complex_Number_Class.Conj(Ideal(k)))
                Residual += SingleResidual * SingleResidual
            Next
            Residual = Math.Sqrt(Residual)

            If First Then   'Plot some diagnostics

                Dim Plot1 As New Plot("Frequency index", "Magnitude or phase in radians", "Phase alignment (residual = " + Residual.ToString + ")")
                Dim xfreqP As New RealMatrix(Measured.NRows), xfitP As New RealMatrix(Measured.NRows), xresP As New RealMatrix(Measured.NRows)
                For k As Integer = 1 To Measured.NRows
                    xfreqP(k) = k - 1 - (Measured.NRows - 1) / 2
                    xfitP(k) = (m * CDbl(k) + b)
                    xresP(k) = Arg(MeasuredAdjusted(k) * Complex_Number_Class.Conj(Ideal(k)))
                Next
                Plot1.AddCurve(xfreqP, xphb, "Unwrapped phase of (Meas Ideal*)")
                Plot1.AddCurve(xfreqP, xpha, "Wrapped phase of (Meas Ideal*) after convolution adjusts time")
                Plot1.AddCurve(xfreqP, xph, "Unwrapped phase of (Meas Ideal*) after convolution and mx+b fit")
                Plot1.AddCurve(xfreqP, xfitP, "Fit mx+b to phase of (Meas Ideal*)")
                Plot1.AddCurve(xfreqP, xresP, "Residual phase difference")
                'Plot1.AddCurve(xfreqP, xmag, "Signal magnitude")
                Plot1.Show()

            End If

            Return MeasuredAdjusted

        End Function

        ''' <summary>
        ''' Unwraps phases.
        ''' </summary>
        ''' <param name="R">Phase(Meas/Ideal)</param>
        ''' <param name="Mag">|Ideal|</param>
        ''' <returns>The unwrapped phases.</returns>
        ''' <remarks></remarks>
        Public Function UnWrapSpecial(ByVal R As RealMatrix, ByVal Mag As RealMatrix) As RealMatrix

            Dim Target As Double, Target0 As Double, NumPI As Long
            If R.NRows = 1 Then Return R

            'Get the first point
            Dim kStart As Integer = 0
            For k As Integer = 1 To R.NRows
                Target0 = R(k)
                Target = R(k)
                kStart = k
                If Mag(k) > 0.0 Then GoTo FoundStart
            Next k

            'Now start building on the first point.
            'Target is our best guess for the next unwrapped phase.
            'Target0 is the phase of the first point
FoundStart: For k As Integer = kStart + 1 To R.NRows
                If Mag(k) > 0.0 Then
                    'Estimate the number of wraps
                    NumPI = CLng((R(k) - Target) / (2.0 * Math.PI))
                    R(k) = R(k) - NumPI * 2.0 * Math.PI
                    Target = R(k) + (R(k) - Target0) / CDbl(k + 1)  'The next target phase is based on the slope measured so far
                End If
            Next k

            Return R

        End Function

    End Class



    ''' <summary>
    ''' Post processor generates modulated signals
    ''' </summary>
    ''' <remarks>Inputs in the time domain. User must supply both ideal signal and ideal sampling times.</remarks>
    <Serializable()> Public Class Post_Modulated_Signal_Generator
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private First As Boolean = True

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Center frequency (.parameter)"
                myNameList(1) = "Number of time samples per wavelength (.parameter)"
                myNameList(2) = "Number of symbols (.parameter)"
                myNameList(3) = "Symbol sampling interval (.parameter)"
                myNameList(4) = "Filter delay (.parameter)"
                myNameList(5) = "Filter alpha (.parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(0) As String : FileExtensions(0) = ".parameter"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(5) As String
                PullDownList(0) = "BPSK"
                PullDownList(1) = "QPSK"
                PullDownList(2) = "16 QAM"
                PullDownList(3) = "64 QAM"
                PullDownList(4) = "256 QAM"
                PullDownList(5) = "1024 QAM"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "PRBS"
                PullDownList(1) = "Random sequence 1"
                PullDownList(2) = "Random sequence 2"
                PullDownList(3) = "Random sequence 3"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(7) As String
                PullDownList(0) = "No noise"
                PullDownList(1) = "Noise level: +10 dBc"
                PullDownList(2) = "Noise level: +0 dBc"
                PullDownList(3) = "Noise level: -10 dBc"
                PullDownList(4) = "Noise level: -20 dBc"
                PullDownList(5) = "Noise level: -30 dBc"
                PullDownList(6) = "Noise level: -40 dBc"
                PullDownList(7) = "Noise level: -50 dBc"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor generates ideal modulated signals."
                myDescription(2) = "Written by Dylan Williams. "
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".waveform"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Generate modulated signal"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Read in the parameters
            Dim Fc As Double = MechValues(0).MechanismValue(MechanismList1)                     'Center frequency in GHz
            Dim NSamplesPerWL As Double = MechValues(1).MechanismValue(MechanismList1)          'Number of time samples per wavelength
            Dim NSymbols As Double = MechValues(2).MechanismValue(MechanismList1)               'Number of symbols (.parameter)
            Dim Tsym As Double = MechValues(3).MechanismValue(MechanismList1)                   'Ideal sampling-time interval = "Filter Tsym (.parameter)"
            Dim delay As Double = MechValues(4).MechanismValue(MechanismList1)                  'myNameList(5) = "Filter delay (.parameter)"
            Dim alpha As Double = MechValues(5).MechanismValue(MechanismList1)                  'myNameList(6) = "Filter alpha (.parameter)"


            'Find time spacings.
            'deltaT and the input time grid are the oscilloscope sampling times. 
            'These should already be interpolated to the ideal grid.
            'Dim deltaT As Double = MechanismList1.FrequencyList(2) - MechanismList1.FrequencyList(1)    'Tims step in ns
            Dim DeltaT As Double = 1.0 / (Fc * CDbl(NSamplesPerWL)) ''Tims step in ns
            Dim Fs As Double = 1 / DeltaT   'The sampling frequency as determined from the sampling time.
            Dim kSampleSpacing As Integer = CInt(Tsym / DeltaT)    'Cint rounds to nearest integer.
            Dim Ntotal As Integer = NSymbols * CInt(Tsym / DeltaT)
            Dim Times As New RealMatrix(Ntotal), TimeSignal As RealMatrix, TimeWaveform As New RealMatrix(Ntotal, 3, ".waveform")
            For k As Integer = 1 To Ntotal
                Times(k) = CDbl(k - 1) * DeltaT
            Next k

            'Generate the signal
            TimeSignal = GenerateQAMTestSignal(Times, Fc, Tsym, NSymbols, kSampleSpacing, False, myPullDownSelection1, myPullDownSelection2 + 9, myPullDownSelection3, myPullDownSelection2)

            TimeWaveform.Vector(1) = Times
            TimeWaveform.Vector(2) = TimeSignal

            'That's all folks!
            Return ToArray(TimeWaveform)

        End Function

    End Class


    ''' <summary>
    ''' The square-root raised cosine filter
    ''' </summary>
    ''' <param name="Tsym"></param>
    ''' <param name="delay"></param>
    ''' <param name="alpha"></param>
    ''' <param name="deltaT"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function sqrtRaisedCosine(ByVal Tsym As Double, ByVal delay As Double, ByVal alpha As Double, ByVal deltaT As Double) As RealMatrix
        'function [hrrc t] = sqrtRaisedCosine(Tsym, delay, alpha, Fs)
        ' sqrtRaisedCosine generates the impulse response of a Square Root Raised
        ' Cosine.
        '
        ' [HRRC T] = sqrtRaisedCosine(TSYM, DELAY, ALPHA, FS)
        ' generates the time impulse response based on the symbol time TSYM, delay
        ' time of the filter DELAY, roll-off factor ALPHA, and sampling frequency
        ' FS. HRRC is the resulting impulse response and T the corresponding time
        ' vector.
        ' 
        ' NOTES:
        ' The delay of the filter should be sufficiently long, such that truncating
        ' effects will be small. Only then will the pulse shaping be effective to
        ' lessen the Inter Symbol Interference.
        '
        ' REFERENCES:
        '
        ' [1] M. Joost, "Theory of Root-Raised Cosine Filter," published online at
        ' www.michael-joost.de/rrcfilter.pdf

        '--------------------------------------------------------------------------
        ' CHANGELOG:
        ' Created Jun 19, 2014 -> R. R. Tanuhardja
        ' Modified by Dylan Williams
        '--------------------------------------------------------------------------

        ' Create the time vector of the filter
        't = -(delay*Tsym):1/Fs:(delay*Tsym);
        Dim Nhrrc_side As Integer = CInt(delay * Tsym / deltaT)
        Dim Nhrrc As Integer = 1 + 2 * Nhrrc_side
        Dim hrrc As New RealMatrix(Nhrrc)

        'Create the filter values
        Dim k As Integer = 0, sum As Double = 0.0
        ' For time As Double = -(delay * Tsym) To (delay * Tsym) Step 1 / Fs
        For kTime As Integer = -Nhrrc_side To Nhrrc_side
            Dim Time As Double = CDbl(kTime) * deltaT
            k += 1

            Select Case Time
                Case 0.0    ' Fill in the corresponding values at the singularities
                    hrrc(k) = ((1.0 - alpha) + 4.0 * alpha / Math.PI) / Math.Sqrt(Tsym)
                Case -Tsym / (4.0 * alpha)  ' Fill in the corresponding values at the singularities
                    hrrc(k) = (alpha / Math.Sqrt(2.0 * Tsym)) * ((1.0 + 2.0 / Math.PI) * Math.Sin(Math.PI / (4.0 * alpha)) + (1.0 - 2.0 / Math.PI) * Math.Cos(Math.PI / (4.0 * alpha)))
                Case Tsym / (4.0 * alpha)   ' Fill in the corresponding values at the singularities
                    hrrc(k) = (alpha / Math.Sqrt(2.0 * Tsym)) * ((1.0 + 2.0 / Math.PI) * Math.Sin(Math.PI / (4.0 * alpha)) + (1.0 - 2.0 / Math.PI) * Math.Cos(Math.PI / (4.0 * alpha)))
                Case Else
                    ' Create the impulse response with the parameters
                    hrrc(k) = (1 / Math.Sqrt(Tsym)) * (Math.Sin(Math.PI * (Time / Tsym) * (1 - alpha)) + 4.0 * alpha * (Time / Tsym) * Math.Cos(Math.PI * (Time / Tsym) * (1.0 + alpha))) / (Math.PI * (Time / Tsym) * (1.0 - (4.0 * alpha * Time / Tsym) ^ 2))
            End Select

            sum += hrrc(k) ^ 2

        Next kTime


        ' Normalisation, such that the amplitude after twice convolving with the
        ' Square Root Raised Cosine filter will be one
        hrrc = (1.0 / (Math.Sqrt(sum) * Math.Sqrt(Tsym / deltaT))) * hrrc

        'HRRC = fft(hrrc);
        'HRRCn = HRRC/(sqrt(Fs*Tsym));
        'hrrc = ifft(HRRCn);

        Return hrrc

    End Function

    ''' <summary>
    ''' Generate random symbols
    ''' </summary>
    ''' <param name="Symbols1">The I valuse</param>
    ''' <param name="Symbols2">The Q values</param>
    ''' <param name="NSymbols">The number of symbols</param>
    ''' <param name="ConstellationType">The Constellation type</param>
    ''' <param name="Seed">The integer seed for choosing the symbols</param>
    ''' <remarks></remarks>
    Private Sub GenerateSymbols(ByRef Symbols1 As RealMatrix, ByRef Symbols2 As RealMatrix, ByVal NSymbols As Integer, Optional ConstellationType As Integer = 2, Optional ByVal Seed As Integer = 10)

        'Set up the number of constellation points
        Dim Symbols1a As New RealMatrix(NSymbols), Symbols2a As New RealMatrix(NSymbols), Rnd As New System.Random(Seed), NConst As Integer = 0
        Select Case ConstellationType
            Case -1, 0  'BPSK
                NConst = 1
            Case 1      'QPSK (4-QAM)
                NConst = 1
            Case 2      '16-QAM
                NConst = 2
            Case 3      '64-QAM
                NConst = 4
            Case 4      '256-QAM
                NConst = 8
            Case 5      '1024-QAM
                NConst = 16
        End Select

        'Generate the symbols to be transmitted.
        For k As Integer = 1 To NSymbols
            Symbols1a(k) = Rnd.Next(-NConst, NConst) + 0.5
            If ConstellationType > 0 Then Symbols2a(k) = Rnd.Next(-NConst, NConst) + 0.5
        Next k

        Symbols1 = Symbols1a : Symbols2 = Symbols2a

    End Sub


    Private Sub GenerateSymbolsFromPRBSBitStream(ByRef Symbols1 As RealMatrix, ByRef Symbols2 As RealMatrix, ByVal NSymbols As Integer, ByVal ConstellationType As Integer)

        'Set up the number of constellation points
        Dim Symbols1a As New RealMatrix(NSymbols), Symbols2a As New RealMatrix(NSymbols), NConst As Integer = 0, NConstBits As Integer = 0, LenPRBS As Integer = 0
        Select Case ConstellationType
            Case -1, 0  'BPSK
                NConst = 1
                NConstBits = 1
                LenPRBS = NSymbols
            Case 1      'QPSK (4-QAM)
                NConst = 1
                NConstBits = 1
                LenPRBS = 2 * NSymbols
            Case 2      '16-QAM
                NConst = 2
                NConstBits = 2
                LenPRBS = 16 * NSymbols
            Case 3      '64-QAM
                NConst = 4
                NConstBits = 3
                LenPRBS = 64 * NSymbols
            Case 4      '256-QAM
                NConst = 8
                NConstBits = 4
                LenPRBS = 256 * NSymbols
            Case 5      '1024-QAM
                NConst = 16
                NConstBits = 5
                LenPRBS = 1024 * NSymbols
        End Select

        'Generate the PRBS bit stream
        Dim NPRBS As Integer = 3    'Figure out how many bits you need.
        While LenPRBS > 2 ^ NPRBS - 1
            NPRBS += 1
        End While
        Dim BitStream() As Boolean = PRBS(NPRBS)    'Generate the PRBS bit stream

        'Generate the symbols to be transmitted.
        Dim pointer As Integer = 0
        For k As Integer = 1 To NSymbols

            'Find the in-phase part of the symbol from the first NConst bits
            Dim IValue As Integer = 0
            For kk As Integer = 0 To NConstBits - 1
                IValue = 2 * IValue
                If BitStream(pointer + kk) Then IValue += 1
            Next kk
            'Record the symbols
            pointer += NConstBits
            Symbols1a(k) = CDbl(IValue - NConst) + 0.5

            'Find the quadrature part of the symbol from the next NConst bits
            If ConstellationType > 0 Then
                Dim QValue As Integer = 0
                For kk As Integer = 0 To NConstBits - 1
                    QValue = 2 * QValue
                    If BitStream(pointer + kk) Then QValue += 1
                Next kk
                'Record the symbols
                pointer += NConstBits
                Symbols2a(k) = CDbl(QValue - NConst) + 0.5
            End If

        Next k

        Symbols1 = Symbols1a : Symbols2 = Symbols2a

    End Sub

    ''' <summary>
    ''' Generate a QAM test signal
    ''' </summary>
    ''' <param name="Times">The time vector to use with times in ns</param>
    ''' <param name="Fc">The center frequency in GHz</param>
    ''' <param name="Tsym">The time between symbols in ns</param>
    ''' <param name="NSymbols">The number of symbols</param>
    ''' <param name="kStep">The number of sample times for each symbol</param>
    ''' <param name="Measured">This adds some noise</param>
    ''' <param name="ConstellationType">From a pull-down menu</param>
    ''' <param name="Seed">The seed for the constellation</param>
    ''' <param name="NoiseType">The pull-down menu for the noise floor</param>
    ''' <param name="SymbolRandomizationType">The pull-down menu selection for the symbol randomization.
    ''' When this is >=3, it is a PRBS type.</param>
    ''' <returns>The signal in the timegrid Times</returns>
    ''' <remarks></remarks>
    Private Function GenerateQAMTestSignal(ByRef Times As RealMatrix, ByVal Fc As Double, ByVal Tsym As Double, ByVal NSymbols As Double, ByVal kStep As Integer, ByVal Measured As Boolean, Optional ByVal ConstellationType As Integer = 2, Optional ByVal Seed As Integer = 10, Optional ByVal NoiseType As Integer = 0, Optional ByVal SymbolRandomizationType As Integer = 0) As RealMatrix

        Dim xtest() As Boolean = PRBS(4)

        ''Generate the signals to be transmitted.
        'Dim Symbols1 As New RealMatrix(NSymbols), Symbols2 As New RealMatrix(NSymbols), Rnd As New System.Random(10)
        'For k As Integer = 1 To NSymbols
        '    Symbols1(k) = Rnd.Next(-2, 2) + 0.5
        '    Symbols2(k) = Rnd.Next(-2, 2) + 0.5
        'Next k
        Dim Symbols1 As New RealMatrix(1), Symbols2 As New RealMatrix(1)
        'Pick the symbols randomly. If SymbolRandomizationType=0, use a PRBS.
        Select Case SymbolRandomizationType
            Case -1, 0  'PRBS
                Call GenerateSymbolsFromPRBSBitStream(Symbols1, Symbols2, NSymbols, ConstellationType)
            Case Else   'Random
                Call GenerateSymbols(Symbols1, Symbols2, NSymbols, ConstellationType, SymbolRandomizationType + 9)
        End Select

        'Generate the filter for the symbols
        Dim hrrc As RealMatrix = sqrtRaisedCosine(Tsym, 21.0, 0.35, Times(2) - Times(1))

        'Perform the sum
        Dim S As New RealMatrix(Times.NRows), ns As Integer = (hrrc.NRows - 1) / 2, theta As Double = 0.0
        If Measured Then theta = 0.68
        For k As Integer = 1 To NSymbols    'Step through the symbols
            For kk As Integer = -ns To ns   'Step through the filter
                Dim kTime As Integer = 1 + kk + (k - 1) * kStep 'Where we insert this point
                While kTime > Times.NRows
                    kTime += -Times.NRows
                End While
                While kTime < 1
                    kTime += Times.NRows
                End While
                S(kTime) = S(kTime) + CDbl(Symbols1(k)) * hrrc(kk + ns + 1) * Math.Cos(2.0 * Math.PI * Fc * Times(kTime) + theta)
                S(kTime) = S(kTime) - CDbl(Symbols2(k)) * hrrc(kk + ns + 1) * Math.Sin(2.0 * Math.PI * Fc * Times(kTime) + theta)
            Next kk
        Next k

        'Add noise to the signal.
        If Measured Or NoiseType > 0 Then
            Dim Rnd As New System.Random(SymbolRandomizationType + 20), Avg As Double = 0.0
            For k As Integer = 1 To Times.NRows
                Avg += S(k) * S(k)
            Next k
            Avg = Avg / CDbl(Times.NRows)
            Dim NoiseLevel As Double = 0.0
            Select Case NoiseType
                Case -1, 0   'No noise
                Case 1  '10 dBc
                    NoiseLevel = Math.Sqrt(10.0 * Avg)
                Case 2  '0 dBc
                    NoiseLevel = Math.Sqrt(Avg)
                Case 3  '-10 dBc
                    NoiseLevel = Math.Sqrt(0.1 * Avg)
                Case 4  '-20 dBc
                    NoiseLevel = Math.Sqrt(0.01 * Avg)
                Case 5  '-30 dBc
                    NoiseLevel = Math.Sqrt(0.001 * Avg)
                Case 6  '-40 dBc
                    NoiseLevel = Math.Sqrt(0.0001 * Avg)
                Case 7  '-50 dBc
                    NoiseLevel = Math.Sqrt(0.00001 * Avg)
            End Select
            For k As Integer = 1 To Times.NRows
                S(k) = S(k) + NoiseLevel * (Rnd.NextDouble - 0.5)
            Next k
        End If

        ''Plot the results
        'Dim Title As String = "Ideal test signal"
        'If Measured Then Title = "Measured test signal"
        'Dim Plot1 As New Plot("Time (ns)", "Signal", Title)
        'Plot1.AddCurve(Times, S, "Signal")
        'Dim Times1 As New RealMatrix(hrrc.NRows)
        'For kk As Integer = -ns To ns
        '    Times1(kk + ns + 1) = CDbl(kk) * (Times(2) - Times(1))
        'Next
        'Plot1.AddCurve(Times1, hrrc, "Filter")
        'Plot1.Show()

        Return S

    End Function

    Private Function PRBS(ByVal N As Integer) As Boolean()

        'pointers circulate through the shift register, SR is the shift register
        Dim pointerXOR1 As Integer = N - 2, pointerXOR2 As Integer = N - 1, SR(N - 1) As Boolean
        Dim NOutput As Integer = 2 ^ N - 1
        Dim Output(NOutput - 1) As Boolean

        'Fill up the shift register with ones to start. Any sequence is valid except all 0's.
        For k As Integer = 0 To N - 1
            SR(k) = True
        Next k

        'Create the  output bit stream, one bit at a time.
        For k As Integer = 0 To NOutput - 1

            'Update the output from the pointer value pointerInsert
            Output(k) = SR(pointerXOR2)

            'Perform the XOR of the last two bits at pointerXOR1 and pointerXOR2 and stuff into the shift register.
            SR(pointerXOR2) = SR(pointerXOR1) Xor SR(pointerXOR2)

            'Update the pointers in the shift register
            pointerXOR1 += -1 : If pointerXOR1 < 0 Then pointerXOR1 = N - 1
            pointerXOR2 += -1 : If pointerXOR2 < 0 Then pointerXOR2 = N - 1

        Next k

        Return Output

    End Function


    ''' <summary>
    ''' Post processor for direct power-meter comparison with PNA.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_PowerDirectComparison
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Reading from power meter under test (.w1p, .power)"         'Wave-amplitude corresponding to readings from power meter under test (.w1p).
                myNameList(1) = "Wave file measured during power-meter test (.w1p)"      'Wave-amplitudes measured when power meter was being tested (calibrated, .w1p).
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".w1p" : FileExtensions(2) = ".w2p" : FileExtensions(3) = ".power"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(8) As String
                myDescription(0) = "This post processor determines the efficiency of a power meter with a power-calibrated PNA. The efficiency is output as a .complex file."
                myDescription(2) = "Efficiency definitions from second paragraph of section 2.1 (on page 3) of NIST Technote 1397 Direct Comparison Transfer of Microwave Power Sensor Calibrations by M.P. Weidman"
                myDescription(4) = "Calibration factor definitions from Eq 2-12 on page 19 of Application Note 1449-1 'Fundamentals of RF and Microwave Power Measurements (Part 1)'"
                myDescription(6) = "The default frequency list is determined from the wave file measured by the PNA during power-meter test."
                myDescription(8) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".complex"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Determine the efficiency of a power meter with a power-calibrated PNA"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNamesShort(4) As String
                myFileNamesShort(0) = "\Efficiency"
                myFileNamesShort(1) = "\CalFactor"
                myFileNamesShort(2) = "\Gamma"
                myFileNamesShort(3) = "\CascadableGamma"
                myFileNamesShort(4) = "\Eff_CF_Gamma"
                Return myFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)  'Wave-amplitude corresponding to readings from power meter under test (.w1p).
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)  'Wave-amplitudes measured when power meter was being tested (calibrated, .w1p).
            Dim myOutputMatrix(4) As Object
            myOutputMatrix(0) = New RealMatrix(myRealMatrix0.NRows, 3, ".complex")                      'Efficiency of the power meter under test (.complex)
            myOutputMatrix(1) = New RealMatrix(myRealMatrix0.NRows, 3, ".complex")                      'Calibration factor of the power meter under test (.complex)
            myOutputMatrix(2) = New RealMatrix(myRealMatrix0.NRows, 3, ".s1p")                          'Reflection coefficient of the power meter under test (.s1p)
            myOutputMatrix(3) = New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")                          'Cascadable reflection coefficient of the power meter under test (.s2p)
            myOutputMatrix(3).InitializeAsSParams()
            myOutputMatrix(4) = New RealMatrix(myRealMatrix0.NRows, 7, ".complex")                      'Efficiency, calibration factor, reflection coefficient of the power meter under test (.complex)

            'Outputs have the same frequencies as the inputs
            myOutputMatrix(0).Vector(1) = myRealMatrix0.Vector(1)
            myOutputMatrix(1).Vector(1) = myRealMatrix0.Vector(1)
            myOutputMatrix(2).Vector(1) = myRealMatrix0.Vector(1)
            myOutputMatrix(3).Vector(1) = myRealMatrix0.Vector(1)
            myOutputMatrix(4).Vector(1) = myRealMatrix0.Vector(1)

            'Calculate the efficiency, calibration factor and reflection coefficient of the power meter under test
            'Efficiency definitions from second paragraph of section 2.1 (on page 3) of NIST Technote 1397 Direct Comparison Transfer of Microwave Power Sensor Calibrations by M.P. Weidman
            'Calibration factor definitions from Eq 2-12 on page 19 of Application Note 1449-1 "Fundamentals of RF and Microwave Power Measurements (Part 1)" 
            For k As Integer = 1 To myRealMatrix0.NRows

                'Efficiency
                Dim P_M As Double = myRealMatrix0(k, 2) * myRealMatrix0(k, 2) + myRealMatrix0(k, 3) * myRealMatrix0(k, 3)   'The power-meter reading. This is the square of the a1 wave amplitude in the .w1p file
                If myRealMatrix0.DataType = ".power" Then P_M = myRealMatrix0(k, 2) / 10.0 '|a| = sqrt(P_mW/10)
                Dim P_RF As Double = myRealMatrix1(k, 2) * myRealMatrix1(k, 2) + myRealMatrix1(k, 3) * myRealMatrix1(k, 3)  'The RF power in a1. This is the square of the a1 wave amplitude in the .w1p file
                P_RF = P_RF - myRealMatrix1(k, 4) * myRealMatrix1(k, 4) + myRealMatrix1(k, 5) * myRealMatrix1(k, 5)         'Subtract the RF power in b1 to get the net power into the meter.
                Dim Nu As Double = 1.0
                If P_RF <> 0.0 Then
                    Nu = P_M / P_RF 'This is the efficiency of the power meter
                Else    'Flag no incident power on the power meter
                    MechanismList1.ErrorReport = "Power input was zero at " + myRealMatrix0(k, 1).ToString + " GHz."
                    MechanismList1.FatalError = True
                End If
                myOutputMatrix(0)(k, 2) = Nu
                myOutputMatrix(4)(k, 2) = Nu

                'Reflection coefficient
                Dim Gamma As New Complex(myRealMatrix1(k, 4), myRealMatrix1(k, 5))      'b1
                If P_RF <> 0.0 Then
                    Gamma = Gamma / toComplex(myRealMatrix1(k, 2), myRealMatrix1(k, 3)) 'b1/a1
                End If
                myOutputMatrix(2)(k, 2) = Gamma.Re : myOutputMatrix(2)(k, 3) = Gamma.Im
                myOutputMatrix(3)(k, 2) = Gamma.Re : myOutputMatrix(3)(k, 3) = Gamma.Im
                myOutputMatrix(4)(k, 6) = Gamma.Re : myOutputMatrix(4)(k, 7) = Gamma.Im

                'Calibration Factor
                Dim CF As Double = Nu * (1.0 - Abs(Gamma) * Abs(Gamma))
                myOutputMatrix(1)(k, 2) = CF
                myOutputMatrix(4)(k, 4) = CF

            Next k

            'That's all folks!
            Return myOutputMatrix

        End Function

    End Class

    ''' <summary>
    ''' Post processor for adding power-meter errors.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_PowerMeterErrors_old
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(12) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Power-meter reflection coefficient (.s1p, .s2p)"                       'Selected with pull-down list 1.
                myNameList(1) = "Wave amplitude measured by power meter (.w1p, .w2p)"                   'Wave-amplitudes measured when power meter was being used
                myNameList(2) = "Wave amplitude corresponding to power-meter full scale (.parameter)"   'Units should match those in measurement above
                myNameList(3) = "Wave amplitude corresponding to low-range full scale (.parameter)"     'Units should match those in measurement above
                myNameList(4) = "Wave amplitude corresponding to 3-dB compression point (.parameter)"   'Units should match those in measurement above
                myNameList(5) = "Percentage of compression corrected by meter (+/-0.2%, .parameter)"    'A percentage of the signal level
                myNameList(6) = "Reference oscillator mismatch (+/-0.2%, .parameter)"                   'A percentage of the signal level
                myNameList(7) = "Reference oscillator power uncertainty (+/-0.6%, .parameter)"          'A percentage of the signal level
                myNameList(8) = "Instrumentation errors, proportion of full scale (+/-0.5%, .parameter)"    'A percentage of the full scale used in the measurement
                myNameList(9) = "Zero-set error, proportion of low-range full scale (+/-0.5%, .parameter)"  'A percentage of the low-range full scale
                myNameList(10) = "Zero carry over, proportion of full scale (+/-0.2%, .parameter)"          'A percentage of the low-range full scale
                myNameList(11) = "Unaccounted-for reference-oscillator calibration factor  (1, .parameter)"             'Usually 1
                myNameList(12) = "Unaccounted-for calibration-factor or efficiency errors (1 +/-0.015, .parameter)"     'In case you have a cal factor with no errors


                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(9) As String
                FileExtensions(0) = ".meas" : FileExtensions(1) = ".w1p" : FileExtensions(2) = ".w2p" : FileExtensions(3) = ".complex"
                FileExtensions(4) = ".parameter" : FileExtensions(5) = ".sumofparameters" : FileExtensions(6) = ".s1p" : FileExtensions(7) = ".s2p"
                FileExtensions(8) = ".model" : FileExtensions(9) = ".cascade"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Do not include power-meter match"
                PullDownList(1) = "Include power-meter match in S11"
                PullDownList(2) = "Include power-meter match in S22"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(0) As String
                PullDownList(0) = "Reserved for future linearity models"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor assembles a power-meter reflection coefficient and adds power-meter instrument errors to an .s2p file. The instrumentation errors are reflected in the transmission terms of the result, which is intended for use in the calibration section of the VNA Uncertainty calculator."
                myDescription(2) = "Errors follow those in Agilent Application Note 1449-1 Part 3. Approximate values from this publication are included in parentheses."
                myDescription(4) = "The default frequency list is determined from the wave file measured by the power meter."
                myDescription(6) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Create file with power meter reflection coefficient and errors"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)  'Power-meter reflection coefficient (.s1p, .s2p)
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)  'Wave amplitude measured by power meter (.w1p, .w2p)
            Dim myOutputMatrix As New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")                        'Cascadable reflection coefficient with errors of the power meter (.s2p)
            myOutputMatrix.InitializeAsSParams()
            myOutputMatrix.Vector(1) = myRealMatrix0.Vector(1)                                          'Outputs have the same frequencies as the inputs
            'Put in the reflection coefficient
            Select Case myPullDownSelection1
                Case -1, 0  'Do not include power-meter match
                Case 1      'Include power-meter match in S11
                    myOutputMatrix.Vector(2) = myRealMatrix0.Vector(2)
                    myOutputMatrix.Vector(3) = myRealMatrix0.Vector(3)
                Case 2      'Include power-meter match in S22
                    If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "Number of columns in power-meter reflection coefficient should be zero." : MechanismList1.FatalError = True : Return ToArray(myOutputMatrix)
                    myOutputMatrix.Vector(2) = myRealMatrix0.Vector(8)
                    myOutputMatrix.Vector(3) = myRealMatrix0.Vector(9)
            End Select

            Dim PMFS As Double = MechValues(2).MechanismValue(MechanismList1)    '(2) = "Wave amplitude corresponding to power-meter full scale (.parameter)"   'Units should match those in measurement above
            Dim PMLS As Double = MechValues(3).MechanismValue(MechanismList1)    '(3) = "Wave amplitude corresponding to low-range full scale (.parameter)"     'Units should match those in measurement above
            Dim CPdB As Double = MechValues(4).MechanismValue(MechanismList1)    '(4) = "Wave amplitude corresponding to 3-dB compression point (.parameter)"   'Units should match those in measurement above
            Dim CPPE As Double = MechValues(5).MechanismValue(MechanismList1)    '(5) = "Percentage of compression corrected by meter (+/-0.2%, .parameter)"    'A percentage of the signal level
            Dim ROMM As Double = MechValues(6).MechanismValue(MechanismList1)    '(6) = "Reference oscillator mismatch (+/-0.2%, .parameter)"                   'A percentage of the signal level
            Dim ROPU As Double = MechValues(7).MechanismValue(MechanismList1)    '(7) = "Reference oscillator power uncertainty (+/-0.6%, .parameter)"          'A percentage of the signal level
            Dim InsE As Double = MechValues(8).MechanismValue(MechanismList1)    '(8) = "Instrumentation errors, proportion of full scale (+/-0.5%, .parameter)"    'A percentage of the full scale used in the measurement
            Dim ZSEr As Double = MechValues(9).MechanismValue(MechanismList1)    '(9) = "Zero-set error, proportion of low-range full scale (+/-0.5%, .parameter)"  'A percentage of the low-range full scale
            Dim ZCOE As Double = MechValues(10).MechanismValue(MechanismList1)   '(10) = "Zero carry over, proportion of full scale (+/-0.2%, .parameter)"       'A percentage of the low-range full scale
            Dim ROCF As Double = MechValues(11).MechanismValue(MechanismList1)   'Unaccounted-for reference-oscillator calibration factor  (1, .parameter)"             'Usually 1
            Dim CFEr As Double = MechValues(12).MechanismValue(MechanismList1)   'Unaccounted-for calibration-factor or efficiency errors (1 +/-0.015, .parameter)"     'In case you have a cal factor with no errors
            'Calculate corresponding power levels
            Dim PMFS_power As Double = PMFS * PMFS, PMLS_power As Double = PMLS * PMLS, CPdB_power As Double = CPdB * CPdB

            'Add in the errors 
            For k As Integer = 1 To myRealMatrix0.NRows

                Dim PMPower As Double = myRealMatrix1(k, 2) * myRealMatrix1(k, 2) + myRealMatrix1(k, 3) * myRealMatrix1(k, 3)
                Dim PMPower_init As Double = PMPower    'Remember this for later.
                Dim PMError As Double = 0.0       'This is the total error relative to 1. Now add in all the terms below.

                '(5) = "Percentage of compression corrected by meter (+/-0.2%, .parameter)"    'A percentage of the signal level
                'Dim A_ratio As Double = Math.Sqrt(Math.Abs(PMPower / CPdB_power))   'Amplitude relative to 3-dB compression point
                'Dim A_compression As Double = Math.Sqrt(2.0) * Math.Exp(A_ratio)
                'Dim P_compression As Double = CPPE * A_compression * A_compression
                'PMPower = PMPower * (1.0 + P_compression)
                If CPPE <> 0.0 Then MechanismList1.ErrorReport = "Warning: Linearity models not yet implemented. No uncertainty due to linearity added."

                '(6) = "Reference oscillator mismatch (+/-0.2%, .parameter)"                   'A percentage of the signal level
                PMPower = PMPower * (1.0 + ROMM)

                '(7) = "Reference oscillator power uncertainty (+/-0.6%, .parameter)"          'A percentage of the signal level
                PMPower = PMPower * (1.0 + ROPU)

                '(8) = "Instrumentation errors, proportion of full scale (+/-0.5%, .parameter)"    'A percentage of the full scale used in the measurement
                PMPower = PMPower + InsE * PMFS_power

                '(9) = "Zero-set error, proportion of low-range full scale (+/-0.5%, .parameter)"  'A percentage of the low-range full scale
                PMPower = PMPower + ZSEr * PMLS_power

                '(10) = "Zero carry over, proportion of full scale (+/-0.2%, .parameter)"       'A percentage of the low-range full scale
                PMPower = PMPower + ZCOE * PMFS_power

                'Unaccounted-for reference-oscillator calibration factor  (1, .parameter)"             'Usually 1
                PMPower = PMPower / ROCF

                'Unaccounted-for calibration-factor or efficiency errors (1 +/-0.015, .parameter)"     'In case you have a cal factor with no errors
                PMPower = PMPower * CFEr

                myOutputMatrix(k, 4) = Math.Sqrt(Math.Abs(PMPower / PMPower_init))  'The ratio we need to multiply by to get the power out with the errors

            Next k

            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for adding power-meter errors.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_PowerMeterErrors
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(13) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Power-meter reflection coefficient (.s1p, .s2p)"                       'Selected with pull-down list 1.
                myNameList(1) = "Wave amplitude or power measured by power meter (.w1p, .w2p, .power)"                   'Wave-amplitudes measured when power meter was being used
                myNameList(2) = "Power at power-meter full scale (mW, .parameter)"   'Units should match those in measurement above
                myNameList(3) = "Power at low-range full scale (mW, .parameter)"     'Units should match those in measurement above
                myNameList(4) = "Power at 3-dB compression point (mW, .parameter)"   'Units should match those in measurement above
                myNameList(5) = "Percentage of compression corrected by meter (+/-0.2%, .parameter)"    'A percentage of the signal level
                myNameList(6) = "Reference oscillator mismatch (+/-0.2%, .parameter)"                   'A percentage of the signal level
                myNameList(7) = "Reference oscillator power uncertainty (+/-0.6%, .parameter)"          'A percentage of the signal level
                myNameList(8) = "Instrumentation errors, proportion of full scale (+/-0.5%, .parameter)"    'A percentage of the full scale used in the measurement
                myNameList(9) = "Zero-set error, proportion of low-range full scale (+/-0.5%, .parameter)"  'A percentage of the low-range full scale
                myNameList(10) = "Zero carry over, proportion of full scale (+/-0.2%, .parameter)"          'A percentage of the low-range full scale
                myNameList(11) = "Unaccounted-for reference-oscillator calibration factor  (1, .parameter)"             'Usually 1
                myNameList(12) = "Unaccounted-for calibration-factor or efficiency errors (1 +/-0.015, .parameter)"     'In case you have a cal factor with no errors
                myNameList(13) = "Power-meter efficency (.complex)"         'Efficency of the power meter

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(10) As String
                FileExtensions(0) = ".meas" : FileExtensions(1) = ".w1p" : FileExtensions(2) = ".w2p" : FileExtensions(3) = ".complex"
                FileExtensions(4) = ".parameter" : FileExtensions(5) = ".sumofparameters" : FileExtensions(6) = ".s1p" : FileExtensions(7) = ".s2p"
                FileExtensions(8) = ".model" : FileExtensions(9) = ".cascade" : FileExtensions(10) = ".power"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Do not include power-meter match"
                PullDownList(1) = "Include power-meter match in S11"
                PullDownList(2) = "Include power-meter match in S22"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(0) As String
                PullDownList(0) = "Reserved for future linearity models"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor assembles a power-meter reflection coefficient and adds power-meter instrument errors to an .s2p file. The instrumentation errors are reflected in the transmission terms of the result, which is intended for use in the calibration section of the VNA Uncertainty calculator."
                myDescription(2) = "Errors follow those in Agilent Application Note 1449-1 Part 3. Approximate values from this publication are included in parentheses."
                myDescription(4) = "The default frequency list is determined from the wave file measured by the power meter."
                myDescription(6) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Create file with power meter reflection coefficient and errors"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)  'Power-meter reflection coefficient (.s1p, .s2p)
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)  'Wave amplitude measured by power meter (.w1p, .w2p, .power)
            If myRealMatrix1.DataType <> ".power" Then  'Lets use P(mW) everywhere!
                For k As Integer = 1 To myRealMatrix1.NRows
                    myRealMatrix1(k, 2) = 10.0 * (myRealMatrix1(k, 2) * myRealMatrix1(k, 2) + myRealMatrix1(k, 3) * myRealMatrix1(k, 3))
                    myRealMatrix1(k, 3) = 0.0
                Next k
            End If

            Dim myOutputMatrix As New RealMatrix(myRealMatrix0.NRows, 9, ".s2p")                        'Cascadable reflection coefficient with errors of the power meter (.s2p)
            myOutputMatrix.InitializeAsSParams()
            myOutputMatrix.Vector(1) = myRealMatrix0.Vector(1)                                          'Outputs have the same frequencies as the inputs

            'Put in the reflection coefficient
            Select Case myPullDownSelection1
                Case -1, 0  'Do not include power-meter match
                Case 1      'Include power-meter match in S11
                    myOutputMatrix.Vector(2) = myRealMatrix0.Vector(2)
                    myOutputMatrix.Vector(3) = myRealMatrix0.Vector(3)
                Case 2      'Include power-meter match in S22
                    If myRealMatrix0.NCols <> 9 Then MechanismList1.ErrorReport = "Number of columns in power-meter reflection coefficient should be zero." : MechanismList1.FatalError = True : Return ToArray(myOutputMatrix)
                    myOutputMatrix.Vector(2) = myRealMatrix0.Vector(8)
                    myOutputMatrix.Vector(3) = myRealMatrix0.Vector(9)
            End Select

            'Other inputs
            Dim PMFS As Double = MechValues(2).MechanismValue(MechanismList1)    '(2) = "Power in mW corresponding to power-meter full scale (.parameter)"   'Units should match those in measurement above
            Dim PMLS As Double = MechValues(3).MechanismValue(MechanismList1)    '(3) = "Power in mW corresponding to low-range full scale (.parameter)"     'Units should match those in measurement above
            Dim CPdB As Double = MechValues(4).MechanismValue(MechanismList1)    '(4) = "Power in mW corresponding to 3-dB compression point (.parameter)"   'Units should match those in measurement above
            Dim CPPE As Double = MechValues(5).MechanismValue(MechanismList1)    '(5) = "Percentage of compression corrected by meter (+/-0.2%, .parameter)"    'A percentage of the signal level
            Dim ROMM As Double = MechValues(6).MechanismValue(MechanismList1)    '(6) = "Reference oscillator mismatch (+/-0.2%, .parameter)"                   'A percentage of the signal level
            Dim ROPU As Double = MechValues(7).MechanismValue(MechanismList1)    '(7) = "Reference oscillator power uncertainty (+/-0.6%, .parameter)"          'A percentage of the signal level
            Dim InsE As Double = MechValues(8).MechanismValue(MechanismList1)    '(8) = "Instrumentation errors, proportion of full scale (+/-0.5%, .parameter)"    'A percentage of the full scale used in the measurement
            Dim ZSEr As Double = MechValues(9).MechanismValue(MechanismList1)    '(9) = "Zero-set error, proportion of low-range full scale (+/-0.5%, .parameter)"  'A percentage of the low-range full scale
            Dim ZCOE As Double = MechValues(10).MechanismValue(MechanismList1)   '(10) = "Zero carry over, proportion of full scale (+/-0.2%, .parameter)"       'A percentage of the low-range full scale
            Dim ROCF As Double = MechValues(11).MechanismValue(MechanismList1)   'Unaccounted-for reference-oscillator calibration factor  (1, .parameter)"             'Usually 1
            Dim CFEr As Double = MechValues(12).MechanismValue(MechanismList1)   'Unaccounted-for calibration-factor or efficiency errors (1 +/-0.015, .parameter)"     'In case you have a cal factor with no errors
            Dim PEff As RealMatrix = MechValues(13).getSParams(MechanismList1)   'New parameter we added.


            'Calculate corresponding power levels
            Dim PMFS_power As Double = PMFS, PMLS_power As Double = PMLS, CPdB_power As Double = CPdB

            'Add in the errors 
            For k As Integer = 1 To myRealMatrix0.NRows

                Dim PMPower As Double = myRealMatrix1(k, 2) '* myRealMatrix1(k, 2) + myRealMatrix1(k, 3) * myRealMatrix1(k, 3)
                Dim PMPower_init As Double = PMPower    'Remember this for later.
                Dim PMError As Double = 0.0       'This is the total error relative to 1. Now add in all the terms below.

                '(5) = "Percentage of compression corrected by meter (+/-0.2%, .parameter)"    'A percentage of the signal level
                'Dim A_ratio As Double = Math.Sqrt(Math.Abs(PMPower / CPdB_power))   'Amplitude relative to 3-dB compression point
                'Dim A_compression As Double = Math.Sqrt(2.0) * Math.Exp(A_ratio)
                'Dim P_compression As Double = CPPE * A_compression * A_compression
                'PMPower = PMPower * (1.0 + P_compression)
                If CPPE <> 0.0 Then MechanismList1.ErrorReport = "Warning: Linearity models not yet implemented. No uncertainty due to linearity added."

                '(6) = "Reference oscillator mismatch (+/-0.2%, .parameter)"                   'A percentage of the signal level
                PMPower = PMPower * (1.0 + ROMM)

                '(7) = "Reference oscillator power uncertainty (+/-0.6%, .parameter)"          'A percentage of the signal level
                PMPower = PMPower * (1.0 + ROPU)

                '(8) = "Instrumentation errors, proportion of full scale (+/-0.5%, .parameter)"    'A percentage of the full scale used in the measurement
                PMPower = PMPower + InsE * PMFS_power

                '(9) = "Zero-set error, proportion of low-range full scale (+/-0.5%, .parameter)"  'A percentage of the low-range full scale
                PMPower = PMPower + ZSEr * PMLS_power

                '(10) = "Zero carry over, proportion of full scale (+/-0.2%, .parameter)"       'A percentage of the low-range full scale
                PMPower = PMPower + ZCOE * PMFS_power

                'Unaccounted-for reference-oscillator calibration factor  (1, .parameter)"             'Usually 1
                PMPower = PMPower / ROCF

                'Unaccounted-for calibration-factor or efficiency errors (1 +/-0.015, .parameter)"     'In case you have a cal factor with no errors
                PMPower = PMPower * CFEr

                'Also add in the efficiency of the power meter
                Dim EfficiencyCorrection As Double = Math.Sqrt(Math.Abs(PEff(k, 2)))

                myOutputMatrix(k, 4) = Math.Sqrt(Math.Abs(PMPower / PMPower_init)) * EfficiencyCorrection  'The ratio we need to multiply by to get the power out with the errors

            Next k

            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for adding noise to existing measurements.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_AddNoise
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myExt As String = ".s2p"
        Private myNoiseMechanismName As String = ""
        Private myMechanismList2 As MechanismList
        Private myFirstPass As Boolean = True

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Noise generator (.parameter)"                       'This parameter generates the noise.
                myNameList(1) = "Measurement to which the noise is added"

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(13) As String
                FileExtensions(0) = ".meas" : FileExtensions(1) = ".w1p" : FileExtensions(2) = ".w2p" : FileExtensions(3) = ".w3p" : FileExtensions(4) = ".w4p"
                FileExtensions(5) = ".complex" : FileExtensions(6) = ".s1p" : FileExtensions(7) = ".s2p" : FileExtensions(8) = ".s3p" : FileExtensions(9) = ".s4p"
                FileExtensions(10) = ".parameter" : FileExtensions(11) = ".model" : FileExtensions(12) = ".cascade" : FileExtensions(13) = ".waveform"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(4) As String
                PullDownList(0) = "Add noise to real and imaginary parts"
                PullDownList(1) = "Add noise to real parts only"
                PullDownList(2) = "Add noise to imaginary parts only"   'Also, include in-phase and quadrature components.
                PullDownList(3) = "Add noise to in-phase (magnitude) components only"
                PullDownList(4) = "Add noise to quadrature (phase) components only"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                'Add Jitter, all columns, col 1, col 2, ...
                Dim PullDownList(11) As String   'Make this the last pull-down. 
                PullDownList(0) = "Add jitter"
                PullDownList(1) = "Add noise to all real/imaginary pairs"
                For k As Integer = 0 To 9
                    PullDownList(k + 2) = "Add noise to real/imaginary pair " + (k + 1).ToString
                Next k
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'Multiplicative noise??
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor noise to existing measurements and models. The first parameter generates the noise, and this noise is added to the measurement passed as the second paramter to the post processor. The sensitivity analysis is not designed to accurately propagate noise. However, noise should accurately propagate through the Monte-Carlo simulations if enough simulations are used in the analysis."
                myDescription(2) = "The default frequency list is determined from the measurement passed as the second parameter."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Add noise to an existing measurement or model"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = 1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = "" 'Don't specify a name. This transfers all of the conditions of the argument through the post processor
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim myAddNoise As MechanismSuppport = MechValues(0)                                             'Parameter that generates the noise we will add
            Dim myAddNoiseValue As Double = 0.0
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)      'Measurement or model to which we will add the noise
            Dim myOutputMatrix As New RealMatrix(myRealMatrix1.NRows, 9, myRealMatrix1.DataType)            'Output file is same as input file but has added noise
            myOutputMatrix.Vector(1) = myRealMatrix1.Vector(1)                                              'Output has the same frequencies as the inputs

            ''Test the conditions.
            'Dim myConditions As ConditionSupport = MechValues(1).getConditionSupport()
            'If Not IsNothing(myConditions) Then
            '    Dim ConditionsList() As String = myConditions.getNameList
            '    If Not IsNothing(ConditionsList) Then
            '        For Indx As Integer = 0 To ConditionsList.Count - 1
            '            Dim IsRealMatrix As Boolean = myConditions.IsRealMatrix(ConditionsList(Indx))
            '            If IsRealMatrix Then
            '                Dim Cond As RealMatrix = myConditions.getSParams(ConditionsList(Indx), MechanismList1)
            '                Dim nc As Integer = Cond.NCols
            '            Else
            '                Dim Cond As Double = myConditions.getDouble(ConditionsList(Indx), MechanismList1)
            '                Dim cv As Double = Cond
            '            End If
            '        Next Indx
            '    End If
            'End If

            If MechanismList1.InitializeFlag Then   'Nominal solution

                'Take care of initializaing things
                myExt = myRealMatrix1.DataType
                myNoiseMechanismName = MechanismList1.ListOfNames(0)
                'Initialize the mechanism list we will use to run the noise-generation parameter through its paces.
                'This mechaniasm list is distinct from the mechanism list used by the driver, and is used in the repeated calls that generate the arrays of random numbers we need to add noise.
                myMechanismList2 = New MechanismList(MechanismList1.FrequencyList, 1.0, 0.0, True, MechanismList1.ExperimentName)
                myMechanismList2.AddName(myNoiseMechanismName)
                myMechanismList2.InitializeFlag = True
                myAddNoiseValue = myAddNoise.MechanismValue(myMechanismList2) 'Sets the seed.
                myMechanismList2.InitializeFlag = False
                myFirstPass = True

                'Send back the nominal matrix
                myOutputMatrix.Fill(myRealMatrix1)

            Else    'A preturbed solution. Add errors unless this is a sensitivity from another mechanism that is not related to the noise generator.

                'Send back the nominal matrix
                myOutputMatrix.Fill(myRealMatrix1)

                'Set up the columns we will add noise to
                Dim kStart As Integer = 2, kStep As Integer = 1, kStop As Integer = myRealMatrix1.NCols
                Select Case myPullDownSelection1
                    Case -1, 0 'Add noise to real and imaginary parts"
                        kStart = 2 : kStep = 1
                    Case 1    'Add noise to real parts only"
                        kStart = 2 : kStep = 2
                    Case 2   'Add noise to imaginary parts only"
                        kStart = 3 : kStep = 2
                    Case 3  'Add noise to in-phase (magnitude) components only
                        kStart = 2 : kStep = 2
                    Case 4  'Add noise to quadrature (phase) components only
                        kStart = 2 : kStep = 2
                End Select
                Dim myPullDownSelection1Local As Integer = myPullDownSelection1
                Select Case myPullDownSelection2
                    Case 0, -1  'Add jitter
                        kStart = 1 : kStop = 1 : kStep = 1 : myPullDownSelection1Local = 1
                    Case 1      'Add noise to all real/imaginary pairs
                        'Just use the default selections
                    Case Else   'Add noise to real/imaginary pair xx
                        kStart = kStart + 2 * (myPullDownSelection2 - 2)
                        kStop = kStart + 1
                End Select

                'Add noise into the file
                myAddNoiseValue = 0.0
                For k As Integer = kStart To kStop Step kStep
                    For kk As Integer = 1 To myRealMatrix1.NRows
                        If MechanismList1.IsMonteCarloSimulation Then   'This is a Monte-Carlo value. Generate a random sequence.
                            myMechanismList2.IncrementPointer()           'Increment the pointer so that we generate a new random value.
                            myAddNoiseValue = myAddNoise.MechanismValue(myMechanismList2)
                        Else
                            If k = kStart And kk = 1 And myFirstPass Then    'This is a sensitivity value. Use the normal noise value.
                                myAddNoiseValue = myAddNoise.MechanismValue(MechanismList1)
                                myFirstPass = False
                            End If
                        End If
                        Select Case myPullDownSelection1Local
                            Case Is < 3
                                myOutputMatrix(kk, k) = myOutputMatrix(kk, k) + myAddNoiseValue
                            Case 3  'Add noise to in-phase (magnitude) components only
                                Dim Mag As Double = Math.Sqrt(myOutputMatrix(kk, k) * myOutputMatrix(kk, k) + myOutputMatrix(kk, k + 1) * myOutputMatrix(kk, k + 1))
                                myOutputMatrix(kk, k) = myOutputMatrix(kk, k) * (Mag + myAddNoiseValue) / Mag   'Scale the real part
                                myOutputMatrix(kk, k + 1) = myOutputMatrix(kk, k + 1) * (Mag + myAddNoiseValue) / Mag   'Scale the imag part
                            Case 4  'Add noise to quadrature (phase) components only
                                Dim c As New Complex(myOutputMatrix(kk, k), myOutputMatrix(kk, k + 1))
                                Dim c90 As Complex = toComplex(0.0, 1.0) * (c / Abs(c)) 'Get a unit vector that is 90 degrees out of phase with c
                                c90 = myAddNoiseValue * c90     'Multiply the noise value by c90 to get quadrature noise
                                'Add quadrature noise back into the result
                                myOutputMatrix(kk, k) = myOutputMatrix(kk, k) + c90.Re
                                myOutputMatrix(kk, k + 1) = myOutputMatrix(kk, k + 1) + c90.Im
                        End Select
                    Next kk
                Next k

                If myPullDownSelection2 <= 0 Then    'Add jitter
                    'Now Interpolate the signal back to the origional frequency list.
                    myOutputMatrix.InterpolationFrequencyList(MechanismList1.MagnitudePhaseInterpolationIndex) = MechanismList1.FrequencyList
                End If

            End If


            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class

    ''' <summary>
    ''' Post processor builds a matrix from columns of the input matrices
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_BuildMatrix
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myFirstTime As Boolean = True
        Private myFirstRealMatrixNominal1 As RealMatrix 'The nominal value of the second measurement.
        Dim myExtension As String = Nothing

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "List of input matrices"
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList() As String = Nothing   'The list of mechanism (model parameter) names for this model.
                ''Set up the list of input parameters for this post-processor.
                ''This list will be displayed for the user and identify the role of each input parameter.
                'myNameList(0) = "Add errors to this measurement (.meas)"    'The first measurement we are going to add errors to
                'myNameList(1) = "New errors to add to measurement above (.meas)"    'Add the errors from this 
                'myNameList(2) = "New-error scaling factor (.parameter)"    'Add the errors from this measurement
                Return myNameList
            End Get
        End Property

        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(11) As String
                FileExtensions(0) = ".raw" : FileExtensions(1) = ".waveform" : FileExtensions(2) = ".complex"
                FileExtensions(3) = ".s1p" : FileExtensions(4) = ".s2p" : FileExtensions(5) = ".s3p" : FileExtensions(6) = ".s4p"
                FileExtensions(7) = ".w1p" : FileExtensions(8) = ".w2p" : FileExtensions(9) = ".w3p" : FileExtensions(10) = ".w4p"
                FileExtensions(11) = ".meas"
                Return FileExtensions
            End Get
        End Property

        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim FileExtensions(10) As String
                FileExtensions(0) = "Output as .raw" : FileExtensions(1) = "Output as .waveform" : FileExtensions(2) = "Output as .complex"
                FileExtensions(3) = "Output as .s1p" : FileExtensions(4) = "Output as .s2p" : FileExtensions(5) = "Output as .s3p" : FileExtensions(6) = "Output as .s4p"
                FileExtensions(7) = "Output as .w1p" : FileExtensions(8) = "Output as .w2p" : FileExtensions(9) = "Output as .w3p" : FileExtensions(10) = "Output as .w4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Use real and imaginary values"
                'PullDownList(0) = "Use only real values"
                'PullDownList(0) = "Use only imaginary values"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing 'Set the frequency over which the fit is performed
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor builds a matrix from the columns of other matrices."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get

                Return myExtension
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Build a matrix from columns of other matrices"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = -1
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property



        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have two, the measured input sparameters.
            Dim myRealMatrix0 As RealMatrix = MultipleModelInput(0).getSParams(MechanismList1)

            'First time around get the nominal value
            If myFirstTime Then

                myFirstTime = False

                'Save initial data for later use
                Dim FileExtensions(10) As String
                FileExtensions(0) = ".raw" : FileExtensions(1) = ".waveform" : FileExtensions(2) = ".complex"
                FileExtensions(3) = ".s1p" : FileExtensions(4) = ".s2p" : FileExtensions(5) = ".s3p" : FileExtensions(6) = ".s4p"
                FileExtensions(7) = ".w1p" : FileExtensions(8) = ".w2p" : FileExtensions(9) = ".w3p" : FileExtensions(10) = ".w4p"
                myExtension = FileExtensions(myPullDownSelection1)

            End If

            'Create the output matrix.
            Dim OutputMatrix As RealMatrix = myRealMatrix0.Vector(1)
            'Augment the columns
            For kk As Integer = 0 To MultipleModelInput.Count - 1
                myRealMatrix0 = MultipleModelInput(kk).getSParams(MechanismList1)
                For k As Integer = 2 To myRealMatrix0.NCols
                    OutputMatrix = Augment(OutputMatrix, myRealMatrix0.Vector(k))
                Next k
            Next kk

            'Do some checks and add the data type
            Select Case myPullDownSelection1

                Case 0  ' ".raw" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 9 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 1  ' ".waveform" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 3 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 2  ' ".complex"
                    OutputMatrix.DataType = myExtension
                Case 3  ' ".s1p" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 3 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 4  ' ".s2p" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 9 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 5  ' ".s3p" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 19 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 6  ' ".s4p"
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 33 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 7  ' ".w1p" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 3 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 8  ' ".w2p" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 17 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 9  ' ".w3p" 
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 37 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True
                Case 10  ' ".w4p"
                    OutputMatrix.DataType = myExtension
                    If OutputMatrix.NCols <> 65 Then MechanismList1.ErrorReport = "Wrong number of columns for " + myExtension + " file type." : MechanismList1.FatalError = True

            End Select


            'That's all folks! 
            Return ToArray(OutputMatrix)

        End Function


    End Class

    ''' <summary>
    ''' Post processor for calculating power-meter efficiency
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_PowerEff

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myNoiseMechanismName As String = ""
        Private myMechanismList2 As MechanismList
        Private myFirstPass As Boolean = True


        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "VbiasON/OFF VpileON/OFF (.complex)"                       'This parameter puts on as real, off as imaginary
                myNameList(1) = "Calorimeter correction factor g (.complex)"
                myNameList(2) = "Nominal thermopile voltage (V, .parameter)"
                myNameList(3) = "Value of k at nominal thermopile voltage (J/V, .parameter)"
                myNameList(4) = "Slope of k at nominal thermopile voltage (J/V^2, .parameter)"
                myNameList(5) = "Quadratic coefficient of k at nominal thermopile voltage (J/V^3, .parameter)"

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String
                FileExtensions(0) = ".meas"
                FileExtensions(1) = ".complex"
                FileExtensions(2) = ".parameter"
                FileExtensions(3) = ".sumofparameters"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calculates efficiency from calorimeter measurements and g."
                myDescription(2) = "The default frequency list is determined from the voltage measurements passed as the first parameter. Here the real parts correspond to the on voltages and the imaginary parts (i.e. 5 columns total)."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the efficiency of a power meter from g"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim Voltages As RealMatrix : Voltages = MechValues(0).getSParams(MechanismList1)    'VbiasON/OFF VpileON/OFF (.complex)
            Dim g As RealMatrix : g = MechValues(1).getSParams(MechanismList1)
            Dim v0 As Double = MechValues(2).MechanismValue(MechanismList1) 'myNameList(2) = "Nominal thermopile voltage (V, .parameter)"
            Dim k0 As Double = MechValues(3).MechanismValue(MechanismList1) 'myNameList(3) = "Value of k at nominal thermopile voltage (J/V, .parameter)"
            Dim k1 As Double = MechValues(4).MechanismValue(MechanismList1) 'myNameList(4) = "Slope of k at nominal thermopile voltage (J/V^2, .parameter)"
            Dim k2 As Double = MechValues(5).MechanismValue(MechanismList1) 'myNameList(5) = "Quadratic coefficient of k at nominal thermopile voltage (J/V^3, .parameter)"
            Dim myOutputMatrix As New RealMatrix(Voltages.NRows, 3, ".complex")            'Output file with efficiency
            myOutputMatrix.Vector(1) = Voltages.Vector(1)                                  'Output has the same frequencies as the inputs

            'VB solution
            For kk As Integer = 1 To Voltages.NRows
                Dim Fbias As Double = Voltages(kk, 2) / Voltages(kk, 3)
                Dim e2dk2 As Double = Voltages(kk, 4) / (k0 + k1 * (Voltages(kk, 4) - v0) + k2 * (Voltages(kk, 4) - v0) ^ 2)
                Dim e1dk1 As Double = Voltages(kk, 5) ' / (k0 + k1 * (Voltages(kk, 5) - v0) + k2 * (Voltages(kk, 5) - v0) ^ 2)
                Dim eff As Double = g(kk, 2) * (1 - Fbias * Fbias) / (e2dk2 / e1dk1 - Fbias * Fbias)
                myOutputMatrix(kk, 2) = eff
            Next kk

            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class


    ''' <summary>
    ''' Post processor for calculating power-meter efficiency
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_PowerEff_TomCrowley

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myNoiseMechanismName As String = ""
        Private myMechanismList2 As MechanismList
        Private myFirstPass As Boolean = True

        'Default MatLab program.
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myMatLab As MLApp.MLApp = Nothing
        Private myMatLabInit As String = ""
        Private myMatLabMain As String = ""
        Private myMatLabSubs As String = ""

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(4) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "MatLab initialization program (.m)"
                myNameList(1) = "MatLab main program (.m)"
                myNameList(2) = "MatLab subroutines (.zip)"
                myNameList(3) = "VbiasON/OFF VpileON/OFF (.complex)"                       'This parameter puts on as real, off as imaginary
                myNameList(4) = "Calorimeter correction factor g (.complex)"

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(5) As String
                FileExtensions(0) = ".meas"
                FileExtensions(1) = ".complex"
                FileExtensions(2) = ".parameter"
                FileExtensions(3) = ".sumofparameters"
                FileExtensions(4) = ".m"
                FileExtensions(5) = ".zip"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Use stored MatLab code"
                PullDownList(1) = "Use passed MatLab code"
                PullDownList(2) = "Use simplified VB code"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor alculates efficiency from calorimeter measurements and g."
                myDescription(2) = "The default frequency list is determined from the voltage measurements passed as the first parameter. Here the real parts correspond to the on voltages and the imaginary parts (i.e. 5 columns total)."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the efficiency of a power meter from g"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim Voltages As RealMatrix : Voltages = MechValues(3).getSParams(MechanismList1)    'VbiasON/OFF VpileON/OFF (.complex)
            Dim g As RealMatrix : g = MechValues(4).getSParams(MechanismList1)
            Dim myOutputMatrix As New RealMatrix(Voltages.NRows, 3, ".complex")            'Output file with efficiency
            myOutputMatrix.Vector(1) = Voltages.Vector(1)                                  'Output has the same frequencies as the inputs

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1), MatLabDir As String = ""

            If myPullDownSelection3 <= 1 Then   'MatLab solution

                If myFirstPass Then 'Only do this stuff the first time
                    Call MatLabInit(MechanismList1, MechValues, myMatLabInit, myMatLabMain, myMatLabSubs, myPullDownSelection3, myTextBoxContents, myMatLabFileName, myMatLabPath, MatLabDir)
                    'See if we hit an error
                    If MechanismList1.FatalError Then Return ToArray(Dummy)
                    myFirstPass = False
                End If

                'Write out data for MatLab
                Voltages.Write(myMatLabPath + "\Voltages.complex_binary")
                g.Write(myMatLabPath + "\G.complex_binary")

                'Store the parameters to disk for the MatLab routine
                Call StoreParametersForMatLab(MechanismList1, MechValues, myMatLabPath)

                'Run MatLab
                Try
                    'Initialize MatLab
                    If IsNothing(myMatLab) Then 'Make sure we have a copy of MatLab on hand
                        myMatLab = New MLApp.MLApp
                    End If
                    myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                    myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName))   'Run MatLab routine
                Catch ex As Exception
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "MatLab Error: Check license."
                End Try

                'Read in the MatLab results from MATLAB and return them to the MUF in a format that the MUF understands

                'Check that MATLAB actually created the .variables file we are expecting.
                Dim FileName As String = myMatLabPath + "\Eff.complex_binary"
                If My.Computer.FileSystem.FileExists(FileName) Then
                    myOutputMatrix.Read(FileName)    'Read in the file created by MatLab 
                Else
                    MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
                End If

            Else                                'VB solution

                For kk As Integer = 1 To Voltages.NRows
                    Dim Fbias As Double = Voltages(kk, 2) / Voltages(kk, 3)
                    Dim Fpile As Double = Voltages(kk, 4) / Voltages(kk, 5)
                    Dim eff As Double = g(kk, 2) * (1 - Fbias * Fbias) / (Fpile - Fbias * Fbias)
                    myOutputMatrix(kk, 2) = eff
                Next kk

            End If

            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class


    ''' <summary>
    ''' Post processor for fitting measured data
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_LinearFit
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myFirstTime As Boolean = True
        Private mMax As Integer             'The maximum index that we fit to.
        Private mMin As Integer             'The maximum index that we replace to.
        Private myNumberFitFunctions As Integer = 0

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "The functions to be fit (.complex)"
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(8) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Start fit at (GHz, .parameter)"    'Frequency at which we start the fit
                myNameList(1) = "Stop fit at (GHz, .parameter)"    'Frequency at which we stop the fit
                myNameList(2) = "Replace fit with measured data starting at (GHz, .parameter)"    'Frequency at which we start using the measured data
                myNameList(3) = "Replace fit with measured data ending at (GHz, .parameter)"    'Frequency at which we stop using the measured data
                myNameList(4) = "Weights (.complex)"
                myNameList(5) = "Additional fitting Function 1 (.complex)"
                myNameList(6) = "Additional fitting Function 2 (.complex)"
                myNameList(7) = "Additional fitting Function 3 (.complex)"
                myNameList(8) = "Additional fitting Function 4 (.complex)"
                'Add weights, fitting functions.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String
                FileExtensions(0) = ".meas" : FileExtensions(1) = ".complex" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".sumofparameters" : FileExtensions(4) = ".waveform"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(12) As String   'Maybe should be a, sqrt(x), a+q sqrt(x), bx, a+bx, a+qsqrt(x)+bx, cx2, a+cx2, a+bx+cx2, a+bx+cx2+dx3, a+qsqrt(x)+bx+cx2+dx3
                PullDownList(0) = "No fixed-function fit"
                PullDownList(1) = "Fit a"
                PullDownList(2) = "Fit q sqrt(x)"
                PullDownList(3) = "Fit a + q sqrt(x)"
                PullDownList(4) = "Fit bx"
                PullDownList(5) = "Fit a + bx"
                PullDownList(6) = "Fit a + q sqrt(x) + bx"
                PullDownList(7) = "Fit cx^2"
                PullDownList(8) = "Fit a + cx^2"
                PullDownList(9) = "Fit a + bx + cx^2"
                PullDownList(10) = "Fit a + bx + cx^2 + dx^3"
                PullDownList(11) = "Fit a + q sqrt(x) + bx + cx^2 + dx^3"
                PullDownList(12) = "Fit a x^-1 + b x^-2 + c x^-3 + d x^-4"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(5) As String   'Make this the last pull-down. Replace this one with Function 1, Function 2, ...
                PullDownList(0) = "Fit the complex values."
                PullDownList(1) = "Unwrap and fit the phases."
                PullDownList(2) = "Unwrap, fit and de-trend the phases."
                PullDownList(3) = "Fit the real part of the data to the real parts of the functions."
                PullDownList(4) = "Fit the imaginary part of the data to the imaginary parts of the functions."
                PullDownList(5) = "Fit the imaginary part of the data to the real parts of the functions."
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(9) As String   'Make this the last pull-down. 
                For k As Integer = 0 To 9
                    PullDownList(k) = "Fit real/imaginary pair " + (k + 1).ToString
                Next k
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "This post processor does a linear fit to a measurement."
                myDescription(2) = "Additional fitting functions filled with zeros are ignored."
                myDescription(4) = "Set the weights positive for normal weighting, +1.0 for uniform weighting, -1.0 to weight by amplitude of the signal, -2.0 to weight by the power in the signal."
                myDescription(6) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Linear fit to a measurement."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNames(2) As String
                myFileNames(0) = "\Fit"
                myFileNames(1) = "\FitParametersReal"
                myFileNames(2) = "\FitParametersImag"
                Return myFileNames
            End Get
        End Property


        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            Dim dummy As New RealMatrix(1)
            Dim myRealMatrix0 As RealMatrix = MultipleModelInput(0).getSParams(MechanismList1)
            Dim FitCol As Integer = 2 * myPullDownSelection3 + 2    'The column we fit data to.

            'Check that FitCol is valid.
            If FitCol >= myRealMatrix0.NCols Then
                MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Column selection is not valid!" : Return ToArray(dummy)
            End If

            'Get start and stop frequencies
            Dim FStart As Double = MechValues(0).MechanismValue(MechanismList1) 'Frequency at which we start the fit
            Dim FStop As Double = MechValues(1).MechanismValue(MechanismList1)  'Frequency at which we stop the fit
            Dim FStartMeas As Double = MechValues(2).MechanismValue(MechanismList1) 'Frequency at which we start using the measured data
            Dim FStopMeas As Double = MechValues(3).MechanismValue(MechanismList1)  'Frequency at which we stop using the measured data
            Dim Weights As RealMatrix = MechValues(4).getSParams(MechanismList1)  'Weights
            Dim Function1 As RealMatrix = MechValues(5).getSParams(MechanismList1)  'First function
            Dim Function2 As RealMatrix = MechValues(6).getSParams(MechanismList1)  'Second function
            Dim Function3 As RealMatrix = MechValues(7).getSParams(MechanismList1)  'Third function
            Dim Function4 As RealMatrix = MechValues(8).getSParams(MechanismList1)  'Fourth function

            'Do some setup.
            If myFirstTime Then

                'See which fitting functions to add in.
                Dim myNumberFitFunctions As Integer = 0
                For k As Integer = 1 To Function1.NRows 'See if we shuld use Function1 in the fit
                    If Function1(k, 2) <> 0.0 Then myNumberFitFunctions = 1
                    If Function1(k, 3) <> 0.0 Then myNumberFitFunctions = 1
                Next
                For k As Integer = 1 To Function1.NRows 'See if we shuld use Function2 in the fit
                    If Function2(k, 2) <> 0.0 Then myNumberFitFunctions = 2
                    If Function2(k, 3) <> 0.0 Then myNumberFitFunctions = 2
                Next
                For k As Integer = 1 To Function1.NRows 'See if we shuld use Function3 in the fit
                    If Function3(k, 2) <> 0.0 Then myNumberFitFunctions = 3
                    If Function3(k, 3) <> 0.0 Then myNumberFitFunctions = 3
                Next
                For k As Integer = 1 To Function1.NRows 'See if we shuld use Function4 in the fit
                    If Function4(k, 2) <> 0.0 Then myNumberFitFunctions = 4
                    If Function4(k, 3) <> 0.0 Then myNumberFitFunctions = 4
                Next

                'A quick check
                If myPullDownSelection1 <= 0 And myNumberFitFunctions <= 0 Then
                    MechanismList1.ErrorReport = "Fatal error: No fitting function chosen!" : MechanismList1.FatalError = True
                    Return ToArray(dummy)
                End If

            End If

            'Calculate the final result after fitting.
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, myRealMatrix0.NCols, myRealMatrix0.DataType)
            myRealMatrixResult.Fill(myRealMatrix0)

            'Some initialization. Figure out the range over which the measurements are fitted.
            Dim p As New ComplexMatrix(1), NParams As Integer = 0
            Dim myMeasurements As New ComplexMatrix(myRealMatrix0.NRows), beta As New ComplexMatrix(myRealMatrix0.NRows)
            mMax = myRealMatrix0.NRows   'The default range for fitting the measurements (full range, all are fitted)
            mMin = 1   'The default range for replacing the measurements with function values (full range, all are fitted)            
            For k As Integer = 1 To myRealMatrix0.NRows
                myMeasurements(k) = toComplex(myRealMatrix0(k, FitCol), myRealMatrix0(k, FitCol + 1))
                If myRealMatrix0(k, 1) <= FStop Then mMax = k
                If myRealMatrix0(k, 1) < FStart Then mMin = k
            Next k

            'Select the fitting functions
            Select Case myPullDownSelection1

                Case 0 ' No fixed-function fit
                    NParams = 0 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)

                Case 1 ' Fit a
                    NParams = 1 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                    Next k

                Case 2 ' Fit q sqrt(x)
                    NParams = 1 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(Math.Sqrt(x), 0.0)   'q sqrt(x)
                    Next k

                Case 3 ' Fit a + q sqrt(x)
                    NParams = 2 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(Math.Sqrt(x), 0.0)   'q sqrt(x)
                    Next k

                Case 4 ' Fit bx
                    NParams = 1 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(x, 0.0)  'bx
                    Next k

                Case 5 ' Fit a + bx
                    NParams = 2 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x, 0.0)  'bx
                    Next k

                Case 6 ' Fit a + q sqrt(x) + bx
                    NParams = 3 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(Math.Sqrt(x), 0.0)   'q sqrt(x)
                        beta(k, 3) = toComplex(x, 0.0)  'bx
                    Next k

                Case 7 ' Fit cx^2
                    NParams = 1 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(x * x, 0.0)  'cx2
                    Next k

                Case 8 ' Fit a + cx^2
                    NParams = 2 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x * x, 0.0)  'cx2
                    Next k

                Case 9 ' Fit a + bx + cx^2
                    NParams = 3 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x, 0.0)  'bx
                        beta(k, 3) = toComplex(x * x, 0.0)  'cx2
                    Next k

                Case 10 ' Fit a + bx + cx^2 + dx^3
                    NParams = 4 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x, 0.0)  'bx
                        beta(k, 3) = toComplex(x * x, 0.0)  'cx2
                        beta(k, 4) = toComplex(x * x * x, 0.0)  'dx3
                    Next k

                Case 11 ' Fit a + q sqrt(x) + bx + cx^2 + dx^3
                    NParams = 5 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(Math.Sqrt(x), 0.0)   'q sqrt(x)
                        beta(k, 3) = toComplex(x, 0.0)  'bx
                        beta(k, 4) = toComplex(x * x, 0.0)  'cx2
                        beta(k, 5) = toComplex(x * x * x, 0.0)  'dx3
                    Next k

                Case 12 'Fit a x^-1 + b x^-2 + c x^-3 + d x^-4
                    NParams = 4 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = myRealMatrix0(k, 1)
                        beta(k, 1) = toComplex(1.0 / x, 0.0)                'a x^-1 
                        beta(k, 2) = toComplex(1.0 / (x * x), 0.0)          'b x^-2 
                        beta(k, 3) = toComplex(1.0 / (x * x * x), 0.0)      'c x^-3 
                        beta(k, 4) = toComplex(1.0 / (x * x * x * x), 0.0)  'd x^-4
                    Next k

            End Select

            'Fill in the custom functions. Only load the real or imaginary parts if we are only fitting real or imaginary parts
            If myNumberFitFunctions >= 1 Then
                Select Case myPullDownSelection2
                    Case -1, 0, 1, 2
                        beta.VectorRealPart(NParams + 1) = Function1.Vector(2)
                        beta.VectorImagPart(NParams + 1) = Function1.Vector(3)
                    Case 3  'Fit the real part only.
                        beta.VectorRealPart(NParams + 1) = Function1.Vector(2)
                    Case 4  'Fit the imaginary part of the data only with the imaginary part of the functions.
                        beta.VectorImagPart(NParams + 1) = Function1.Vector(3)
                    Case 5  'Fit the imaginary part of the data only with the real part of the functions.
                        beta.VectorRealPart(NParams + 1) = Function1.Vector(2)
                End Select
            End If
            If myNumberFitFunctions >= 2 Then
                Select Case myPullDownSelection2
                    Case -1, 0, 1, 2
                        beta.VectorRealPart(NParams + 1) = Function2.Vector(2)
                        beta.VectorImagPart(NParams + 1) = Function2.Vector(3)
                    Case 3  'Fit the real part only.
                        beta.VectorRealPart(NParams + 1) = Function2.Vector(2)
                    Case 4  'Fit the imaginary part of the data only with the imaginary part of the functions.
                        beta.VectorImagPart(NParams + 1) = Function2.Vector(3)
                    Case 5  'Fit the imaginary part of the data only with the real part of the functions.
                        beta.VectorRealPart(NParams + 1) = Function2.Vector(2)
                End Select
            End If
            If myNumberFitFunctions >= 3 Then
                Select Case myPullDownSelection2
                    Case -1, 0, 1, 2
                        beta.VectorRealPart(NParams + 1) = Function3.Vector(2)
                        beta.VectorImagPart(NParams + 1) = Function3.Vector(3)
                    Case 3  'Fit the real part only.
                        beta.VectorRealPart(NParams + 1) = Function3.Vector(2)
                    Case 4  'Fit the imaginary part of the data only with the imaginary part of the functions.
                        beta.VectorImagPart(NParams + 1) = Function3.Vector(3)
                    Case 5  'Fit the imaginary part of the data only with the real part of the functions.
                        beta.VectorRealPart(NParams + 1) = Function3.Vector(2)
                End Select
            End If
            If myNumberFitFunctions >= 4 Then
                Select Case myPullDownSelection2
                    Case -1, 0, 1, 2
                        beta.VectorRealPart(NParams + 1) = Function4.Vector(2)
                        beta.VectorImagPart(NParams + 1) = Function4.Vector(3)
                    Case 3  'Fit the real part only.
                        beta.VectorRealPart(NParams + 1) = Function4.Vector(2)
                    Case 4  'Fit the imaginary part of the data only with the imaginary part of the functions.
                        beta.VectorImagPart(NParams + 1) = Function4.Vector(3)
                    Case 5  'Fit the imaginary part of the data only with the real part of the functions.
                        beta.VectorRealPart(NParams + 1) = Function4.Vector(2)
                End Select
            End If

            'Get the reduced set of frequencies we fit over
            Dim myMeasurements1 As New ComplexMatrix(mMax - mMin + 1), beta1 As New ComplexMatrix(mMax - mMin + 1, NParams + myNumberFitFunctions)
            Dim Weights1 As New RealMatrix(mMax - mMin + 1, 3), myPhases As New RealMatrix(myMeasurements.NRows)
            If myPullDownSelection2 = 1 Or myPullDownSelection2 = 2 Then   'Unwrap the phases
                myPhases = UnWrap(myMeasurements)
                Dim b As Double = (myPhases(myPhases.NRows) - myPhases(1)) / (myRealMatrix0(myRealMatrix0.NRows, 1) - myRealMatrix0(1, 1))
                Dim a As Double = myPhases(1) - b * myRealMatrix0(1, 1) 'The intercept a in the presumed fit a+bf
                'Estimate the number of wraps
                Dim NumPI As Long = CLng(a / (2.0 * Math.PI))
                a = CDbl(NumPI) * 2.0 * Math.PI   'Revise the intercept a to be an integer number of PIs
                For k As Integer = 1 To myPhases.NRows  'Remove the offset
                    myPhases(k) = myPhases(k) - a
                Next k
            End If
            Dim AllWeightsZero As Boolean = True
            For k As Integer = 1 To myMeasurements1.NRows
                Select Case myPullDownSelection2
                    Case 0, 3, 4, 5  'Fit the complex or real or imag values.
                        myMeasurements1(k) = myMeasurements(k + mMin - 1)
                    Case 1, 2  'Fit the phases.
                        myMeasurements1(k) = myPhases(k + mMin - 1)
                End Select
                For kk As Integer = 1 To NParams + myNumberFitFunctions
                    beta1(k, kk) = beta(k + mMin - 1, kk)
                Next kk
                For kk As Integer = 2 To 3
                    Select Case Weights(k + mMin - 1, kk)
                        Case Is >= 0.0   'Get the weight from the file
                            Weights1(k, kk) = Weights(k + mMin - 1, kk)
                            If Weights1(k, kk) <> 0.0 Then AllWeightsZero = False
                        Case Is = -1.0  'Weight by amplitude
                            Weights1(k, kk) = Complex_Number_Class.Abs(myMeasurements(k + mMin - 1))
                            AllWeightsZero = False
                        Case Is = -2.0  'Weight by power
                            Weights1(k, kk) = Complex_Number_Class.Abs(myMeasurements(k + mMin - 1) * myMeasurements(k + mMin - 1))
                            AllWeightsZero = False
                    End Select
                Next kk
            Next k
            'Report zero weights
            If AllWeightsZero Then
                For k As Integer = 1 To Weights1.NRows
                    Weights1(k, 2) = 1.0
                Next k
                If myFirstTime Then MechanismList1.ErrorReport = "Weights were equal to zero! Reset to one."
            End If

            'Solve for the fit on a reduced set of frequencies
            Call LinearFit(p, myMeasurements1, beta1, Weights1)

            'Set p real if we are only fitting real or imaginary parts
            If myPullDownSelection2 = 3 Or myPullDownSelection2 = 4 Then p.Vector(1) = p.VectorRealPart(1)
            If myPullDownSelection2 = 5 Then p.Vector(1) = toComplex(0.0, 1.0) * p.VectorImagPart(1)

            'Solve for the fit on all of the frequencies
            Dim myFullFit As New ComplexMatrix(myRealMatrix0.NRows)
            myFullFit = beta * p

            'Fill in measurements where requested by the user
            For k As Integer = 1 To myRealMatrix0.NRows
                If myRealMatrix0(k, 1) < FStartMeas Or myRealMatrix0(k, 1) > FStopMeas Then
                    Select Case myPullDownSelection2
                        Case 0  'Fit the complex values
                            myRealMatrixResult(k, FitCol) = myFullFit(k).Re
                            myRealMatrixResult(k, FitCol + 1) = myFullFit(k).Im
                        Case 1  'Unwrap and fit the phases.
                            Dim angle As Double = myFullFit(k).Re
                            Dim Fitted As Complex = Abs(myMeasurements(k)) * Exp(toComplex(0.0, angle))
                            myRealMatrixResult(k, FitCol) = Fitted.Re
                            myRealMatrixResult(k, FitCol + 1) = Fitted.Im
                        Case 2  'Unwrap, fit and detrend the phases.
                            Dim angle As Double = myFullFit(k).Re
                            Dim Fitted As Complex = myMeasurements(k) / Exp(toComplex(0.0, angle))
                            myRealMatrixResult(k, FitCol) = Fitted.Re
                            myRealMatrixResult(k, FitCol + 1) = Fitted.Im
                        Case 3  'Fit the real part only, leave the imag part alone
                            myRealMatrixResult(k, FitCol) = myFullFit(k).Re
                        Case 4  'Fit the imaginary part only, leave the real part alone
                            myRealMatrixResult(k, FitCol + 1) = myFullFit(k).Im
                        Case 5  'Fit the imaginary part only to the real part, leave the real part alone
                            myRealMatrixResult(k, FitCol + 1) = myFullFit(k).Im
                    End Select
                End If
            Next k

            'Plot the model and measurements on the same graph.
            If myFirstTime Then

                'Set up the maximum and step size for graphs if choice is obvious.
                Dim XMAx As Double = 0.0, XStep As Double = 0.0
                If myRealMatrixResult(1, 1) < 10.0 Then XMAx = myRealMatrixResult(myRealMatrixResult.NRows, 1)
                If XMAx = 110.0 Then XStep = 10.0

                'Create the magnitude graph
                Dim magPlot As New Plot("Frequency (GHz)", "Magnitude (dB)", "Measurement and fit magnitudes", , XMAx, XStep)
                'Plot Model S11
                Dim Sij As New RealMatrix(myRealMatrixResult.NRows)
                Sij = dB(myRealMatrixResult.Vector(FitCol) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(FitCol + 1))
                magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Fit")
                'Plot Measurement
                Sij = dB(myRealMatrix0.Vector(FitCol) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(FitCol + 1))
                magPlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement")
                magPlot.Show()

                'Create the phase graph
                Dim phasePlot As New Plot("Frequency (GHz)", "Phase (degrees)", "Measurement and fit phases", , XMAx, XStep)
                'Plot Model S11
                Sij = Phase(myRealMatrixResult.Vector(FitCol) + toComplex(0.0, 1.0) * myRealMatrixResult.Vector(FitCol + 1))
                phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Fit")
                'Plot Measurement S11
                Sij = Phase(myRealMatrix0.Vector(FitCol) + toComplex(0.0, 1.0) * myRealMatrix0.Vector(FitCol + 1))
                phasePlot.AddCurve(myRealMatrixResult.Vector(1), Sij, "Measurement")
                phasePlot.Show()

            End If

            myFirstTime = False   'Only do setup once. 

            'That's all folks! 
            Dim ArrayOut(2) As Object
            ArrayOut(0) = myRealMatrixResult
            Dim myMechanismValuesAsParameter As New RealMatrix(p.NRows, 2, ".variables"), myMechanismValuesAsParameter1 As New RealMatrix(p.NRows, 2, ".variables")
            For k As Integer = 1 To p.NRows
                myMechanismValuesAsParameter(k, 1) = k
                myMechanismValuesAsParameter(k, 2) = p(k).Re
                myMechanismValuesAsParameter1(k, 1) = k
                myMechanismValuesAsParameter1(k, 2) = p(k).Im
            Next k
            ArrayOut(1) = myMechanismValuesAsParameter
            ArrayOut(2) = myMechanismValuesAsParameter1
            Return ArrayOut

        End Function

    End Class


    ''' <summary>
    ''' Post processor for calculating g of type N power meters
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_PowerNType

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myNoiseMechanismName As String = ""
        Private myMechanismList2 As MechanismList
        Private myFirstPass As Boolean = True


        'Default MatLab program.
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myMatLab As MLApp.MLApp = Nothing
        Private myMatLabInit As String = ""
        Private myMatLabMain As String = ""
        Private myMatLabSubs As String = ""

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(6) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "MatLab initialization program (.m)"
                myNameList(1) = "MatLab main program (.m)"
                myNameList(2) = "MatLab subroutines (.zip)"
                myNameList(3) = "Adapter scattering parameters (.s2p)"
                myNameList(4) = "eb (.complex)"
                myNameList(5) = "k1 (.complex)"
                myNameList(6) = "Prf (.wnp, .power)"

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(7) As String
                FileExtensions(0) = ".meas"
                FileExtensions(1) = ".complex"
                FileExtensions(2) = ".parameter"
                FileExtensions(3) = ".sumofparameters"
                FileExtensions(4) = ".s2p"
                FileExtensions(5) = ".m"
                FileExtensions(6) = ".zip"
                FileExtensions(7) = ".power"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Prf is .complex in W"
                'PullDownList(1) = "Prf is .complex in mW"
                'PullDownList(2) = "Prf is Agilent voltage-wave .wnp"
                'PullDownList(3) = "Prf is sqrt(mW) .wnp"
                'PullDownList(4) = "Prf is sqrt(W) .wnp"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Use stored MatLab code"
                PullDownList(1) = "Use passed MatLab code"
                PullDownList(2) = "Use simplified VB code"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calculates the correction factor g for the Type N power meter."
                myDescription(2) = "The default frequency list is determined from eb. Here the real parts correspond to the on voltages and the imaginary parts (i.e. 5 columns total)."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the correction factor g of the type N power meter"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim S As RealMatrix : S = MechValues(3).getSParams(MechanismList1)                  'Adapter scattering parameters
            Dim eb As RealMatrix : eb = MechValues(4).getSParams(MechanismList1)
            Dim k1 As RealMatrix : k1 = MechValues(5).getSParams(MechanismList1)
            Dim Prf As RealMatrix : Prf = MechValues(6).getSParams(MechanismList1)
            Dim myOutputMatrix As New RealMatrix(eb.NRows, 3, ".complex")            'Output file with efficiency
            myOutputMatrix.Vector(1) = eb.Vector(1)                                  'Output has the same frequencies as the inputs

            Dim Prf2 As New RealMatrix(Prf.NRows, 3, ".complex")  'Power-meter reading in W
            For kk As Integer = 1 To Prf.NRows '
                If Prf.DataType = ".power" Then 'input is mW, output should be W
                    Prf2(kk, 2) = 0.001 * Prf(kk, 2)
                Else    'Must be a .wnp file
                    'Power-meter file is Agilent voltage-wave amplitude .wnp
                    Prf2(kk, 2) = 0.01 * (Prf(kk, 2) * Prf(kk, 2) + Prf(kk, 3) * Prf(kk, 3))
                End If

                'Select Case myPullDownSelection1
                '    Case 0     'Power-meter file is .complex in W
                '        Prf2(kk, 2) = Math.Sqrt(Prf(kk, 2) * Prf(kk, 2) + Prf(kk, 3) * Prf(kk, 3))
                '    Case 1     'Power-meter file is .complex in mW
                '        Prf2(kk, 2) = 0.001 * Math.Sqrt(Prf(kk, 2) * Prf(kk, 2) + Prf(kk, 3) * Prf(kk, 3))
                '    Case 2     'Power-meter file is Agilent voltage-wave amplitude .wnp
                '        Prf2(kk, 2) = 0.01 * (Prf(kk, 2) * Prf(kk, 2) + Prf(kk, 3) * Prf(kk, 3))
                '    Case 3     'Power-meter file is sqrt(mW) amplitude .wnp
                '        Prf2(kk, 2) = 0.001 * (Prf(kk, 2) * Prf(kk, 2) + Prf(kk, 3) * Prf(kk, 3))
                '    Case 4     'Power-meter file is sqrt(W) amplitude .wnp
                '        Prf2(kk, 2) = (Prf(kk, 2) * Prf(kk, 2) + Prf(kk, 3) * Prf(kk, 3))
                'End Select

                Prf2(kk, 1) = Prf(kk, 1) : Prf2(kk, 3) = 0.0
            Next kk

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1), MatLabDir As String = ""

            If myPullDownSelection3 <= 1 Then   'MatLab solution

                If myFirstPass Then 'Only do this stuff the first time
                    Call MatLabInit(MechanismList1, MechValues, myMatLabInit, myMatLabMain, myMatLabSubs, myPullDownSelection3, myTextBoxContents, myMatLabFileName, myMatLabPath, MatLabDir)
                    'See if we hit an error
                    If MechanismList1.FatalError Then Return ToArray(Dummy)
                    myFirstPass = False
                End If

                'Write out data for MatLab
                S.Write(myMatLabPath + "\AdapterSParams.s2p_binary")
                eb.Write(myMatLabPath + "\eb.complex_binary")
                k1.Write(myMatLabPath + "\k1.complex_binary")
                Prf2.Write(myMatLabPath + "\PrfWatts.complex_binary")

                'Store the parameters to disk for the MatLab routine
                Call StoreParametersForMatLab(MechanismList1, MechValues, myMatLabPath)

                'Run MatLab
                Try
                    'Initialize MatLab
                    If IsNothing(myMatLab) Then 'Make sure we have a copy of MatLab on hand
                        myMatLab = New MLApp.MLApp
                    End If
                    myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                    myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName))   'Run MatLab routine
                Catch ex As Exception
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "MatLab Error: Check license."
                End Try

                'Read in the MatLab results from MATLAB and return them to the MUF in a format that the MUF understands

                'Check that MATLAB actually created the .variables file we are expecting.
                Dim FileName As String = myMatLabPath + "\Eff.complex_binary"
                If My.Computer.FileSystem.FileExists(FileName) Then
                    myOutputMatrix.Read(FileName)    'Read in the file created by MatLab 
                Else
                    MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
                End If

            Else                                'VB solution

                For kk As Integer = 1 To eb.NRows
                    Dim g As Double = 0.5 * (1.0 + 0.5 * (S(kk, 4) * S(kk, 4) + S(kk, 5) * S(kk, 5) + S(kk, 6) * S(kk, 6) + S(kk, 7) * S(kk, 7)))
                    g = g + eb(kk, 2) / (k1(kk, 2) * Prf2(kk, 2))
                    myOutputMatrix(kk, 2) = g
                Next kk

            End If

            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class

    ''' <summary>
    ''' Post processor for calculating the correction factor g for RWG power meters
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_PowerEffRWG

        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myNoiseMechanismName As String = ""
        Private myMechanismList2 As MechanismList
        Private myFirstPass As Boolean = True

        'Default MatLab program.
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myFirst As Boolean = True
        Private myMatLab As MLApp.MLApp = Nothing
        Private myMatLabInit As String = ""
        Private myMatLabMain As String = ""
        Private myMatLabSubs As String = ""

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(7) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "MatLab initialization program (.m)"
                myNameList(1) = "MatLab main program (.m)"
                myNameList(2) = "MatLab subroutines (.zip)"
                myNameList(3) = "VbiasON/OFF VpileON/OFF (.complex)"                       'This parameter puts on as real, off as imaginary
                myNameList(4) = "Reflection coefficient of the short or open (.s1p or .s2p)"
                myNameList(5) = "Reflection coefficient of the power meter (.s1p or .s2p)"
                myNameList(6) = "Power incident on short (.wnp, .power)"
                myNameList(7) = "R bias or k (.parameter)"

                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(8) As String
                FileExtensions(0) = ".meas"
                FileExtensions(1) = ".complex"
                FileExtensions(2) = ".parameter"
                FileExtensions(3) = ".sumofparameters"
                FileExtensions(4) = ".s1p"
                FileExtensions(5) = ".s2p"
                FileExtensions(6) = ".m"
                FileExtensions(7) = ".zip"
                FileExtensions(8) = ".power"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Short and power-meter reflection coefficient on port 1"
                PullDownList(1) = "Short and power-meter reflection coefficient on port 2"
                PullDownList(2) = "Short gamma on port 1, power-meter gamma on port 2"
                PullDownList(3) = "Short gamma on port 2, power-meter gamma on port 1"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                'PullDownList(0) = "Power-meter file is .complex in W"
                'PullDownList(1) = "Power-meter file is .complex in mW"
                'PullDownList(2) = "Power-meter file is Agilent voltage-wave .wnp"
                'PullDownList(3) = "Power-meter file is sqrt(mW) .wnp"
                'PullDownList(4) = "Power-meter file is sqrt(W) .wnp"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get

                'Dim PullDownList(1) As String
                'PullDownList(0) = "Use R bias to calculate k"
                'PullDownList(1) = "Use k from front panel"
                'Return PullDownList

                Dim PullDownList(3) As String
                PullDownList(0) = "Use stored MatLab code"
                PullDownList(1) = "Use passed MatLab code"
                PullDownList(2) = "Simplified VB code, R bias calcuates k"
                PullDownList(3) = "Simplified VB code, k from front panel"
                Return PullDownList

            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor calculates correction factor for RWG."
                myDescription(2) = "The default frequency list is determined from the voltage measurements passed as the first parameter. Here the real parts correspond to the on voltages and the imaginary parts (i.e. 5 columns total)."
                myDescription(4) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the correction factor for RWG"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            Dim Voltages As RealMatrix : Voltages = MechValues(3).getSParams(MechanismList1)    'VbiasON/OFF VpileON/OFF (.complex)
            Dim Sshort As RealMatrix : Sshort = MechValues(4).getSParams(MechanismList1)        'Reflection coefficient of the short or open
            Dim Spm As RealMatrix : Spm = MechValues(5).getSParams(MechanismList1)      'Reflection coefficient of the power meter
            Dim Psh As RealMatrix : Psh = MechValues(6).getSParams(MechanismList1)      'Power incident on short (.complex or .wnp)
            Dim Rbias As Double = MechValues(7).MechanismValue(MechanismList1)          'k or Rbias (.parameter)

            'Power-meter reading in W, reflection coefficients in .s1p
            Dim Gsh As New RealMatrix(Sshort.NRows, 3, ".s1p")
            Dim Gpm As New RealMatrix(Sshort.NRows, 3, ".s1p")
            For kk As Integer = 1 To Psh.NRows


                If Psh.DataType = ".power" Then 'input is mW, output should be W
                    Psh(kk, 2) = 0.001 * Psh(kk, 2)
                Else    'Must be a .wnp file
                    'Power-meter file is Agilent voltage-wave amplitude .wnp
                    Psh(kk, 2) = 0.01 * (Psh(kk, 2) * Psh(kk, 2) + Psh(kk, 3) * Psh(kk, 3))
                End If

                'Select Case myPullDownSelection2
                '    Case 0     'Power-meter file is .complex in W
                '        Psh(kk, 2) = Math.Sqrt(Psh(kk, 2) * Psh(kk, 2) + Psh(kk, 3) * Psh(kk, 3))
                '    Case 1     'Power-meter file is .complex in mW
                '        Psh(kk, 2) = 0.001 * Math.Sqrt(Psh(kk, 2) * Psh(kk, 2) + Psh(kk, 3) * Psh(kk, 3))
                '    Case 2     'Power-meter file is Agilent voltage-wave amplitude .wnp
                '        Psh(kk, 2) = 0.01 * (Psh(kk, 2) * Psh(kk, 2) + Psh(kk, 3) * Psh(kk, 3))
                '    Case 3     'Power-meter file is sqrt(mW) amplitude .wnp
                '        Psh(kk, 2) = 0.001 * (Psh(kk, 2) * Psh(kk, 2) + Psh(kk, 3) * Psh(kk, 3))
                '    Case 4     'Power-meter file is sqrt(W) amplitude .wnp
                '        Psh(kk, 2) = (Psh(kk, 2) * Psh(kk, 2) + Psh(kk, 3) * Psh(kk, 3))
                'End Select

                Psh(kk, 3) = 0.0
                Gsh(kk, 1) = Sshort(kk, 1) : Gsh(kk, 2) = Sshort(kk, 2) : Gsh(kk, 3) = Sshort(kk, 3)
                If myPullDownSelection1 = 1 Or myPullDownSelection1 = 3 Then Gsh(kk, 8) = Sshort(kk, 2) : Gsh(kk, 3) = Sshort(kk, 9)
                Gpm(kk, 1) = Spm(kk, 1) : Gpm(kk, 2) = Spm(kk, 2) : Gpm(kk, 3) = Spm(kk, 3)
                If myPullDownSelection1 = 1 Or myPullDownSelection1 = 2 Then Gpm(kk, 2) = Spm(kk, 8) : Gpm(kk, 3) = Spm(kk, 9)
            Next kk

            Dim myOutputMatrix As New RealMatrix(Voltages.NRows, 3, ".complex")            'Output file with efficiency
            myOutputMatrix.Vector(1) = Voltages.Vector(1)                                  'Output has the same frequencies as the inputs

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1), MatLabDir As String = ""

            If myPullDownSelection3 <= 1 Then   'MatLab solution

                If myFirstPass Then 'Only do this stuff the first time
                    Call MatLabInit(MechanismList1, MechValues, myMatLabInit, myMatLabMain, myMatLabSubs, myPullDownSelection3, myTextBoxContents, myMatLabFileName, myMatLabPath, MatLabDir)
                    'See if we hit an error
                    If MechanismList1.FatalError Then Return ToArray(Dummy)
                    myFirstPass = False
                End If

                'Write out data for MatLab
                Voltages.Write(myMatLabPath + "\Voltages.complex_binary")
                Gsh.Write(myMatLabPath + "\Short_Gamma.s1p_binary")
                Gpm.Write(myMatLabPath + "\PM_Gamma.s1p_binary")
                Psh.Write(myMatLabPath + "\PM_reading_Watts.complex_binary")

                'Store the parameters to disk for the MatLab routine
                Call StoreParametersForMatLab(MechanismList1, MechValues, myMatLabPath)

                'Run MatLab
                Try
                    'Initialize MatLab
                    If IsNothing(myMatLab) Then 'Make sure we have a copy of MatLab on hand
                        myMatLab = New MLApp.MLApp
                    End If
                    myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                    myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName))   'Run MatLab routine
                Catch ex As Exception
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "MatLab Error: Check license."
                End Try

                'Read in the MatLab results from MATLAB and return them to the MUF in a format that the MUF understands

                'Check that MATLAB actually created the .variables file we are expecting.
                Dim FileName As String = myMatLabPath + "\G.complex_binary"
                If My.Computer.FileSystem.FileExists(FileName) Then
                    myOutputMatrix.Read(FileName)    'Read in the file created by MatLab 
                Else
                    MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
                End If

            Else                                'VB solution

                For kk As Integer = 1 To Voltages.NRows
                    Dim Fbias As Double = Voltages(kk, 2) / Voltages(kk, 3)
                    Dim Fpile As Double = Voltages(kk, 4) / Voltages(kk, 5)
                    'Get the k factor
                    Dim k As Double = Rbias
                    If myPullDownSelection3 = 2 Then k = Voltages(kk, 5) * Rbias / (Voltages(kk, 3) * Voltages(kk, 3))
                    Dim PshEff As Double = (Voltages(kk, 4) - Voltages(kk, 5)) / k
                    Dim Gsh2 As Double = Gsh(kk, 2) * Gsh(kk, 2) + Gsh(kk, 3) * Gsh(kk, 3)
                    Dim Gpm2 As Double = Gpm(kk, 2) * Gpm(kk, 2) + Gpm(kk, 3) * Gpm(kk, 3)
                    Dim hsh As Double = (PshEff / Psh(kk, 2)) * (1.0 / (1.0 + Gsh2)) - (1.0 - Gsh2) / (1.0 + Gsh2)
                    myOutputMatrix(kk, 2) = 1.0 + hsh * (1 + Gsh2) / (1 - Gsh2)
                Next kk


            End If



            'That's all folks!
            Return ToArray(myOutputMatrix)

        End Function

    End Class


    ''' <summary>
    ''' Post processor solves Pair-gain problem in Visual Studio without calling MatLab.
    ''' </summary>
    ''' <remarks>Second draft. Takes advantage of repeated measurements to reduce problem size.</remarks>
    <Serializable()> Public Class Post_PairGain_old
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myFirst As Boolean = True
        Private myFirst2 As Boolean = True
        Private NMeasurementSets As Integer = 0     'The number of antenna-pair measurement sets
        Private NFrequencies As Integer = 0         'The number of antenna-pair measurement sets
        Private SParameters() As RealMatrix         'The measured scattering parameters of the antenna pairs
        Private SParametersE() As RealMatrix        'The measured scattering parameters of the antenna pairs with errors
        Private AntennaPositions() As RealMatrix    'The measured positions of the antenna pairs
        Private Weights() As RealMatrix             'The weigths. One for each frequency. Zeros indicate bad data.
        Private mySP1init As RealMatrix = Nothing
        Private mySP2init As RealMatrix = Nothing

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "File or directory with antenna measurements"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(6) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Theta (.parameter)"
                myNameList(1) = "Phi (.parameter)"
                myNameList(2) = "Psi (.parameter)"
                myNameList(3) = "VNA calibration error box (solution.meas, .s4p)"
                myNameList(4) = "Reversible systematic drift due to cable flex [phase/mm] (.parameter)"
                myNameList(5) = "Systematic position correction factor (.parameter)"
                myNameList(6) = "Other systematic errors..."

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(7) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".s4p" : FileExtensions(3) = ".s1p" : FileExtensions(4) = ".s2p"
                FileExtensions(5) = ".sumofparameters" : FileExtensions(6) = ".model" : FileExtensions(7) = ".cascade"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(5) As String
                PullDownList(0) = "Fit Mag/Ang, r only"
                PullDownList(1) = "Fit Mag/Ang, r, theta, phi"
                PullDownList(2) = "Fit Mag/Ang,  r, theta, phi, psi"
                PullDownList(3) = "Fit Mag, r only"
                PullDownList(4) = "Fit Mag, r, theta, phi"
                PullDownList(5) = "Fit Mag, r, theta, phi, psi"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Add scattering-parameter errors"
                PullDownList(1) = "Re-calibrate and add scattering-parameter errors"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor runs calculates the gain of antenna pairs in direction theta and phi with offset orientation of second antenna of psi."
                myDescription(1) = "The default frequency list is determined from the VNA calibration errors, but can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(3) = "Written by Rob Horansky and Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the pair-gain of two antennas"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(1) As String
                OutputNames(0) = "\FitCoef"
                OutputNames(1) = "\PairGain"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                'myConditionLocations(0) = 4
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass all of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                'myConditionNameList(0) = "Phi"
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1)

            If myFirst Then 'Only do this stuff the first time

                'Check to see if we have valid antenna measurements.
                Dim myfiles As New Collection(Of String)    'A collection of the antenna measurement files
                If My.Computer.FileSystem.FileExists(myTextBoxContents) Then    'The user passed a file name

                    If Path.GetExtension(myTextBoxContents) = ".csv" Then
                        NFrequencies = 1         'The number of antenna-pair measurement sets
                        myfiles.Add(myTextBoxContents)
                    Else
                        MechanismList1.FatalError = True
                        MechanismList1.ErrorReport = "Extension of antenna measurement file was not .csv"
                        Return ToArray(Dummy)
                    End If

                ElseIf My.Computer.FileSystem.DirectoryExists(myTextBoxContents) Then   'The user passed a directory

                    Dim files As ReadOnlyCollection(Of String)
                    files = My.Computer.FileSystem.GetFiles(myTextBoxContents, FileIO.SearchOption.SearchTopLevelOnly, "*.csv")
                    If files.Count > 0 Then

                        'count the frequencies
                        NFrequencies = files.Count         'The number of antenna-pair frequencies
                        For Each File As String In files
                            myfiles.Add(File)
                        Next

                    Else
                        MechanismList1.FatalError = True
                        MechanismList1.ErrorReport = "Antenna measurement directory did not have any .csv files in it"
                        Return ToArray(Dummy)
                    End If

                Else

                    MechanismList1.FatalError = True
                    MechanismList1.ErrorReport = "Could not find directory or antenna measurement file " + myTextBoxContents
                    Return ToArray(Dummy)

                End If

                'Check that the frequencies agree. Maybe we could just ensure that the antenna frequencies are a subset of the calibration frequencies?
                If NFrequencies <> MechanismList1.FrequencyList.NRows Then
                    MechanismList1.FatalError = True
                    MechanismList1.ErrorReport = "The number of frequencies in the files and from the front panel do not agree."
                    Return ToArray(Dummy)
                End If

                'Find the number of antenna-pair measurement sets
                NMeasurementSets = 0     'The number of antenna-pair measurement sets
                Dim filename2 As String = myfiles.Item(0)
                Dim fields As String()
                Dim delimiter As String = ","
                Using parser As New TextFieldParser(filename2)
                    parser.SetDelimiters(delimiter)
                    While Not parser.EndOfData
                        ' Read in the fields for the current line
                        fields = parser.ReadFields()
                        ' Add code here to use data in fields variable.
                        If InStr(fields(0), "#") = 0 And fields(0).Length > 0 Then NMeasurementSets = NMeasurementSets + 1
                    End While
                End Using

                'Initialize the measurement data sets
                ReDim SParameters(NMeasurementSets)         'The measured scattering parameters of the antenna pairs
                ReDim SParametersE(NMeasurementSets)        'The measured scattering parameters of the antenna pairs with errors added
                ReDim AntennaPositions(NMeasurementSets)    'The measured positions of the antenna pairs                
                For ms As Integer = 1 To NMeasurementSets   'Loop over the measurement sets
                    SParameters(ms) = New RealMatrix(NFrequencies, 9, ".s2p")         'The measured scattering parameters of the antenna pairs
                    SParametersE(ms) = New RealMatrix(NFrequencies, 9, ".s2p")         'The measured scattering parameters of the antenna pairs
                    AntennaPositions(ms) = New RealMatrix(NFrequencies, 7, ".complex")      'The measured positions of the antenna pairs
                    SParameters(ms).Vector(1) = MechanismList1.FrequencyList          'The measured scattering parameters of the antenna pairs
                    SParametersE(ms).Vector(1) = MechanismList1.FrequencyList          'The measured scattering parameters of the antenna pairs
                    AntennaPositions(ms).Vector(1) = MechanismList1.FrequencyList       'The measured positions of the antenna pairs
                Next ms

                'Read in the antenna data in myfiles, stuff the data into the arrays
                For Each File As String In myfiles
                    Dim FreqIndx As Integer = -1  'Figure out which frequency and measurement set we have
                    Dim ms As Integer = 0
                    Using parser As New TextFieldParser(filename2)
                        parser.SetDelimiters(delimiter)
                        While Not parser.EndOfData

                            ' Read in the fields for the current line
                            fields = parser.ReadFields()

                            ' Add code here to use data in fields variable.

                            If InStr(fields(0), "#FREQ:") > 0 Then  'Found the frequency
                                Dim FreqString As String = Mid(fields(0), 7)
                                Dim Freq As Double = CDbl(FreqString) / 1000000000.0
                                For k As Integer = 1 To NFrequencies
                                    If Math.Abs(Freq - MechanismList1.FrequencyList(k)) < 0.000000001 Then
                                        FreqIndx = k
                                    End If
                                Next k
                            End If

                            If InStr(fields(0), "#") = 0 And fields(0).Length > 0 And FreqIndx > 0 Then     'Insert some data if appropriate.
                                ms += 1                                                                 'Step through the measurement sets, one for each line in the file
                                SParameters(ms)(FreqIndx, 4) = CDblFromText(fields(2))                  'The default measured transmission between the antenna pairs
                                SParameters(ms)(FreqIndx, 5) = CDblFromText(fields(3))
                                SParameters(ms)(FreqIndx, 6) = CDblFromText(fields(2))
                                SParameters(ms)(FreqIndx, 7) = CDblFromText(fields(3))
                                If fields.Length > 34 Then                                              'Use the full measured scattering parameters of the antenna pairs if they are available
                                    SParameters(ms)(FreqIndx, 2) = CDblFromText(fields(34))
                                    SParameters(ms)(FreqIndx, 3) = CDblFromText(fields(35))
                                    SParameters(ms)(FreqIndx, 4) = CDblFromText(fields(36))             'Here we assume S21. Is this really S12? 
                                    SParameters(ms)(FreqIndx, 5) = CDblFromText(fields(37))
                                    SParameters(ms)(FreqIndx, 6) = CDblFromText(fields(38))
                                    SParameters(ms)(FreqIndx, 7) = CDblFromText(fields(40))
                                    SParameters(ms)(FreqIndx, 8) = CDblFromText(fields(41))
                                    SParameters(ms)(FreqIndx, 9) = CDblFromText(fields(42))
                                End If
                                'The measured positions of the antenna pairs
                                AntennaPositions(ms)(FreqIndx, 2) = CDblFromText(fields(22)) / 1000.0   'X (Actual (vs AUT)) in mm, convert to meters
                                AntennaPositions(ms)(FreqIndx, 3) = CDblFromText(fields(23)) / 1000.0   'Y (Actual (vs AUT))
                                AntennaPositions(ms)(FreqIndx, 4) = CDblFromText(fields(24)) / 1000.0   'Z (Actual (vs AUT))
                                AntennaPositions(ms)(FreqIndx, 5) = CDblFromText(fields(25))            'Rx (Actual (vs AUT)) in deg
                                AntennaPositions(ms)(FreqIndx, 6) = CDblFromText(fields(26))            'Ry (Actual (vs AUT))
                                AntennaPositions(ms)(FreqIndx, 7) = CDblFromText(fields(27))            'Rz (Actual (vs AUT))  Is this a change in polarization?
                            End If

                        End While
                    End Using
                Next File

                'Set the weigths to r for now, putting a greater weight on data far away.
                'Put in zeros for bad data. Later we will skip calculations for zero weights.
                ReDim Weights(NFrequencies)         'The weights. Zeros indicate bad data.
                For f As Integer = 1 To NFrequencies
                    Weights(f) = New RealMatrix(NMeasurementSets, 3)
                    For ms As Integer = 1 To NMeasurementSets
                        Weights(f)(ms, 1) = ms
                        'Set the weight to r. If r=0, this is bad data, and so this prevents problems later on.
                        Dim r1 As Double = Math.Sqrt(AntennaPositions(ms)(f, 2) ^ 2 + AntennaPositions(ms)(f, 3) ^ 2 + AntennaPositions(ms)(f, 4) ^ 2)
                        If r1 = 0.0 Then            'Check for bad data.
                            Weights(f)(ms, 2) = 0.0 'Bad data.
                        Else
                            Weights(f)(ms, 2) = r1  'Set the weight to r for now. Later we may do something more sophisticated..
                        End If
                        'Check for zero transmission, another sign of bad data.
                        If (SParameters(ms)(f, 4) = 0.0 And SParameters(ms)(f, 5) = 0.0) Or (SParameters(ms)(f, 6) = 0.0 And SParameters(ms)(f, 7) = 0.0) Then 'Set weights to zero if the transmission is zero.
                            Weights(f)(ms, 2) = 0.0
                        End If
                    Next ms
                Next f

            End If

            'Get front panel information 
            '(0) = "Theta (.parameter)"
            Dim Theta0 As Double = MechValues(0).MechanismValue(MechanismList1)
            '(1) = "Phi (.parameter)"
            Dim Phi0 As Double = MechValues(1).MechanismValue(MechanismList1)
            '(2) = "Psi (.parameter)"
            Dim Psi0 As Double = MechValues(0).MechanismValue(MechanismList1)
            '(4) = "Reversible systematic drift due to cable flex [phase/mm] (.parameter)"
            '(5) = "Systematic position correction factor (.parameter)"
            '(6) = "Other systematic errors..."

            '(3) = "VNA calibration error box (solution.meas, .s4p)"
            'VNA calibration errors (.s4p)
            Dim CalibrationErrors As RealMatrix = MechValues(3).getSParams(MechanismList1)   '4 VNA calibration error box (.s4p)
            'Get SP1 and SP2 from VNA calibration error box
            Dim SP1 As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim SP2 As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim SPT As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            SP1.Vector(1) = CalibrationErrors.Vector(1) : SP2.Vector(1) = CalibrationErrors.Vector(1) : SPT.Vector(1) = CalibrationErrors.Vector(1)
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows
                Dim CalibrationMatrix As ComplexMatrix = CalibrationErrors.SMatrix(k)
                Dim SMatrix As New ComplexMatrix(2, 2)
                'First port 1 error box
                SMatrix(1, 1) = CalibrationMatrix(1, 1)
                SMatrix(2, 1) = CalibrationMatrix(3, 1)
                SMatrix(1, 2) = CalibrationMatrix(1, 3)
                SMatrix(2, 2) = CalibrationMatrix(3, 3)
                SP1.SMatrix(k) = SMatrix
                'Now port 2 error box
                SMatrix(1, 1) = CalibrationMatrix(4, 4)
                SMatrix(2, 1) = CalibrationMatrix(2, 4)
                SMatrix(1, 2) = CalibrationMatrix(4, 2)
                SMatrix(2, 2) = CalibrationMatrix(2, 2)
                SP2.SMatrix(k) = SMatrix
            Next k

            'Save initial values of T(SP1) and T(SP2)
            If myFirst Then
                mySP1init = New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySP1init.Fill(SP1)
                mySP2init = New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySP2init.Fill(SP2)
            End If

            'Calculate SP1=(SP1)^-1 and  SP2=(SP2)^-1
            SP1.Invert() : SP2.Invert()
            'See if user wants to recalibrate
            If myPullDownSelection2 <= 0 Then   'Multiply by initial values of SP1 and SP2 so that we only add errors, and don't recalibrate
                SP1 = SP1.CascadeSParameters(mySP1init) : SP2 = SP2.CascadeSParameters(mySP2init)
            End If

            'Add in errors to the scattering parameters 
            For ms As Integer = 1 To NMeasurementSets
                SPT = SParameters(ms).CascadeSParameters(SP2)
                SParametersE(ms) = SP1.CascadeSParameters(SPT)
            Next ms

            Dim NParams As Integer = 0  'The number of fitting parameters
            Select Case myPullDownSelection1
                Case 0, -1, 3              'PullDownList1(0) = "Fit distance r only"
                    NParams = 4
                Case 1, 4                  'PullDownList1(1) = "Fit distance r, theta, phi"
                    NParams = 8
                Case 2, 5                  'PullDownList1(2) = "Fit distance r, theta, phi, psi"
                    NParams = 10
            End Select

            'Fit
            Dim Fit As New RealMatrix(MechanismList1.FrequencyList.NRows, 1 + 2 * NParams, ".complex")    'Freq, Re(C1), Im(C1), Re(C2), Im(C2), Re(C3), Im(C3), Re(C4), Im(C4)
            'Pair gain
            Dim PairGain As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")   'Pair-gain S-parameters of the two antennas
            Fit.Vector(1) = MechanismList1.FrequencyList : PairGain.Vector(1) = MechanismList1.FrequencyList

            'Fit the pair gain to the data
            Dim p As New ComplexMatrix(NParams) 'A00, A00 A001, A00 A002, A00 A003, A00 A004, A01, A02, A03
            Dim beta As New ComplexMatrix(NMeasurementSets, NParams), S21 As New ComplexMatrix(NMeasurementSets), S21norm As New ComplexMatrix(NMeasurementSets), r_track As New RealMatrix(NMeasurementSets)
            Dim r As Double, Theta As Double, Phi As Double, exp_jk0r_d_r As New Complex, j As New Complex(0.0, 1.0)
            For f As Integer = 1 To NFrequencies    'Loop over the frequencies

                ' Fit (1/r) exp(-j k0 r) (A00 (1 + A001 Theta + A002 Theta^2 + A003 Phi  + A003 Phi^2 ) + A01/r + A02/r^2 + A03/r^3)
                Dim k0 As Double = 2.0 * Math.PI * MechanismList1.FrequencyList(f) / 0.2997925   'In meters k0 = 2 pi f / c
                Dim S11 As New Complex, S22 As New Complex, W As Double = 0.0, r_max As Double = 0.0, r_min As Double = 0.0
                For ms As Integer = 1 To NMeasurementSets

                    'Check to make sure this f and ms correspond to good data first. Don't do anything if the data is bad.
                    If Weights(f)(ms, 2) > 0.0 Then

                        'Get the basic position and transmission data
                        r = Math.Sqrt(AntennaPositions(ms)(f, 2) ^ 2 + AntennaPositions(ms)(f, 3) ^ 2 + AntennaPositions(ms)(f, 4) ^ 2) 'in meters
                        r_track(ms) = r
                        If r > r_max Then r_max = r 'Keep track of smallest and largest r for plotting purposes
                        If ms = 1 Then r_min = r
                        If r < r_min Then r_min = r
                        exp_jk0r_d_r = Complex_Number_Class.Exp(-j * k0 * r) / r
                        S21(ms) = toComplex(0.5 * (SParametersE(ms)(f, 4) + SParametersE(ms)(f, 6)), 0.5 * (SParametersE(ms)(f, 5) + SParametersE(ms)(f, 7)))

                        'Fit only the absolute value if user requests it
                        If myPullDownSelection1 > 2 Then
                            exp_jk0r_d_r = Abs(exp_jk0r_d_r)
                            S21(ms) = Abs(S21(ms))
                        End If

                        S21norm(ms) = S21(ms) / exp_jk0r_d_r
                        Theta = Math.Asin(AntennaPositions(ms)(f, 2) / r)
                        Phi = Math.Asin(AntennaPositions(ms)(f, 3) / r)

                        'Average the reflection coefficients
                        S11 = S11 + toComplex(SParametersE(ms)(f, 2), SParametersE(ms)(f, 3)) * r   'Average the reflection coefficients
                        S22 = S22 + toComplex(SParametersE(ms)(f, 8), SParametersE(ms)(f, 9)) * r   'Average the reflection coefficients
                        W = W + r

                        'Set up the least-squares fit
                        Select Case myPullDownSelection1
                            Case 0, -1, 3              'PullDownList1(0) = "Fit distance r only"
                                beta(ms, 1) = toComplex(1.0, 0.0)               'A00
                                beta(ms, 2) = toComplex(1.0 / r, 0.0)           'A01
                                beta(ms, 3) = toComplex(1.0 / (r ^ 2), 0.0)     'A02
                                beta(ms, 4) = toComplex(1.0 / (r ^ 3), 0.0)     'A03
                            Case 1, 4                  'PullDownList1(1) = "Fit distance r, theta, phi"
                                beta(ms, 1) = toComplex(1.0, 0.0)               'A00
                                beta(ms, 2) = toComplex(Theta, 0.0)             'A00 A001
                                beta(ms, 3) = toComplex(Theta * Theta, 0.0)     'A00 A002
                                beta(ms, 4) = toComplex(Phi, 0.0)               'A00 A003
                                beta(ms, 5) = toComplex(Phi * Phi, 0.0)         'A00 A004
                                beta(ms, 6) = toComplex(1.0 / r, 0.0)           'A01
                                beta(ms, 7) = toComplex(1.0 / (r ^ 2), 0.0)     'A02
                                beta(ms, 8) = toComplex(1.0 / (r ^ 3), 0.0)     'A03
                            Case 2, 5                  'PullDownList1(2) = "Fit distance r, theta, phi, psi"
                        End Select

                    End If
                Next ms

                'Solve for the fit on a reduced set of frequencies
                Call LinearFit(p, S21norm, beta, Weights(f))

                'The fit
                For k As Integer = 1 To p.NRows
                    Fit(f, 2 * k) = p(k).Re
                    Fit(f, 2 * k + 1) = p(k).Im
                Next k

                'The pair gain as an S-parameter matrix for use in 3-antenna method
                'Add in the measured reflection coefficients from a weighted average of S11 and S22 emphasizing the farthest points
                PairGain(f, 2) = S11.Re / W : PairGain(f, 3) = S11.Im / W : PairGain(f, 8) = S22.Re / W : PairGain(f, 9) = S22.Im / W
                'Hi Rob, We probably won't be able to use a Taylor-series expansion here. So you will probably want to look into spherical harmonics and so forth. Dylan
                ' Fit (1/r) exp(-j k0 r) (A00 (1 + A001 Theta + A002 Theta^2 + A003 Phi  + A003 Phi^2 ) + A01/r + A02/r^2 + A03/r^3)
                ' Pair Gain =             A00 (1 + A001 Theta + A002 Theta^2 + A003 Phi  + A003 Phi^2 )  ?????
                Dim PG As New Complex
                Select Case myPullDownSelection1
                    Case 0, -1, 3              'PullDownList1(0) = "Fit distance r only"
                        PG = p(1)
                    Case 1, 4                  'PullDownList1(1) = "Fit distance r, theta, phi"
                        PG = p(1) + p(2) * Theta0 + p(3) * Theta0 * Theta0 + p(4) * Phi0 + p(5) * Phi0 * Phi0
                    Case 2, 5                  'PullDownList1(2) = "Fit distance r, theta, phi, psi"
                End Select
                PairGain(f, 4) = PG.Re : PairGain(f, 5) = PG.Im : PairGain(f, 6) = PG.Re : PairGain(f, 7) = PG.Im 'Transmission term from fit.

                'Generate plots from r = 0 to r_max of the pair gain and the measured transmission
                If myFirst Then

                    'Plot |S21(ms)| vs r_track(ms) and phase S21(ms)
                    Dim Plot As New Plot("r (meters)", "Magnitude pair gain (dB)", "Pair gain (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim Plot1 As New Plot("r (meters)", "Phase pair gain (degrees)", "Pair gain (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim Plot2 As New Plot("r (meters)", "Differences in pair gain", "Pair gain (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim MagS21 As New RealMatrix(NMeasurementSets), PhaseS21 As New RealMatrix(NMeasurementSets)
                    Dim DifMagS21 As New RealMatrix(NMeasurementSets), DifPhaseS21 As New RealMatrix(NMeasurementSets)
                    For ms As Integer = 1 To NMeasurementSets
                        MagS21(ms) = 20.0 * Math.Log10(Abs(S21(ms)))
                        PhaseS21(ms) = Phase(S21(ms))
                        Dim C As New Complex : C = getFit(r_track(ms), Theta0, Phi0, Psi0, k0, p)
                        DifMagS21(ms) = 20.0 * Math.Log10(Abs(S21(ms) / C))
                        DifPhaseS21(ms) = Phase(S21(ms) / C)
                    Next ms
                    Plot.AddCurve(r_track, MagS21, "Measurements")
                    Plot1.AddCurve(r_track, PhaseS21, "Measurements")
                    Plot2.AddCurve(r_track, DifMagS21, "Magnitude (dB)")
                    Plot2.AddCurve(r_track, DifPhaseS21, "Phase (degrees)")
                    Dim MagFit As New RealMatrix(10000), PhaseFit As New RealMatrix(10000), rFit As New RealMatrix(10000)
                    For k As Integer = 1 To 10000
                        rFit(k) = r_min + (r_max - r_min) * CDbl(k - 1) / 9999.0
                        Dim C As New Complex : C = getFit(rFit(k), Theta0, Phi0, Psi0, k0, p)
                        MagFit(k) = 20.0 * Math.Log10(Abs(C))
                        PhaseFit(k) = Phase(C)
                    Next k
                    Plot.AddCurve(rFit, MagFit, "Fit")
                    Plot1.AddCurve(rFit, PhaseFit, "Fit")
                    Plot.Show() : Plot1.Show() : Plot2.Show()

                End If

            Next f

            Dim ReturnResults(1) As Object
            ReturnResults(0) = Fit
            ReturnResults(1) = PairGain
            myFirst = False

            Return ReturnResults    'Return the files created by MatLab to the MUF

        End Function

        ''' <summary>
        ''' Calculate the fit to the pair gain
        ''' </summary>
        ''' <param name="r">Distance between the antennas in meters</param>
        ''' <param name="Theta0"></param>
        ''' <param name="Phi0"></param>
        ''' <param name="Psi0"></param>
        ''' <param name="k0"></param>
        ''' <param name="p"></param>
        ''' <returns>The complex fit at (r,Theta0,Phi0,Psi0) to the pair gain from the coefficients in p</returns>
        ''' <remarks></remarks>
        Private Function getFit(ByVal r As Double, ByVal Theta0 As Double, ByVal Phi0 As Double, ByVal Psi0 As Double, ByVal k0 As Double, ByRef p As ComplexMatrix) As Complex
            Dim C As New Complex(0.0, 0.0), exp_jk0r As New Complex
            exp_jk0r = Exp(toComplex(0.0, -k0 * r)) / r
            Select Case myPullDownSelection1
                Case 0, -1, 3              'PullDownList1(0) = "Fit distance r only"
                    C = p(1) + (p(2) / r) + (p(3) / (r ^ 2)) + (p(4) / (r ^ 3))
                Case 1, 4                  'PullDownList1(1) = "Fit distance r, theta, phi"
                    C = p(1) + p(2) * Theta0 + p(3) * Theta0 * Theta0 + p(4) * Phi0 + p(5) * Phi0 * Phi0 + p(6) / r + p(7) / (r ^ 2) + p(8) / (r ^ 3)
                Case 2, 5                  'PullDownList1(2) = "Fit distance r, theta, phi, psi"
            End Select
            C = C * exp_jk0r
            Return C
        End Function

        ''' <summary>
        ''' Check for bad data from the antenna files before converting. 
        ''' </summary>
        ''' <param name="Text">Text version of the number.</param>
        ''' <returns>Number if valid, 0.0 if data is bad.</returns>
        ''' <remarks></remarks>
        Private Function CDblFromText(ByVal Text As String) As Double
            Dim Dbl As Double = 0.0
            If Text.Length > 0 Then
                Dbl = CDbl(Text)
            End If
            Return Dbl
        End Function

    End Class

    ''' <summary>
    ''' Post processor solves Pair-gain problem in Visual Studio without calling MatLab.
    ''' </summary>
    ''' <remarks>Second draft. Takes advantage of repeated measurements to reduce problem size.</remarks>
    <Serializable()> Public Class Post_PairGain
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myFirst As Boolean = True
        Private myFirst2 As Boolean = True
        Private NMeasurementSets As Integer = 0     'The number of antenna-pair measurement sets
        Private NFrequencies As Integer = 0         'The number of antenna-pair frequencies
        Private SParameters() As RealMatrix         'The measured scattering parameters of the antenna pairs
        Private SParametersE() As RealMatrix        'The measured scattering parameters of the antenna pairs with errors
        Private AntennaPositions() As RealMatrix    'The measured positions of the antenna pairs
        Private Weights() As RealMatrix             'The weigths. One for each frequency. Zeros indicate bad data.
        Private mySP1init As RealMatrix = Nothing
        Private mySP2init As RealMatrix = Nothing

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "File or directory with antenna measurements"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(14) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Theta x AUT pointing error [deg] (.parameter)"
                myNameList(1) = "Theta y AUT pointing error [deg] (.parameter)"
                myNameList(2) = "Theta x Probe pointing error [deg] (.parameter)"
                myNameList(3) = "Theta y Probe pointing error [deg] (.parameter)"
                myNameList(4) = "Polarization angle error AUT [deg] (.parameter)"
                myNameList(5) = "Polarization angle error Probe [deg] (.parameter)"
                myNameList(6) = "VNA calibration error box (solution.meas, .s4p)"
                myNameList(7) = "Reversible systematic phase error due to cable flex [radians/m] (.parameter)"
                myNameList(8) = "AUT 3dB beamwidth in Rx [deg] (.parameter)"
                myNameList(9) = "AUT 3dB beamwidth in Ry [deg] (.parameter)"
                myNameList(10) = "Probe 3dB beamwidth in Rx [deg] (.parameter)"
                myNameList(11) = "Probe 3dB beamwidth in Ry [deg] (.parameter)"
                myNameList(12) = "Lower limit on distance [m] (.parameter)"
                myNameList(13) = "Upper limit on distance [m] (.parameter)"
                myNameList(14) = "Power on r^N for weighting linear solve [unitless] (.parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(7) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".s4p" : FileExtensions(3) = ".s1p" : FileExtensions(4) = ".s2p"
                FileExtensions(5) = ".sumofparameters" : FileExtensions(6) = ".model" : FileExtensions(7) = ".cascade"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(16) As String
                PullDownList(0) = "Single-term Mag/Ang fit"
                PullDownList(1) = "Two-term Mag/Ang fit"
                PullDownList(2) = "Three-term Mag/Ang fit"
                PullDownList(3) = "Four-term Mag/Ang fit"
                PullDownList(4) = "Five-term Mag/Ang fit"
                PullDownList(5) = "Six-term Mag/Ang fit"
                PullDownList(6) = "Single-term power fit"
                PullDownList(7) = "Two-term power fit"
                PullDownList(8) = "Three-term power fit"
                PullDownList(9) = "Four-term power fit"
                PullDownList(10) = "Five-term power fit"
                PullDownList(11) = "Six-term power fit"
                PullDownList(12) = "Seven-term power fit"
                PullDownList(13) = "Eight-term power fit"
                PullDownList(14) = "Nine-term power fit"
                PullDownList(15) = "Ten-term power fit"
                PullDownList(16) = "Eleven-term power fit"

                Return PullDownList
            End Get
        End Property
        Dim Magangcut As Integer = 5
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Add scattering-parameter errors"
                PullDownList(1) = "Re-calibrate and add scattering-parameter errors"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Least-squares fit, no phase center"
                PullDownList(1) = "Least-squares fit, with phase center search"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        ''' 

        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(12) As String
                myDescription(0) = "This post processor calculates the pair gain of two antennas: AUT and Probe.  The AUT is stationary, the probe is on the CROMMA robotic arm."
                myDescription(1) = "The input data is S21 vs distance in the z direction, where positive z is down the AUT line of sight."
                myDescription(2) = "The probe antenna is rotated around the x-axis 180 deg to face the AUT.  Corrections for pointing errors are included"
                myDescription(3) = "The default frequency list is determined from the VNA calibration errors, but can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(4) = "The pointing errors are any known offsets to the aligned antenna direction around the x and y axes."
                myDescription(5) = "Polarization error for each antenna is any offset in angle around the z-axis"
                myDescription(6) = "VNA calibration error box is a standared input from the MUF."
                myDescription(7) = "Error due to cable flex is experimentally found effects on phase from cable manipulation."
                myDescription(8) = "The 3dB beamwidths of the AUT and probe may come from the antenna manufacturer."
                myDescription(9) = "After looking at the linearity of the phase, choose upper and lower distances to use for fitting.  Values of 0 will use all the data."
                myDescription(10) = "r^N weighting adjusts the fits to emphasize data at bigger or smaller values of r.  To match the normalization in the old Fortran code,"
                myDescription(11) = "use N=1 for signal, and N=2 for power fits.  Choosing N=0, gives all the raw data equal weight, and N<0 will weight the close data more."
                myDescription(12) = "Written by Rob Horansky, Ben Jamroz, and Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the pair-gain of two antennas"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(2) As String
                OutputNames(0) = "\FitCoef"
                OutputNames(1) = "\PairGain"
                OutputNames(2) = "\PairPhaseCenter"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                'myConditionLocations(0) = 4
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass all of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                'myConditionNameList(0) = "Phi"
                Return myConditionNameList
            End Get
        End Property

        Private Function chooseX4(ByVal x1 As Double, ByVal x2 As Double, ByVal x3 As Double) As Double
            Dim x4 As Double
            If (x3 - x2) > (x2 - x1) Then
                x4 = x1 + (x3 - x2)
            Else
                x4 = x3 - (x2 - x1)
            End If
            Return x4
        End Function

        Private Sub updateXVals(ByRef x1 As Double, ByRef x2 As Double, ByRef x3 As Double, ByRef x4 As Double, ByRef fx2 As Double, ByRef fx4 As Double)
            If (x4 > x2) Then
                If (fx4 < fx2) Then
                    '# x2, x4, x3
                    x1 = x2
                    x2 = x4
                    x3 = x3
                    fx2 = fx4
                Else      '# fx4 > fx2
                    '# x1, x2, x4
                    x1 = x1
                    x2 = x2
                    x3 = x4
                    fx2 = fx2
                End If
            Else
                If (fx4 < fx2) Then
                    '# x1, x4, x2
                    x1 = x1
                    x3 = x2
                    x2 = x4
                    fx2 = fx4
                Else      '# fx4 > fx2
                    '# x4, x2, x3
                    x1 = x4
                    x2 = x2
                    x3 = x3
                    fx2 = fx2
                End If
            End If
        End Sub

        Public Function CalcResidualL2(ByVal NMeasurementSets As Integer, ByRef r_track As RealMatrix, ByVal r_offset As Double, ByVal k0 As Double,
                                ByRef q As ComplexMatrix, ByRef S21 As ComplexMatrix, ByRef S21fac As ComplexMatrix, ByRef InWeights As RealMatrix) As Double

            Dim TotRes As Double = 0
            For ms As Integer = 1 To NMeasurementSets
                Dim term As New Complex(0.0, 0.0)
                For subindex As Integer = 1 To q.NRows
                    term = term + q(subindex) * toComplex(1.0 / ((r_track(ms) - r_offset) ^ (subindex - 1)), 0.0)
                Next subindex
                term = term * InWeights(ms, 2)
                TotRes = TotRes + Abs(S21fac(ms) * term - S21(ms)) ^ 2
            Next ms
            Return TotRes
        End Function

        Public Sub SeriesFitWithOffsetR(ByRef InWeights As RealMatrix, ByVal NMeasurementSets As Int32, ByVal paramIndex As Integer, ByVal freqIndex As Integer,
                                        ByVal r_min As Double, ByVal r_max As Double, ByVal dr As Double, ByRef q As ComplexMatrix,
                                        ByRef r_track As RealMatrix, ByVal k0 As Double, ByRef r_offset As Double,
                                        ByRef S11 As Complex, ByRef S21 As ComplexMatrix, ByRef S22 As Complex,
                                        ByVal Theta_x_AUT As Double, ByVal Theta_y_AUT As Double,
                                        ByVal PolarizationAngleAUT As Double, ByVal PolarizationAngleProbe As Double,
                                        ByVal BeamWidth_AUT_Rx As Double, ByVal BeamWidth_AUT_Ry As Double,
                                        ByVal BeamWidth_probe_Rx As Double, ByVal BeamWidth_probe_Ry As Double,
                                        ByVal Cable_phase_per_m As Double, ByRef W As Double,
                                        ByVal maxNumits As Int32, ByRef Residual As Double, ByRef S21fac As ComplexMatrix,
                                        ByRef sortIndicesGated As Integer())

            Dim phi As Double
            phi = (1.0 + Math.Sqrt(5)) / 2.0

            Dim apb, a, b As Double
            Dim x1 As Double = r_min
            Dim x2 As Double
            Dim x3 As Double = r_max
            apb = (x3 - x1)
            b = apb * phi / (1.0 + phi)
            a = apb - b
            x2 = x1 + a

            Dim fx2 As Double
            r_offset = x2
            calcRDependentValues(NMeasurementSets, InWeights, r_track, r_offset, freqIndex, r_min, r_max, k0,
                  S11, S21, S22,
                  Theta_x_AUT, Theta_y_AUT, PolarizationAngleAUT, PolarizationAngleProbe,
                  BeamWidth_AUT_Rx, BeamWidth_AUT_Ry, BeamWidth_probe_Rx, BeamWidth_probe_Ry,
                  Cable_phase_per_m, W, S21fac, sortIndicesGated)

            SeriesFit(InWeights, r_track, NMeasurementSets, paramIndex, freqIndex, r_offset, q, S21, S21fac)
            fx2 = CalcResidualL2(NMeasurementSets, r_track, r_offset, k0, q, S21, S21fac, InWeights)
            If x1 = x3 Then
                Return
            End If

            Dim x4, fx4 As Double
            Dim numIts As Int32 = 0
            While ((x3 - x1) / 2.0 > dr) And numIts < maxNumits
                numIts += 1
                x4 = chooseX4(x1, x2, x3)
                'fx4 = f(x4)

                r_offset = x4
                calcRDependentValues(NMeasurementSets, InWeights, r_track, r_offset, freqIndex, r_min, r_max, k0,
                  S11, S21, S22,
                  Theta_x_AUT, Theta_y_AUT, PolarizationAngleAUT, PolarizationAngleProbe,
                  BeamWidth_AUT_Rx, BeamWidth_AUT_Ry, BeamWidth_probe_Rx, BeamWidth_probe_Ry,
                  Cable_phase_per_m, W, S21fac, sortIndicesGated)

                SeriesFit(InWeights, r_track, NMeasurementSets, paramIndex, freqIndex, r_offset, q, S21, S21fac)
                fx4 = CalcResidualL2(NMeasurementSets, r_track, r_offset, k0, q, S21, S21fac, InWeights)

                updateXVals(x1, x2, x3, x4, fx2, fx4)

            End While
            r_offset = (x3 + x1) / 2.0
            calcRDependentValues(NMeasurementSets, InWeights, r_track, r_offset, freqIndex, r_min, r_max, k0,
                  S11, S21, S22,
                  Theta_x_AUT, Theta_y_AUT, PolarizationAngleAUT, PolarizationAngleProbe,
                  BeamWidth_AUT_Rx, BeamWidth_AUT_Ry, BeamWidth_probe_Rx, BeamWidth_probe_Ry,
                  Cable_phase_per_m, W, S21fac, sortIndicesGated)

            SeriesFit(InWeights, r_track, NMeasurementSets, paramIndex, freqIndex, r_offset, q, S21, S21fac)
            Residual = CalcResidualL2(NMeasurementSets, r_track, r_offset, k0, q, S21, S21fac, InWeights)
        End Sub

        Public Sub SeriesFit(ByRef InWeights As RealMatrix, ByRef r_track As RealMatrix, ByVal NMeasurementSets As Int32,
                             ByVal paramIndex As Int32, ByVal freqIndex As Int32, ByVal r_offset As Double, ByRef q As ComplexMatrix,
                             ByRef S21 As ComplexMatrix, ByRef S21fac As ComplexMatrix)


            Dim fitWeights As New RealMatrix(NMeasurementSets, 3)
            Dim fitS21 As New ComplexMatrix(NMeasurementSets)
            Dim fitS21fac As New ComplexMatrix(NMeasurementSets)
            If myPullDownSelection1 > Magangcut Then
                For ms As Integer = 1 To NMeasurementSets
                    fitWeights(ms, 1) = InWeights(ms, 1)
                    fitWeights(ms, 2) = InWeights(ms, 2)
                    fitS21(ms) = Abs(S21(ms)) ^ 2
                    fitS21fac(ms) = Abs(S21fac(ms)) ^ 2
                Next ms
            Else
                fitWeights = InWeights.Clone()
                fitS21 = S21.Clone()
                fitS21fac = S21fac.Clone()
            End If
            Dim beta As New ComplexMatrix(NMeasurementSets, paramIndex) ' The 1/r terms
            For subindex As Integer = 1 To paramIndex
                For ms As Integer = 1 To NMeasurementSets
                    beta(ms, subindex) = fitS21fac(ms) * toComplex(1.0 / ((r_track(ms) - r_offset) ^ (subindex - 1)), 0.0)
                Next ms
            Next subindex
            Call LinearFit(q, fitS21, beta, fitWeights)
        End Sub

        Public Sub calcRDependentValues(ByVal NMeasurementSets As Int32, ByRef InWeights As RealMatrix, ByRef r_track As RealMatrix, ByVal r_offset As Double,
                            ByVal f As Integer, ByRef r_min As Double, ByRef r_max As Double, ByVal k0 As Double,
                            ByRef S11 As Complex, ByRef S21 As ComplexMatrix, ByRef S22 As Complex,
                            ByVal Theta_x_AUT As Double, ByVal Theta_y_AUT As Double,
                            ByVal PolarizationAngleAUT As Double, ByVal PolarizationAngleProbe As Double,
                            ByVal BeamWidth_AUT_Rx As Double, ByVal BeamWidth_AUT_Ry As Double,
                            ByVal BeamWidth_probe_Rx As Double, ByVal BeamWidth_probe_Ry As Double,
                            ByVal Cable_phase_per_m As Double,
                            ByRef W As Double, ByRef S21fac As ComplexMatrix, ByRef sortIndicesGated As Integer())
            Dim r As Double
            Dim j As New Complex(0.0, 1.0)
            Dim exp_jk0r_d_r As Complex_Number_Class.Complex

            Dim Theta_x As Double, Theta_y As Double, Theta_z As Double, ThetaError_x_AUT As Double, ThetaError_y_AUT As Double, ThetaError_x_probe As Double, ThetaError_y_probe As Double
            Dim ms As Integer

            S11 = 0
            S22 = 0
            W = 0
            For msInd As Integer = 1 To NMeasurementSets
                ms = sortIndicesGated(msInd)
                'Check to make sure this f and ms correspond to good data first. Don't do anything if the data is bad.
                If InWeights(msInd, 2) > 0.0 Then

                    'Get the basic position and transmission data
                    r = Math.Sqrt(AntennaPositions(ms)(f, 2) ^ 2 + AntennaPositions(ms)(f, 3) ^ 2 + AntennaPositions(ms)(f, 4) ^ 2) 'in meters

                    r = r - r_offset
                    exp_jk0r_d_r = Complex_Number_Class.Exp(-j * k0 * r) / r

                    'Calculate the angular offets from the antenna axis
                    Theta_x = -Math.Asin(AntennaPositions(ms)(f, 3) / r) 'angular position of probe around x-axis (radians)
                    Theta_y = Math.Asin(AntennaPositions(ms)(f, 2) / r) 'angular position of probe around y-axis (radians)
                    'ThetaError_x_AUT = angular position of probe (radians)-rotation of AUT (front panel in deg)
                    ThetaError_x_AUT = Theta_x - (Theta_x_AUT * Math.PI / 180) 'Convert antenna angles to radians
                    'Thetaerror_y_AUT =  angle of AUT(front panel in deg) - angular position of proble(radians)
                    ThetaError_y_AUT = (Theta_y_AUT * Math.PI / 180) - Theta_y
                    'ThetaError_x_probe = x rotation of probe (deg) - 180 - angular probe position (radians)
                    If AntennaPositions(ms)(f, 5) >= 0 Then
                        ThetaError_x_probe = ((AntennaPositions(ms)(f, 5) - 180) * Math.PI / 180) - Theta_x
                    Else
                        ThetaError_x_probe = ((AntennaPositions(ms)(f, 5) + 180) * Math.PI / 180) - Theta_x
                    End If
                    'ThetaError_y_proble = angular position of probe - rotation of probe
                    ThetaError_y_probe = (AntennaPositions(ms)(f, 6) * Math.PI / 180) - Theta_y
                    'Theta_z is the polarization offset between the AUT and probe
                    If AntennaPositions(ms)(f, 7) >= 0 Then
                        Theta_z = PolarizationAngleAUT * Math.PI / 180 + ((AntennaPositions(ms)(f, 7) - 180) * Math.PI / 180) + PolarizationAngleProbe * Math.PI / 180
                    Else
                        Theta_z = PolarizationAngleAUT * Math.PI / 180 + ((AntennaPositions(ms)(f, 7) + 180) * Math.PI / 180) + PolarizationAngleProbe * Math.PI / 180
                    End If

                    'Find the loss in power due to the angular offet
                    Dim gaussnorm As Double = -1.0 / (4.0 * Math.Log(0.5))
                    Dim Atten_x As Double = (Math.Exp(-(ThetaError_x_AUT ^ 2) / (gaussnorm * (BeamWidth_AUT_Rx * Math.PI / 180) ^ 2))) * (Math.Exp(-ThetaError_x_probe ^ 2 / (gaussnorm * (BeamWidth_probe_Rx * Math.PI / 180) ^ 2)))
                    Dim Atten_y As Double = (Math.Exp(-(ThetaError_y_AUT ^ 2) / (gaussnorm * (BeamWidth_AUT_Ry * Math.PI / 180) ^ 2))) * (Math.Exp(-ThetaError_y_probe ^ 2 / (gaussnorm * (BeamWidth_probe_Ry * Math.PI / 180) ^ 2)))
                    'Find the loss due to polarization error in antennas
                    Dim Pol_loss As Double = Math.Cos(Theta_z)
                    'Find phase change due to cable flex

                    Dim Cable_phase_error As Double = r * Cable_phase_per_m
                    Dim Cable_error As New Complex(Math.Cos(Cable_phase_error), Math.Sin(Cable_phase_error))

                    S21fac(msInd) = (exp_jk0r_d_r * Pol_loss * Math.Sqrt(Atten_x * Atten_y)) / (Cable_error)

                    'Average the reflection coefficients
                    S11 = S11 + toComplex(SParametersE(ms)(f, 6), SParametersE(ms)(f, 7)) * r   'Average the reflection coefficients
                    S22 = S22 + toComplex(SParametersE(ms)(f, 8), SParametersE(ms)(f, 9)) * r   'Average the reflection coefficients
                    W = W + r

                End If
            Next msInd
        End Sub

        Public Sub setupRAndS21(ByVal NMeasurementSets As Int32, ByRef InWeights As RealMatrix, ByRef r_track As RealMatrix,
                          ByVal f As Integer, ByRef r_min As Double, ByRef r_max As Double,
                          ByRef S21 As ComplexMatrix)
            Dim r As Double

            For ms As Integer = 1 To NMeasurementSets

                'Check to make sure this f and ms correspond to good data first. Don't do anything if the data is bad.
                If InWeights(ms, 2) > 0.0 Then

                    'Get the basic position and transmission data
                    r = Math.Sqrt(AntennaPositions(ms)(f, 2) ^ 2 + AntennaPositions(ms)(f, 3) ^ 2 + AntennaPositions(ms)(f, 4) ^ 2) 'in meters
                    r_track(ms) = r

                    If ms = 1 Then
                        r_min = r
                        r_max = r
                    End If
                    If r > r_max Then r_max = r 'Keep track of smallest and largest r for plotting purposes
                    If r < r_min Then r_min = r
                    S21(ms) = toComplex(0.5 * (SParametersE(ms)(f, 2) + SParametersE(ms)(f, 4)), 0.5 * (SParametersE(ms)(f, 3) + SParametersE(ms)(f, 5)))

                End If
            Next ms
        End Sub
        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1)

            If myFirst Then 'Only do this stuff the first time

                'Check to see if we have valid antenna measurements.
                Dim myfiles As New Collection(Of String)    'A collection of the antenna measurement files
                If My.Computer.FileSystem.FileExists(myTextBoxContents) Then    'The user passed a file name

                    If Path.GetExtension(myTextBoxContents) = ".csv" Then
                        NFrequencies = 1         'The number of antenna-pair measurement sets
                        myfiles.Add(myTextBoxContents)
                    Else
                        MechanismList1.FatalError = True
                        MechanismList1.ErrorReport = "Extension of antenna measurement file was not .csv"
                        Return ToArray(Dummy)
                    End If

                ElseIf My.Computer.FileSystem.DirectoryExists(myTextBoxContents) Then   'The user passed a directory

                    Dim files As ReadOnlyCollection(Of String)
                    files = My.Computer.FileSystem.GetFiles(myTextBoxContents, FileIO.SearchOption.SearchTopLevelOnly, "*.csv")
                    If files.Count > 0 Then

                        'count the frequencies
                        NFrequencies = files.Count         'The number of antenna-pair frequencies
                        For Each File As String In files
                            myfiles.Add(File)
                        Next

                    Else
                        MechanismList1.FatalError = True
                        MechanismList1.ErrorReport = "Antenna measurement directory did not have any .csv files in it"
                        Return ToArray(Dummy)
                    End If

                Else

                    MechanismList1.FatalError = True
                    MechanismList1.ErrorReport = "Could not find directory or antenna measurement file " + myTextBoxContents
                    Return ToArray(Dummy)

                End If

                'Check that the frequencies agree. Maybe we could just ensure that the antenna frequencies are a subset of the calibration frequencies?
                If NFrequencies <> MechanismList1.FrequencyList.NRows Then
                    MechanismList1.FatalError = True
                    MechanismList1.ErrorReport = "The number of frequencies in the files and from the front panel do not agree."
                    Return ToArray(Dummy)
                End If

                'Find the number of antenna-pair measurement sets
                NMeasurementSets = 0     'The number of antenna-pair measurement sets
                Dim filename2 As String = myfiles.Item(0)
                Dim fields As String()
                Dim delimiter As String = ","
                Using parser As New TextFieldParser(filename2)
                    parser.HasFieldsEnclosedInQuotes = False
                    parser.SetDelimiters(delimiter)
                    While Not parser.EndOfData
                        ' Read in the fields for the current line
                        fields = parser.ReadFields()
                        ' Add code here to use data in fields variable.
                        If InStr(fields(0), "#") = 0 And fields(0).Length > 0 Then NMeasurementSets = NMeasurementSets + 1
                    End While
                End Using

                'Initialize the measurement data sets
                ReDim SParameters(NMeasurementSets)         'The measured scattering parameters of the antenna pairs
                ReDim SParametersE(NMeasurementSets)        'The measured scattering parameters of the antenna pairs with errors added
                ReDim AntennaPositions(NMeasurementSets)    'The measured positions of the antenna pairs                
                For ms As Integer = 1 To NMeasurementSets   'Loop over the measurement sets
                    SParameters(ms) = New RealMatrix(NFrequencies, 9, ".s2p")         'The measured scattering parameters of the antenna pairs
                    SParametersE(ms) = New RealMatrix(NFrequencies, 9, ".s2p")         'The measured scattering parameters of the antenna pairs
                    AntennaPositions(ms) = New RealMatrix(NFrequencies, 7, ".complex")      'The measured positions of the antenna pairs
                    SParameters(ms).Vector(1) = MechanismList1.FrequencyList          'The measured scattering parameters of the antenna pairs
                    SParametersE(ms).Vector(1) = MechanismList1.FrequencyList          'The measured scattering parameters of the antenna pairs
                    AntennaPositions(ms).Vector(1) = MechanismList1.FrequencyList       'The measured positions of the antenna pairs
                Next ms

                'Read in the antenna data in myfiles, stuff the data into the arrays
                For Each File As String In myfiles
                    Dim FreqIndx As Integer = -1  'Figure out which frequency and measurement set we have
                    Dim ms As Integer = 0
                    Using parser As New TextFieldParser(File)
                        parser.SetDelimiters(delimiter)
                        While Not parser.EndOfData

                            ' Read in the fields for the current line
                            fields = parser.ReadFields()

                            ' Add code here to use data in fields variable.

                            If InStr(fields(0), "#FREQ:") > 0 Then  'Found the frequency
                                Dim FreqString As String = Mid(fields(0), 7)
                                Dim Freq As Double = CDbl(FreqString) / 1000000000.0
                                For k As Integer = 1 To NFrequencies
                                    If Math.Abs(Freq - MechanismList1.FrequencyList(k)) < 0.000000001 Then
                                        FreqIndx = k
                                    End If
                                Next k
                            End If

                            If InStr(fields(0), "#") = 0 And fields(0).Length > 0 And FreqIndx > 0 Then     'Insert some data if appropriate.
                                ms += 1                                                                 'Step through the measurement sets, one for each line in the file
                                SParameters(ms)(FreqIndx, 2) = CDblFromText(fields(2))                  'The default measured transmission between the antenna pairs
                                SParameters(ms)(FreqIndx, 4) = CDblFromText(fields(3))
                                SParameters(ms)(FreqIndx, 3) = CDblFromText(fields(2))
                                SParameters(ms)(FreqIndx, 5) = CDblFromText(fields(3))
                                If fields.Length > 34 Then                                              'Use the full measured scattering parameters of the antenna pairs if they are available
                                    SParameters(ms)(FreqIndx, 2) = CDblFromText(fields(40))
                                    SParameters(ms)(FreqIndx, 3) = CDblFromText(fields(41))
                                    SParameters(ms)(FreqIndx, 4) = CDblFromText(fields(42))             'Here we assume S21. Is this really S12? 
                                    SParameters(ms)(FreqIndx, 5) = CDblFromText(fields(43))
                                    SParameters(ms)(FreqIndx, 6) = CDblFromText(fields(44))
                                    SParameters(ms)(FreqIndx, 7) = CDblFromText(fields(45))
                                    SParameters(ms)(FreqIndx, 8) = CDblFromText(fields(46))
                                    SParameters(ms)(FreqIndx, 9) = CDblFromText(fields(47))
                                End If
                                'The measured positions of the antenna pairs
                                AntennaPositions(ms)(FreqIndx, 2) = CDblFromText(fields(22)) / 1000.0   'X (Actual (vs AUT)) in mm, convert to meters
                                AntennaPositions(ms)(FreqIndx, 3) = CDblFromText(fields(23)) / 1000.0   'Y (Actual (vs AUT))
                                AntennaPositions(ms)(FreqIndx, 4) = CDblFromText(fields(24)) / 1000.0   'Z (Actual (vs AUT))
                                AntennaPositions(ms)(FreqIndx, 5) = CDblFromText(fields(25))            'Rx (Actual (vs AUT)) in deg
                                AntennaPositions(ms)(FreqIndx, 6) = CDblFromText(fields(26))            'Ry (Actual (vs AUT))
                                AntennaPositions(ms)(FreqIndx, 7) = CDblFromText(fields(27))            'Rz (Actual (vs AUT))  Is this a change in polarization?
                            End If

                        End While
                    End Using
                Next File

                'Set the weigths to r for now, putting a greater weight on data far away.
                'Put in zeros for bad data. Later we will skip calculations for zero weights.
                ReDim Weights(NFrequencies)         'The weights. Zeros indicate bad data.
                For f As Integer = 1 To NFrequencies
                    Weights(f) = New RealMatrix(NMeasurementSets, 3)
                    For ms As Integer = 1 To NMeasurementSets
                        Weights(f)(ms, 1) = ms
                        'Set the weight to r. If r=0, this is bad data, and so this prevents problems later on.
                        Dim r1 As Double = Math.Sqrt(AntennaPositions(ms)(f, 2) ^ 2 + AntennaPositions(ms)(f, 3) ^ 2 + AntennaPositions(ms)(f, 4) ^ 2)
                        If r1 = 0.0 Then            'Check for bad data.
                            Weights(f)(ms, 2) = 0.0 'Bad data.
                        Else
                            Weights(f)(ms, 2) = r1 ' Set the weight to r for now. Later we may do something more sophisticated..
                        End If
                        'Check for zero transmission, another sign of bad data.
                        If (SParameters(ms)(f, 4) = 0.0 And SParameters(ms)(f, 5) = 0.0) Or (SParameters(ms)(f, 6) = 0.0 And SParameters(ms)(f, 7) = 0.0) Then 'Set weights to zero if the transmission is zero.
                            Weights(f)(ms, 2) = 0.0
                        End If
                    Next ms
                Next f

            End If

            'Get front panel information 
            '(0) = "Theta x AUT pointing error [deg] (.parameter)"
            Dim Theta_x_AUT As Double = MechValues(0).MechanismValue(MechanismList1)
            '(1) = "Theta y AUT pointing error [deg] (.parameter)"
            Dim Theta_y_AUT As Double = MechValues(1).MechanismValue(MechanismList1)
            '(2) = "Theta x Probe pointing error [deg] (.parameter)"
            Dim Theta_x_Probe As Double = MechValues(2).MechanismValue(MechanismList1)
            '(3) = "Theta y Probe pointing error [deg] (.parameter)"
            Dim Theta_y_Probe As Double = MechValues(3).MechanismValue(MechanismList1)
            '(4) = "Polarization angle error AUT [deg] (.parameter)"
            Dim PolarizationAngleAUT As Double = MechValues(4).MechanismValue(MechanismList1)
            '(5) = "Polarization angle error Probe [deg] (.parameter)"
            Dim PolarizationAngleProbe As Double = MechValues(5).MechanismValue(MechanismList1)
            '(7) = "Reversible systematic phase error due to cable flex [radians/m] (.parameter)"
            Dim Cable_phase_per_m As Double = MechValues(7).MechanismValue(MechanismList1)
            '(8) = "AUT 3dB beamwidth in Rx [deg] (.parameter)"
            Dim BeamWidth_AUT_Rx As Double = MechValues(8).MechanismValue(MechanismList1)
            '(9) = "AUT 3dB beamwidth in Ry [deg] (.parameter)"
            Dim BeamWidth_AUT_Ry As Double = MechValues(9).MechanismValue(MechanismList1)
            '(10) = "Probe 3dB beamwidth in Rx [deg] (.parameter)"
            Dim BeamWidth_probe_Rx As Double = MechValues(10).MechanismValue(MechanismList1)
            '(11) = "Probe 3dB beamwidth in Ry [deg] (.parameter)"
            Dim BeamWidth_probe_Ry As Double = MechValues(11).MechanismValue(MechanismList1)
            '(12) = "Lower limit on distance [m] (.parameter)"
            Dim LowerLimitDist As Double = MechValues(12).MechanismValue(MechanismList1)
            '(13) = "Upper limit on distance [m] (.parameter)"
            Dim UpperLimitDist As Double = MechValues(13).MechanismValue(MechanismList1)
            '(14) = "Coefficient for weighting linear solve on r - default 0 (.parameter)"
            Dim weightPower As Double = MechValues(14).MechanismValue(MechanismList1)

            '(6) = "VNA calibration error box (solution.meas, .s4p)"
            'VNA calibration errors (.s4p)
            Dim CalibrationErrors As RealMatrix = MechValues(6).getSParams(MechanismList1)
            'Get SP1 and SP2 from VNA calibration error box
            Dim SP1 As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim SP2 As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim SPT As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            SP1.Vector(1) = CalibrationErrors.Vector(1) : SP2.Vector(1) = CalibrationErrors.Vector(1) : SPT.Vector(1) = CalibrationErrors.Vector(1)
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows
                Dim CalibrationMatrix As ComplexMatrix = CalibrationErrors.SMatrix(k)
                Dim SMatrix As New ComplexMatrix(2, 2)
                'First port 1 error box
                SMatrix(1, 1) = CalibrationMatrix(1, 1)
                SMatrix(2, 1) = CalibrationMatrix(3, 1)
                SMatrix(1, 2) = CalibrationMatrix(1, 3)
                SMatrix(2, 2) = CalibrationMatrix(3, 3)
                SP1.SMatrix(k) = SMatrix
                'Now port 2 error box
                SMatrix(1, 1) = CalibrationMatrix(4, 4)
                SMatrix(2, 1) = CalibrationMatrix(2, 4)
                SMatrix(1, 2) = CalibrationMatrix(4, 2)
                SMatrix(2, 2) = CalibrationMatrix(2, 2)
                SP2.SMatrix(k) = SMatrix
            Next k

            'Save initial values of T(SP1) and T(SP2)
            If myFirst Then
                mySP1init = New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySP1init.Fill(SP1)
                mySP2init = New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySP2init.Fill(SP2)
            End If

            'Calculate SP1=(SP1)^-1 and  SP2=(SP2)^-1
            SP1.Invert() : SP2.Invert()
            'See if user wants to recalibrate
            If myPullDownSelection2 <= 0 Then   'Multiply by initial values of SP1 and SP2 so that we only add errors, and don't recalibrate
                SP1 = SP1.CascadeSParameters(mySP1init) : SP2 = SP2.CascadeSParameters(mySP2init)
            End If

            'Add in errors to the scattering parameters 
            For ms As Integer = 1 To NMeasurementSets
                SPT = SParameters(ms).CascadeSParameters(SP2)
                SParametersE(ms) = SP1.CascadeSParameters(SPT)
            Next ms

            'Determine number for fitting parameters
            Dim NParams As Integer = 0  'The number of fitting parameters
            If myPullDownSelection1 <= Magangcut Then 'Assume we start with single term fit, and go up to 6 terms for mag/ang fit
                NParams = myPullDownSelection1 + 1 'Complex Fit
            Else
                NParams = myPullDownSelection1 - Magangcut 'Power Fit
            End If

            'Fit
            Dim Fit As New RealMatrix(MechanismList1.FrequencyList.NRows, 1 + 2 * NParams, ".complex")    'Freq, Re(C1), Im(C1), Re(C2), Im(C2), Re(C3), Im(C3), Re(C4), Im(C4)
            'Pair gain
            Dim PairGain As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")   'Pair-gain S-parameters of the two antennas
            Fit.Vector(1) = MechanismList1.FrequencyList : PairGain.Vector(1) = MechanismList1.FrequencyList
            'Phase Center
            Dim PairPhaseCenter As New RealMatrix(MechanismList1.FrequencyList.NRows, 2, ".variables")

            'Fit the pair gain to the data
            Dim upperterm As Integer = 6
            Dim S21 As New ComplexMatrix(NMeasurementSets), r_track As New RealMatrix(NMeasurementSets)
            Dim exp_jk0r_d_r As New Complex, j As New Complex(0.0, 1.0)
            For f As Integer = 1 To NFrequencies    'Loop over the frequencies

                ' Fit (1/r) exp(-j k0 r) (A00 (1 + A001 Theta + A002 Theta^2 + A003 Phi  + A003 Phi^2 ) + A01/r + A02/r^2 + A03/r^3)
                Dim k0 As Double = 2.0 * Math.PI * MechanismList1.FrequencyList(f) / 0.2997925   'In meters k0 = 2 pi f / c
                Dim S11 As New Complex, S22 As New Complex, W As Double = 0.0, r_max As Double = 0.0, r_min As Double = 0.0
                Dim S21fac As New ComplexMatrix(NMeasurementSets)

                ' Set up S21norm and other functions
                setupRAndS21(NMeasurementSets, Weights(f), r_track, f, r_min, r_max, S21)

                'I want to sort the r and S21norm so I can apply a gate on the distance we fit
                Dim rsorted(NMeasurementSets - 1) As Double
                Dim sortIndices(NMeasurementSets - 1) As Integer
                'Dim S21realsorted(NMeasurementSets - 1) As Double, S21imagsorted(NMeasurementSets) As Double
                For ms As Integer = 1 To NMeasurementSets
                    sortIndices(ms - 1) = ms
                    rsorted(ms - 1) = r_track(ms)
                Next ms
                Array.Sort(rsorted, sortIndices)

                'Figure out how many indices to remove from the data to cut off the distance inputed for the dist gate
                Dim dmin As Integer = 0, dmax As Integer = 0
                For ms As Integer = 1 To NMeasurementSets
                    If LowerLimitDist <> 0 Then
                        If r_track(ms) < LowerLimitDist Then
                            dmin = dmin + 1
                        End If
                    End If
                    If UpperLimitDist <> 0 Then
                        If r_track(ms) > UpperLimitDist Then
                            dmax = dmax + 1
                        End If
                    End If
                Next ms

                Dim GatedInd As Integer = NMeasurementSets - dmin - dmax
                Dim rgate As New RealMatrix(GatedInd)
                Dim Weightgate As New RealMatrix(GatedInd, 3)
                Dim S21gate As New ComplexMatrix(GatedInd)
                Dim sortIndicesGated(GatedInd) As Integer ' Takes gated sorted indices back to original indices

                For ms As Integer = 1 To GatedInd
                    rgate(ms) = rsorted(ms + dmin - 1)
                    Weightgate(ms, 1) = ms
                    Weightgate(ms, 2) = rgate(ms) ^ weightPower ' nominal r value add a power here

                    sortIndicesGated(ms) = sortIndices(ms + dmin - 1)
                    S21gate(ms) = S21(sortIndices(ms + dmin - 1))
                Next ms

                ' S21 facgate containst the scaling on the series
                Dim S21facgate As New ComplexMatrix(GatedInd)

                Dim r_tol As Double
                Dim maxNumIts As Int32
                Dim r_search_min As Double
                Dim r_search_max As Double
                If myPullDownSelection3 = 1 Then
                    r_tol = 0.0000001
                    maxNumIts = 1000
                    r_search_min = -0.1
                    r_search_max = +0.0
                Else
                    r_tol = 0.0000001
                    maxNumIts = 0
                    r_search_min = 0.0
                    r_search_max = 0.0
                End If

                Dim TotRes As Double
                Dim r_offset As Double
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                If myFirst Then
                    'Plot |S21(ms)| vs r_track(ms) and phase S21(ms)
                    Dim Plot As New Plot("r (meters)", "Abs(S21) (dB)", "Signal Magnitude (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim Plot1 As New Plot("r (meters)", "Phase(S21) (degrees)", "Phase Pair Gain (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim Plot2 As New Plot("r (meters)", "Abs(S21) - Abs(Fit)", "Mag Residual (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim Plot3 As New Plot("r(meters)", "Residual from Linear Fit (deg)", "Residual of Linear Phase Fit (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim Plot4 As New Plot("r (meters)", "Abs(S21)^2 (dB)", "Power (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim Plot5 As New Plot("r (meters)", "Abs(S21)^2 - Abs(Fit)^2", "Pwr Residual (f=" + MechanismList1.FrequencyList(f).ToString + ")")
                    Dim MagS21 As New RealMatrix(NMeasurementSets), PhaseS21 As New RealMatrix(NMeasurementSets), MagFit As New RealMatrix(GatedInd)
                    Dim MagS21corr As New RealMatrix(GatedInd), Phasefit As New RealMatrix(GatedInd), betalin As New ComplexMatrix(NMeasurementSets, 2)
                    Dim ResS21 As New RealMatrix(GatedInd), DifPhaseS21 As New RealMatrix(GatedInd)
                    Dim Craw As New ComplexMatrix(NMeasurementSets), C As New ComplexMatrix(GatedInd), l As New ComplexMatrix(2), PhRes As New RealMatrix(NMeasurementSets)
                    Dim PhUnwrapped As New RealMatrix(NMeasurementSets)
                    Dim A00 As New ComplexMatrix(upperterm)
                    Dim A00filenamearray() As String = Split(myTextBoxContents, ".")
                    Dim MagA00 As Double
                    'The stuff below makes a filename for writing out the coefficients of all the term fits.  I'm commenting it out unless needed.
                    'Dim sigcase As String = "none"
                    'Dim phcase As String = "none"
                    'If myPullDownSelection1 > Magangcut Then
                    '    sigcase = "pwr"
                    'Else
                    '    sigcase = "sig"
                    'End If
                    'If myPullDownSelection3 = 0 Then
                    '    phcase = "noph"
                    'Else
                    '    phcase = "ph"
                    'End If
                    'A00filenamearray(0) = A00filenamearray(0) + "_A00_" + sigcase + "_" + phcase + ".txt"

                    'Computations with the raw data
                    For ms As Integer = 1 To NMeasurementSets
                        MagS21(ms) = 20.0 * Math.Log10(Abs(S21(ms)))
                        If myPullDownSelection1 > Magangcut Then
                            MagS21(ms) = 10.0 * Math.Log10(Abs(S21(ms) ^ 2))
                        End If
                        'MagS21(ms) = Abs(S21(ms))
                        PhaseS21(ms) = Phase(S21(ms)) 'Phase of S21 in degrees
                        PhUnwrapped(ms) = Arg(S21(ms)) 'Right now, this is the phase of S21 in radians.  Will be unwrapped
                        betalin(ms, 1) = 1
                        betalin(ms, 2) = r_track(ms)
                    Next ms

                    'Computation with the gated data
                    '  calcRDependentValues(NMeasurementSets, Weights(f), r_track, 0, f, r_min, r_max, k0,
                    '  S11, S21, S22,
                    '  Theta_x_AUT, Theta_y_AUT, PolarizationAngleAUT, PolarizationAngleProbe,
                    '  BeamWidth_AUT_Rx, BeamWidth_AUT_Ry, BeamWidth_probe_Rx, BeamWidth_probe_Ry,
                    'Cable_phase_per_m, W, S21fac, sortIndicesGated)
                    For ms As Integer = 1 To GatedInd
                        MagS21corr(ms) = 20.0 * Math.Log10(Abs(S21gate(ms)))
                        If myPullDownSelection1 > Magangcut Then
                            MagS21corr(ms) = 10.0 * Math.Log10(Abs(S21gate(ms) ^ 2))
                        End If
                        'MagS21corr(ms) = Abs(S21corrgate(ms))
                    Next ms
                    UnWrap(PhUnwrapped) 'Turns out, the function "UnWrap" alters the matrix you give it

                    'Plot the Data and the Corrected Data
                    Plot.AddCurve(r_track, MagS21, "Measurements")
                    Plot.AddCurve(rgate, MagS21corr, "Corrected")
                    Plot4.AddCurve(r_track, MagS21, "Measurements")
                    Plot4.AddCurve(rgate, MagS21corr, "Corrected")
                    If myPullDownSelection1 <= Magangcut Then Plot1.AddCurve(r_track, PhaseS21, "Measurements")
                    'Use a least squares fit to fit a line to the phase of S21
                    LinearFit(l, PhUnwrapped, betalin)
                    For ms As Integer = 1 To NMeasurementSets
                        Craw(ms) = getLinFit(r_track(ms), l)
                        PhRes(ms) = (PhUnwrapped(ms) - Craw.Re(ms)) * (180.0 / Math.PI) 'Residual linear phase in degrees
                    Next ms
                    Plot3.AddCurve(r_track, PhRes, "Residual of linear fit to phase")
                    'Least Squares fit, first time around to look for convergence
                    For termindex As Integer = 1 To upperterm 'This loops over 1 through upperterm = 6 terms
                        Dim q As New ComplexMatrix(termindex)

                        SeriesFitWithOffsetR(Weightgate, GatedInd, termindex, f,
                                            r_search_min, r_search_max, r_tol, q, rgate, k0, r_offset,
                                            S11, S21gate, S22,
                                            Theta_x_AUT, Theta_y_AUT, PolarizationAngleAUT, PolarizationAngleProbe,
                                            BeamWidth_AUT_Rx, BeamWidth_AUT_Ry, BeamWidth_probe_Rx, BeamWidth_probe_Ry,
                                            Cable_phase_per_m, W, maxNumIts, TotRes, S21facgate, sortIndicesGated)

                        A00(termindex) = q(1)
                        MagA00 = Abs(A00(termindex))
                        If myPullDownSelection1 > Magangcut Then
                            A00(termindex) = Sqrt(Abs(A00(termindex)))
                        End If
                        'Using sw As StreamWriter = File.AppendText(A00filenamearray(0))
                        '    sw.WriteLine(A00(termindex).ToString)
                        'End Using
                        TotRes = 0.0
                        For ms As Integer = 1 To GatedInd
                            If myPullDownSelection1 > Magangcut Then
                                C(ms) = getFitFac(rgate(ms) - r_offset, k0, q, Abs(S21facgate(ms)) ^ 2)
                                MagFit(ms) = 10.0 * Math.Log10(Abs(C(ms)))
                                ResS21(ms) = Abs(S21gate(ms) ^ 2) - Abs(C(ms))
                            Else
                                C(ms) = getFitFac(rgate(ms) - r_offset, k0, q, S21facgate(ms))
                                MagFit(ms) = 20.0 * Math.Log10(Abs(C(ms)))
                                ResS21(ms) = Abs(S21gate(ms)) - Abs(C(ms))
                            End If
                            ResS21(ms) = ResS21(ms) * Weightgate(ms, 2)
                            Phasefit(ms) = Phase(C(ms))
                            TotRes = TotRes + Abs(ResS21(ms))
                        Next ms
                        Plot.AddCurve(rgate, MagFit, termindex.ToString + " terms, A00= " + A00(termindex).ToString)
                        Plot4.AddCurve(rgate, MagFit, termindex.ToString + " terms, A00= " + A00(termindex).ToString)
                        Plot2.AddCurve(rgate, ResS21, termindex.ToString + " terms, ResTot= " + TotRes.ToString("F5") + " r0 " + r_offset.ToString("F5"))
                        Plot5.AddCurve(rgate, ResS21, termindex.ToString + " terms, ResTot= " + TotRes.ToString("F5") + " r0 " + r_offset.ToString("F5"))
                        If myPullDownSelection1 <= Magangcut Then Plot1.AddCurve(rgate, Phasefit, termindex.ToString + " terms, Abs(A00)= " + MagA00.ToString("F6"))
                    Next termindex
                    'End of convergence search loop
                    If myPullDownSelection1 <= Magangcut Then
                        Plot.Show()
                        Plot2.Show()
                    Else
                        Plot4.Show()
                        Plot5.Show()
                    End If
                    Plot3.Show()
                    If myPullDownSelection1 <= Magangcut Then Plot1.Show()
                End If

                Dim p As New ComplexMatrix(NParams) 'A00, A00 A001, A00 A002, A00 A003, A00 A004, A01, A02, A03
                'Least Squares Fit for the terms actually requested on the gated and corrected data
                SeriesFitWithOffsetR(Weightgate, GatedInd, NParams, f,
                                        r_search_min, r_search_max, r_tol, p, rgate, k0, r_offset,
                                        S11, S21gate, S22,
                                        Theta_x_AUT, Theta_y_AUT, PolarizationAngleAUT, PolarizationAngleProbe,
                                        BeamWidth_AUT_Rx, BeamWidth_AUT_Ry, BeamWidth_probe_Rx, BeamWidth_probe_Ry,
                                        Cable_phase_per_m, W, maxNumIts, TotRes, S21facgate, sortIndicesGated)

                'The fit
                For k As Integer = 1 To p.NRows
                    Fit(f, 2 * k) = p(k).Re
                    Fit(f, 2 * k + 1) = p(k).Im
                Next k

                'The pair gain as an S-parameter matrix for use in 3-antenna method
                'Add in the measured reflection coefficients from a weighted average of S11 and S22 emphasizing the farthest points
                PairGain(f, 2) = S11.Re / W : PairGain(f, 3) = S11.Im / W : PairGain(f, 8) = S22.Re / W : PairGain(f, 9) = S22.Im / W
                ' Fit (1/r) exp(-j k0 r) (A00 + A01/r + A02/r^2 + A03/r^3 + ...)     Pair Gain = A00 ????
                Dim PG As New Complex
                If myPullDownSelection1 <= Magangcut Then   'Standard Mag/angle fit
                    PG = p(1)
                Else                                'Power fit
                    PG = Math.Sqrt(Abs(p(1)))
                End If
                PairGain(f, 4) = PG.Re : PairGain(f, 5) = PG.Im : PairGain(f, 6) = PG.Re : PairGain(f, 7) = PG.Im 'Transmission term from fit.

                'Results for phase center
                PairPhaseCenter(f, 1) = 1 : PairPhaseCenter(f, 2) = r_offset

            Next f
            Dim ReturnResults(2) As Object

            ReturnResults(0) = Fit
            ReturnResults(1) = PairGain
            ReturnResults(2) = PairPhaseCenter
            myFirst = False

            Return ReturnResults    'Return the files created by MatLab to the MUF

        End Function

        ''' <summary>
        ''' Calculate the fit to the pair gain
        ''' </summary>
        ''' <param name="r">Distance between the antennas in meters</param>
        ''' <param name="k0"></param>
        ''' <param name="p"></param>
        ''' <returns>The complex fit at (r,Theta0,Phi0,Psi0) to the pair gain from the coefficients in p</returns>
        ''' <remarks></remarks>
        Private Function getFit(ByVal r As Double, ByVal k0 As Double, ByRef p As ComplexMatrix) As Complex

            Dim C As New Complex(0.0, 0.0), S21 As New Complex(0.0, 0.0), exp_jk0r_d_r As New Complex
            exp_jk0r_d_r = Exp(toComplex(0.0, -k0 * r)) / r
            For fitterms As Integer = 1 To p.NRows
                C = C + p(fitterms) / (r ^ (fitterms - 1))
            Next fitterms

            If myPullDownSelection1 <= 5 Then   'Standard Mag/angle fit
                S21 = C * exp_jk0r_d_r
            Else                                'Power fit
                S21 = Math.Sqrt(Abs(C / (r * r)))
            End If

            Return S21
        End Function
        Private Function getFitFac(ByVal r As Double, ByVal k0 As Double, ByRef p As ComplexMatrix, ByVal S21fac As Complex) As Complex

            Dim C As New Complex(0.0, 0.0), S21 As New Complex(0.0, 0.0), exp_jk0r_d_r As New Complex
            exp_jk0r_d_r = Exp(toComplex(0.0, -k0 * r)) / r
            For fitterms As Integer = 1 To p.NRows
                C = C + p(fitterms) / (r ^ (fitterms - 1))
            Next fitterms
            S21 = S21fac * C
            Return S21
        End Function

        Private Function getLinFit(ByVal r As Double, ByRef p As ComplexMatrix) As Complex
            Dim C As New Complex(0.0, 0.0)
            C = p(1) + p(2) * r
            Return C
        End Function

        ''' <summary>
        ''' Check for bad data from the antenna files before converting. 
        ''' </summary>
        ''' <param name="Text">Text version of the number.</param>
        ''' <returns>Number if valid, 0.0 if data is bad.</returns>
        ''' <remarks></remarks>
        Private Function CDblFromText(ByVal Text As String) As Double
            Dim Dbl As Double = 0.0
            If Text.Length > 0 Then
                Dbl = CDbl(Text)
            End If
            Return Dbl
        End Function

    End Class

    ''' <summary>
    ''' Post processor determines antenna gain from three permutations of pair gain.
    ''' </summary>
    ''' <remarks>Initial draft.</remarks>
    <Serializable()> Public Class Post_ThreeAntennaMethod_Gain
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myFirst As Boolean = True
        Private myFirst2 As Boolean = True
        Private mySP1init As RealMatrix = Nothing
        Private mySP2init As RealMatrix = Nothing

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(8) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "AB Antenna Pair Gain S-Parameters [unitless] (.meas)"
                myNameList(1) = "BC Antenna Pair Gain S-Parameters [unitless] (.meas)"
                myNameList(2) = "AC Antenna Pair Gain S-Parameters [unitless] (.meas)"
                myNameList(3) = "Antenna A length from connector to phase center [m] (.parameter)"
                myNameList(4) = "Antenna B length from connector to phase center [m] (.parameter)"
                myNameList(5) = "Antenna C length from connector to phase center [m] (.parameter)"
                myNameList(6) = "AB Pair Phase Center [m] (.variables)"
                myNameList(7) = "BC Pair Phase Center [m] (.variables)"
                myNameList(8) = "AC Pair Phase Center [m] (.variables)"
                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(6) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".s2p"
                FileExtensions(3) = ".sumofparameters" : FileExtensions(4) = ".model" : FileExtensions(5) = ".cascade"
                FileExtensions(6) = ".variables"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "AB Port 1 = A"
                PullDownList(1) = "AB Port 1 = B"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "BC Port 1 = B"
                PullDownList(1) = "BC Port 1 = C"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "AC Port 1 = A"
                PullDownList(1) = "AC Port 1 = C"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor implements the three-antenna method to calculate the individual gains of three antennas from their pair-gain measurements."
                myDescription(1) = ""
                myDescription(3) = "Written by Rob Horansky and Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".s2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the gain of three antennas from their pair gain data"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(8) As String
                OutputNames(0) = "\Power_Gain_A"
                OutputNames(1) = "\Power_Gain_B"
                OutputNames(2) = "\Power_Gain_C"
                OutputNames(3) = "\Signal_Matrix_A"
                OutputNames(4) = "\Signal_Matrix_B"
                OutputNames(5) = "\Signal_Matrix_C"
                OutputNames(6) = "\Phase_Center_A"
                OutputNames(7) = "\Phase_Center_B"
                OutputNames(8) = "\Phase_Center_C"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                'myConditionLocations(0) = 4
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass all of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                'myConditionNameList(0) = "Phi"
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get front panel information 
            'myNameList(0) = "AB Antenna Pair Gain [unitless] (.meas)"
            Dim PG_AB As RealMatrix = MechValues(0).GetSParams(MechanismList1)
            'myNameList(1) = "BC Antenna Pair Gain [unitless] (.meas)"
            Dim PG_BC As RealMatrix = MechValues(1).GetSParams(MechanismList1)
            'myNameList(2) = "AC Antenna Pair Gain [unitless] (.meas)"
            Dim PG_AC As RealMatrix = MechValues(2).GetSParams(MechanismList1)
            'myNameList(3) = "Antenna A length from connector to phase ceter [m] (.parameter)"
            Dim l_A As Double = MechValues(3).MechanismValue(MechanismList1)
            'myNameList(4) = "Antenna B length from connector to phase ceter [m] (.parameter)"
            Dim l_B As Double = MechValues(4).MechanismValue(MechanismList1)
            'myNameList(5) = "Antenna C length from connector to phase ceter [m] (.parameter)"
            Dim l_C As Double = MechValues(5).MechanismValue(MechanismList1)
            'myNameList(6) = "AB Pair Phase Center [m] (.variables)"
            Dim PhaseCenter_AB As RealMatrix = MechValues(6).GetSParams(MechanismList1)
            'myNameList(7) = "BC Pair Phase Center [m] (.variables)"
            Dim PhaseCenter_BC As RealMatrix = MechValues(7).GetSParams(MechanismList1)
            'myNameList(8) = "AC Pair Phase Center [m] (.variables)"
            Dim PhaseCenter_AC As RealMatrix = MechValues(8).GetSParams(MechanismList1)

            'Set up the output matricies
            Dim N As Integer = PG_AB.NRows
            Dim GainA As New RealMatrix(N, 3, ".complex")
            Dim GainB As New RealMatrix(N, 3, ".complex")
            Dim GainC As New RealMatrix(N, 3, ".complex")
            Dim GainASignal As New RealMatrix(N, 9, ".s2p")
            Dim GainBSignal As New RealMatrix(N, 9, ".s2p")
            Dim GainCSignal As New RealMatrix(N, 9, ".s2p")
            Dim PhaseCenter_A As New RealMatrix(N, 2, ".variables")
            Dim PhaseCenter_B As New RealMatrix(N, 2, ".variables")
            Dim PhaseCenter_C As New RealMatrix(N, 2, ".variables")
            Dim S11_A As New ComplexMatrix(N, 1)
            Dim S11_B As New ComplexMatrix(N, 1)
            Dim S11_C As New ComplexMatrix(N, 1)

            Dim SpeedOfLight As Double = 0.299792 'Gm/s (works with GHz)
            Dim l_Meas_A As Double = l_A
            Dim l_Meas_B As Double = l_B
            Dim l_Meas_C As Double = l_C

            'I need to figure out which antenna is on each port and index my final results accordingly
            Dim ind_AB_A As Integer, ind_AB_B As Integer, ind_BC_B As Integer, ind_BC_C As Integer
            Dim ind_AC_A As Integer, ind_AC_C As Integer

            If myPullDownSelection1 = 0 Then
                ind_AB_A = 2
                ind_AB_B = 8
            Else
                ind_AB_A = 8
                ind_AB_B = 2
            End If

            If myPullDownSelection2 = 0 Then
                ind_BC_B = 2
                ind_BC_C = 8
            Else
                ind_BC_B = 8
                ind_BC_C = 2
            End If

            If myPullDownSelection3 = 0 Then
                ind_AC_A = 2
                ind_AC_C = 8
            Else
                ind_AC_A = 8
                ind_AC_C = 2
            End If

            'Loop over the frequencies
            For k As Integer = 1 To N

                'Get variables from RealMatrix arrays
                Dim Gain_AB As New Complex(PG_AB(k, 4), PG_AB(k, 5))
                Dim Gain_BC As New Complex(PG_BC(k, 4), PG_BC(k, 5))
                Dim Gain_AC As New Complex(PG_AC(k, 4), PG_AC(k, 5))
                'The reflection on antenna A comes from S11 on AB and AC PG measurements
                S11_A(k, 1) = toComplex((PG_AB(k, ind_AB_A) + PG_AC(k, ind_AC_A)) / 2, (PG_AB(k, ind_AB_A + 1) + PG_AC(k, ind_AC_A + 1)) / 2)
                'The reflection on antenna B comes from S22 on AB and S11 on BC
                S11_B(k, 1) = toComplex((PG_AB(k, ind_AB_B) + PG_BC(k, ind_BC_B)) / 2, (PG_AB(k, ind_AB_B + 1) + PG_BC(k, ind_BC_B + 1)) / 2)
                'The reflection on antenna C comes from S22 on AC and S22 on BC
                S11_C(k, 1) = toComplex((PG_AC(k, ind_AC_C) + PG_BC(k, ind_BC_C)) / 2, (PG_AC(k, ind_AC_C + 1) + PG_BC(k, ind_AC_C + 1)) / 2)
                Dim FGHz As Double = PG_AB(k, 1)
                Dim Friis As Double = 4 * Math.PI * FGHz / SpeedOfLight
                'Calculate the single power gains
                Dim GA As New Complex(), GB As New Complex(), GC As New Complex()

                GA = Friis * Gain_AB * Gain_AC / Gain_BC
                GB = Friis * Gain_AB * Gain_BC / Gain_AC
                GC = Friis * Gain_BC * Gain_AC / Gain_AB

                GainA(k, 1) = FGHz : GainA(k, 2) = GA.Re : GainA(k, 3) = GA.Im
                GainB(k, 1) = FGHz : GainB(k, 2) = GB.Re : GainB(k, 3) = GB.Im
                GainC(k, 1) = FGHz : GainC(k, 2) = GC.Re : GainC(k, 3) = GC.Im

                'Calculate the phase center for each antenna
                PhaseCenter_A(k, 1) = 1 : PhaseCenter_A(k, 2) = (PhaseCenter_AB(k, 2) + PhaseCenter_AC(k, 2) - PhaseCenter_BC(k, 2)) / 2
                PhaseCenter_B(k, 1) = 1 : PhaseCenter_B(k, 2) = (PhaseCenter_AB(k, 2) + PhaseCenter_BC(k, 2) - PhaseCenter_AC(k, 2)) / 2
                PhaseCenter_C(k, 1) = 1 : PhaseCenter_C(k, 2) = (PhaseCenter_BC(k, 2) + PhaseCenter_AC(k, 2) - PhaseCenter_AB(k, 2)) / 2

            Next k

            'The CalcSignGain function takes the power gains and calculated the signal gains with the correct phase unless length = 0
            GainASignal = CalcSignGain(GainA, S11_A, l_Meas_A)
            GainBSignal = CalcSignGain(GainB, S11_B, l_Meas_B)
            GainCSignal = CalcSignGain(GainC, S11_C, l_Meas_C)


            Dim ReturnResults(8) As Object

            ReturnResults(0) = GainA
            ReturnResults(1) = GainB
            ReturnResults(2) = GainC
            ReturnResults(3) = GainASignal
            ReturnResults(4) = GainBSignal
            ReturnResults(5) = GainCSignal
            ReturnResults(6) = PhaseCenter_A
            ReturnResults(7) = PhaseCenter_B
            ReturnResults(8) = PhaseCenter_C

            Return ReturnResults    'Return files in to appproriate folder locations

        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="GP">Power Gain</param>
        ''' <param name="S11">S11 calculated for the antenna from the pairgain data</param>
        ''' <param name="length">Electrical length between the connector and the reference plane you choose for r when determining the pair gain</param>
        ''' <returns>Unwrapped Signal Gain as an s2p matrix</returns>
        Private Function CalcSignGain(ByVal GP As RealMatrix, ByVal S11 As ComplexMatrix, ByRef length As Double) As RealMatrix
            'This function will take the square root of the power gain and figure out the correct root
            'length(m), Freq (GHz)
            'SG at this point is the root of PG in -pi/2 to pi/2 half
            'Just take this root if l is inputed as zero
            Dim Num As Integer = GP.NRows, l_corr = length
            Dim SpeedOfLight As Double = 0.299792 'Gm/s (works with GHz)
            Dim SignalGain As New RealMatrix(Num, 9, ".s2p") 'This will be the output of the function

            For k = 1 To Num
                Dim f As Double = GP(k, 1)
                Dim GS As Complex = modComplexFunctions.Sqrt(toComplex(GP(k, 2), GP(k, 3)))

                If l_corr = 0 Then
                    SignalGain(k, 1) = f : SignalGain(k, 2) = Re(S11(k)) : SignalGain(k, 3) = Im(S11(k))
                    SignalGain(k, 4) = GS.Re : SignalGain(k, 5) = GS.Im : SignalGain(k, 6) = GS.Re : SignalGain(k, 7) = GS.Im
                    SignalGain(k, 8) = 0 : SignalGain(k, 9) = 0
                Else
                    'Theta_Meas is the phase of root we just took in radians
                    Dim Theta_Meas As Double = modComplexFunctions.Arg(GS)
                    'Theta_Target is the expected phase (unwrapped) based on the length from the VNA msmnt to the phase center
                    Dim Theta_Target As Double = -l_corr * f * 2 * Math.PI / SpeedOfLight
                    'Determine how many pi's away the expected phase is from the measured
                    Dim NWraps As Integer = CInt((Theta_Meas - Theta_Target) / Math.PI)
                    'Calculate the measured value closest to the phase line
                    Dim Theta_Act As Double = Theta_Meas - NWraps * Math.PI
                    'If we subtract an odd number of pi's, then we need the other root
                    Dim remainder As Integer
                    Dim quotient As Integer = Math.DivRem(NWraps, 2, remainder)
                    If remainder <> 0 Then
                        GS = -GS
                    End If
                    SignalGain(k, 1) = f : SignalGain(k, 2) = Re(S11(k)) : SignalGain(k, 3) = Im(S11(k))
                    SignalGain(k, 4) = GS.Re : SignalGain(k, 5) = GS.Im : SignalGain(k, 6) = GS.Re : SignalGain(k, 7) = GS.Im
                    SignalGain(k, 8) = 0 : SignalGain(k, 9) = 0
                    'change the value of l_corr to a line from zero to 
                    l_corr = -SpeedOfLight * Theta_Act / (f * 2 * Math.PI)
                End If
            Next k
            Return SignalGain

        End Function

    End Class


    ''' <summary>
    ''' Post processor calls a MatLab subroutine.
    ''' </summary>
    ''' <remarks>Second draft. Takes advantage of repeated measurements to reduce problem size.</remarks>
    Public Class Post_PairGainMatLab

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myFirst As Boolean = True
        Private myMatLab As MLApp.MLApp = Nothing
        Private myFirst2 As Boolean = True
        Private NFiles As Integer = 0
        Private mySP1init As RealMatrix = Nothing
        Private mySP2init As RealMatrix = Nothing

        'Default MatLab program.
        Private myMatLabInit As String = ""
        Private myMatLabMain As String = ""
        Private myMatLabSubs As String = ""


        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return True
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "Path to antenna measurements"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(8) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "MatLab initialization program (.m)"
                myNameList(1) = "MatLab main program (.m)"
                myNameList(2) = "MatLab subroutines (.zip)"
                myNameList(3) = "Reflection coefficient of antenna 1 (.s1p, .s2p)"
                myNameList(4) = "Reflection coefficient of antenna 2 (.s1p, .s2p)"
                myNameList(5) = "VNA calibration error box (solution.meas, .s4p)"
                myNameList(6) = "Reversible systematic drift due to cable flex [phase/mm] (.parameter)"
                myNameList(7) = "Systematic position correction factor (.parameter)"
                myNameList(8) = "Other systematic errors..."

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(9) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".m" : FileExtensions(3) = ".s1p" : FileExtensions(4) = ".s2p"
                FileExtensions(5) = ".sumofparameters" : FileExtensions(6) = ".model" : FileExtensions(7) = ".cascade"
                FileExtensions(8) = ".s4p" : FileExtensions(9) = ".zip"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 4
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Antenna reflection coefficients in port 1"
                PullDownList(1) = "Antenna reflection coefficients in port 2"
                PullDownList(2) = "Antenna 1 in port 1 Antenna 2 in port 2"
                PullDownList(3) = "Antenna 1 in port 2 Antenna 2 in port 1"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Add scattering-parameter errors"
                PullDownList(1) = "Re-calibrate and add scattering-parameter errors"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Use stored MatLab code"
                PullDownList(1) = "Use passed MatLab code"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor runs calculates the gain of antenna pairs from the code in the MatLab file."
                myDescription(1) = "The default frequency list is determined from the VNA calibration errors, but can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Calculate the pair-gain of two antennas"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(1) As String
                OutputNames(0) = "\FitCoef"
                OutputNames(1) = "\PairGain"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                'myConditionLocations(0) = 4
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass all of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                'myConditionNameList(0) = "Phi"
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1), MatLabDir As String = ""

            If myFirst Then 'Only do this stuff the first time


                ''Initialize MatLab
                'If IsNothing(myMatLab) Then 'Make sure we have a copy of MatLab on hand
                '    myMatLab = New MLApp.MLApp
                'End If

                Call MatLabInit(MechanismList1, MechValues, myMatLabInit, myMatLabMain, myMatLabSubs, myPullDownSelection3, myTextBoxContents, myMatLabFileName, myMatLabPath, MatLabDir)

                'See if we hit an error
                If MechanismList1.FatalError Then Return ToArray(Dummy)

            End If

            'Get front panel information and save it for MatLab

            'Start with the reflection coefficients for the two antennas
            '0 Antenna reflection coefficients in port 1 
            '1 Antenna reflection coefficients in port 2 
            '2 Antenna 1 in port 1 Antenna 2 in port 2 
            '3 Antenna 1 in port 2 Antenna 2 in port 1 
            Dim Gamma As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".s1p") : Gamma.Vector(1) = MechanismList1.FrequencyList
            Dim GammaAnt1 As RealMatrix = MechValues(3).getSParams(MechanismList1)    '2 Reflection coefficient of antenna 1 (.s1p, .s2p) 
            Gamma.Vector(2) = GammaAnt1.Vector(2) : Gamma.Vector(3) = GammaAnt1.Vector(3)
            If myPullDownSelection1 = 1 Or myPullDownSelection1 = 3 Then Gamma.Vector(2) = GammaAnt1.Vector(8) : Gamma.Vector(3) = GammaAnt1.Vector(9)
            Gamma.Write(myMatLabPath + "\Antenna1.s1p_binary")

            Dim GammaAnt2 As RealMatrix = MechValues(4).getSParams(MechanismList1)    '3 Reflection coefficient of antenna 2 (.s1p, .s2p) 
            Gamma.Vector(2) = GammaAnt2.Vector(2) : Gamma.Vector(3) = GammaAnt2.Vector(3)
            If myPullDownSelection1 = 1 Or myPullDownSelection1 = 2 Then Gamma.Vector(2) = GammaAnt2.Vector(8) : Gamma.Vector(3) = GammaAnt2.Vector(9)
            Gamma.Write(myMatLabPath + "\Antenna2.s1p_binary")

            'VNA calibration errors (.s4p)
            Dim CalibrationErrors As RealMatrix = MechValues(5).getSParams(MechanismList1)   '4 VNA calibration error box (.s4p)
            'Get SP1 and SP2 from VNA calibration error box
            Dim SP1 As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            Dim SP2 As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            SP1.Vector(1) = CalibrationErrors.Vector(1) : SP2.Vector(1) = CalibrationErrors.Vector(1)
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows
                Dim CalibrationMatrix As ComplexMatrix = CalibrationErrors.SMatrix(k)
                Dim SMatrix As New ComplexMatrix(2, 2)
                'First port 1 error box
                SMatrix(1, 1) = CalibrationMatrix(1, 1)
                SMatrix(2, 1) = CalibrationMatrix(3, 1)
                SMatrix(1, 2) = CalibrationMatrix(1, 3)
                SMatrix(2, 2) = CalibrationMatrix(3, 3)
                SP1.SMatrix(k) = SMatrix
                'Now port 2 error box
                SMatrix(1, 1) = CalibrationMatrix(4, 4)
                SMatrix(2, 1) = CalibrationMatrix(2, 4)
                SMatrix(1, 2) = CalibrationMatrix(4, 2)
                SMatrix(2, 2) = CalibrationMatrix(2, 2)
                SP2.SMatrix(k) = SMatrix
            Next k
            'Save initial values of T(SP1) and T(SP2)
            If myFirst Then
                myFirst = False
                mySP1init = New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySP1init.Fill(SP1)
                mySP2init = New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p") : mySP2init.Fill(SP2)
            End If
            'Calculate SP1=(SP1)^-1 and  SP2=(SP2)^-1
            SP1.Invert() : SP2.Invert()
            'See if user wants to recalibrate
            If myPullDownSelection2 <= 0 Then   'Multiply by initial values of SP1 and SP2 so that we only add errors, and don't recalibrate
                SP1 = SP1.CascadeSParameters(mySP1init) : SP2 = SP2.CascadeSParameters(mySP2init)
            End If
            'Pass to MatLab as SP1.s2p_binary and SP2.s2p_binary
            SP1.Write(myMatLabPath + "\SP1.s2p_binary") : SP2.Write(myMatLabPath + "\SP2.s2p_binary")

            'Store the parameters to disk for the MatLab routine
            Call StoreParametersForMatLab(MechanismList1, MechValues, myMatLabPath)

            'Run MatLab
            Try
                'Initialize MatLab
                If IsNothing(myMatLab) Then 'Make sure we have a copy of MatLab on hand
                    myMatLab = New MLApp.MLApp
                End If
                myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName))   'Run MatLab routine
            Catch ex As Exception
                MechanismList1.FatalError = True : MechanismList1.ErrorReport = "MatLab Error: Check license."
            End Try

            'Read in the MatLab results from MATLAB and return them to the MUF in a format that the MUF understands
            'Fit
            Dim Fit As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".complex")    'Freq, Re(C1), Im(C1), Re(C2), Im(C2), Re(C3), Im(C3), Re(C4), Im(C4)
            'Check that MATLAB actually created the .variables file we are expecting.
            Dim FileName As String = myMatLabPath + "\ExtrapFit.complex_binary"
            If My.Computer.FileSystem.FileExists(FileName) Then
                Fit.Read(FileName)    'Read in the file created by MatLab 
                'My.Computer.FileSystem.DeleteFile(FileName, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.DeletePermanently)
            Else
                MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
            End If

            'Pair gain
            Dim PairGain As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".s2p")
            'Check that MATLAB actually created the .variables file we are expecting.
            FileName = myMatLabPath + "\PairGain.s2p_binary"
            If My.Computer.FileSystem.FileExists(FileName) Then
                PairGain.Read(FileName)    'Read in the file created by MatLab 
                'My.Computer.FileSystem.DeleteFile(FileName, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.DeletePermanently)
            Else
                MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
            End If


            Dim ReturnResults(1) As Object
            ReturnResults(0) = Fit
            ReturnResults(1) = PairGain

            Return ReturnResults    'Return the files created by MatLab to the MUF

        End Function


    End Class


    ''' <summary>
    ''' Post processor calls a MatLab subroutine.
    ''' </summary>
    ''' <remarks>Estimate RLGC of fluid in a channel</remarks>
    Public Class Post_MUT_Nate

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myFirst As Boolean = True
        Private myMatLab As MLApp.MLApp = Nothing
        Private myFirst2 As Boolean = True
        Private NFiles As Integer = 0
        Private mySP1init As RealMatrix = Nothing
        Private mySP2init As RealMatrix = Nothing

        'Default MatLab program.
        Private myMatLabInit As String = ""
        Private myMatLabMain As String = ""
        Private myMatLabSubs As String = ""

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "MatLab initialization program (.m)"
                myNameList(1) = "MatLab main program (.m)"
                myNameList(2) = "MatLab subroutines (.zip)"
                myNameList(3) = "Port 1 error box (.s2p)"
                myNameList(4) = "Port 2 error box (.s2p)"
                myNameList(5) = "Effective dielectric constant of line and fluid (.complex)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(8) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".m" : FileExtensions(3) = ".complex" : FileExtensions(4) = ".s2p"
                FileExtensions(5) = ".sumofparameters" : FileExtensions(6) = ".model" : FileExtensions(7) = ".cascade"
                FileExtensions(8) = ".zip"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 5
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Use stored MatLab code"
                PullDownList(1) = "Use passed MatLab code"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor runs calculates the efffective dielectric constant of fluid in a channel from the scattering parameters of the error boxes mapping a reference calibration with air in the channel to a calibration with fluid in the channel and the effective dielectric constant of the channel filled with fluid."
                myDescription(1) = "The default frequency list is determined from the scattering-parameters of the fluid in the channel, but can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(3) = "Interface written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Estimate RLGC of fluid in a channel"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(2) As String
                OutputNames(0) = "\EpsEff"
                OutputNames(1) = "\Z0"
                OutputNames(2) = "\RLGC"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                'myConditionLocations(0) = 4
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass all of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                'myConditionNameList(0) = "Phi"
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1), MatLabDir As String = ""

            If myFirst Then 'Only do this stuff the first time

                Call MatLabInit(MechanismList1, MechValues, myMatLabInit, myMatLabMain, myMatLabSubs, myPullDownSelection1, myTextBoxContents, myMatLabFileName, myMatLabPath, MatLabDir)

                'See if we hit an error
                If MechanismList1.FatalError Then Return ToArray(Dummy)

            End If

            'Get front panel information and save it for MatLab

            Dim SP1 As RealMatrix = MechValues(3).getSParams(MechanismList1) '2) = "Port 1 error box (.s2p)"
            SP1.Write(myMatLabPath + "\SP1.s2p_binary")
            Dim SP2 As RealMatrix = MechValues(4).getSParams(MechanismList1)  '3) = "Port 2 error box (.s2p)"
            SP2.Write(myMatLabPath + "\SP2.s2p_binary")
            Dim EPSEffFluid As RealMatrix = MechValues(5).getSParams(MechanismList1)  '4) = "Effective dielectric constant of line and fluid (.complex)"
            EPSEffFluid.Write(myMatLabPath + "\EPSEffFluid.complex_binary")

            'Store the parameters to disk for the MatLab routine
            Call StoreParametersForMatLab(MechanismList1, MechValues, myMatLabPath)

            'Run MatLab
            Try
                'Initialize MatLab
                If IsNothing(myMatLab) Then 'Make sure we have a copy of MatLab on hand
                    myMatLab = New MLApp.MLApp
                End If
                myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName))   'Run MatLab routine
            Catch ex As Exception
                MechanismList1.FatalError = True : MechanismList1.ErrorReport = "MatLab Error: Check license."
            End Try

            'Read in the MatLab results from MATLAB and return them to the MUF in a format that the MUF understands

            'Eps of Material
            Dim FluidEpsEff As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")    'Freq, Re(C1), Im(C1), Re(C2), Im(C2), Re(C3), Im(C3), Re(C4), Im(C4)
            'Check that MATLAB actually created the .variables file we are expecting.
            Dim FileName As String = myMatLabPath + "\FluidEpsEff.complex_binary"
            If My.Computer.FileSystem.FileExists(FileName) Then
                FluidEpsEff.Read(FileName)    'Read in the file created by MatLab 
            Else
                MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
            End If

            'Z0
            Dim FluidZ0 As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            'Check that MATLAB actually created the .variables file we are expecting.
            FileName = myMatLabPath + "\FluidZ0.complex_binary"
            If My.Computer.FileSystem.FileExists(FileName) Then
                FluidZ0.Read(FileName)    'Read in the file created by MatLab 
            Else
                MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
            End If


            'RLGC 
            Dim RLGC As New RealMatrix(MechanismList1.FrequencyList.NRows, 5, ".complex")
            'Check that MATLAB actually created the .variables file we are expecting.
            FileName = myMatLabPath + "\RLGC.complex_binary"
            If My.Computer.FileSystem.FileExists(FileName) Then
                RLGC.Read(FileName)    'Read in the file created by MatLab 
            Else
                MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
            End If

            Dim ReturnResults(2) As Object
            ReturnResults(0) = FluidEpsEff
            ReturnResults(1) = FluidZ0
            ReturnResults(2) = RLGC

            Return ReturnResults    'Return the files created by MatLab to the MUF

        End Function


    End Class


    ''' <summary>
    ''' Post processor calls a MatLab subroutine.
    ''' </summary>
    ''' <remarks>Estimate the dielectric constant of fluid in a channel</remarks>
    Public Class Post_MUT_Song

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myFirst As Boolean = True
        Private myMatLab As MLApp.MLApp = Nothing
        Private myFirst2 As Boolean = True
        Private NFiles As Integer = 0
        Private mySP1init As RealMatrix = Nothing
        Private mySP2init As RealMatrix = Nothing

        'Default MatLab program.
        Private myMatLabInit As String = ""
        Private myMatLabMain As String = ""
        Private myMatLabSubs As String = ""

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(11) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "MatLab initialization program (.m)"
                myNameList(1) = "MatLab main program (.m)"
                myNameList(2) = "MatLab subroutines (.zip)"
                myNameList(3) = "Fluid-filled channel scattering parameters (.s2p)"
                myNameList(4) = "Air-filled channel scattering parameters (.s2p)"
                myNameList(5) = "Channel length (.parameter)"
                myNameList(6) = "Effective dielectric constant of air line (.complex)"
                myNameList(7) = "R and L of the line (.complex)"
                myNameList(8) = "Length of air line 1 (.parameter)"
                myNameList(9) = "Length of air line 2 (.parameter)"
                myNameList(10) = "Length of polymer 1 (.parameter)"
                myNameList(11) = "Length of polymer 2 (.parameter)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(8) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas"
                FileExtensions(2) = ".m" : FileExtensions(3) = ".complex" : FileExtensions(4) = ".s2p"
                FileExtensions(5) = ".sumofparameters" : FileExtensions(6) = ".model" : FileExtensions(7) = ".cascade"
                FileExtensions(8) = ".zip"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Use stored MatLab code"
                PullDownList(1) = "Use passed MatLab code"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor runs calculates the efffective dielectric constant of fluid in a channel from the scattering parameters of the channel filled with fluid and air, and the effective dielectric constant of the line with no channel."
                myDescription(1) = "The default frequency list is determined from the scattering-parameters of the fluid in the channel, but can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(3) = "Interface written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Estimate the dielectric constant of fluid in a channel"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames() As String = Nothing
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                'myConditionLocations(0) = 4
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass all of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                'myConditionNameList(0) = "Phi"
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1), MatLabDir As String = ""

            If myFirst Then 'Only do this stuff the first time

                Call MatLabInit(MechanismList1, MechValues, myMatLabInit, myMatLabMain, myMatLabSubs, myPullDownSelection1, myTextBoxContents, myMatLabFileName, myMatLabPath, MatLabDir)

                'See if we hit an error
                If MechanismList1.FatalError Then Return ToArray(Dummy)

            End If

            'Get front panel information and save it for MatLab
            Dim FluidChanSP As RealMatrix = MechValues(3).getSParams(MechanismList1) '2) = "Fluid-filled channel scattering parameters (.s2p)"
            FluidChanSP.Write(myMatLabPath + "\FluidChanSP.s2p_binary")
            Dim AirChanSP As RealMatrix = MechValues(4).getSParams(MechanismList1)    '3) = "Air-filled channel scattering parameters (.s2p)"
            AirChanSP.Write(myMatLabPath + "\AirChanSP.s2p_binary")
            Dim EPSEffAir As RealMatrix = MechValues(6).getSParams(MechanismList1)    '5) = "Effective dielectric constant of air line (.complex)" 
            EPSEffAir.Write(myMatLabPath + "\EPSEffAir.complex_binary")
            Dim RLLine As RealMatrix = MechValues(7).getSParams(MechanismList1)    '7) = "R and L of the line (.complex)" 
            RLLine.Write(myMatLabPath + "\RLLine.complex_binary")

            'Store the parameters to disk for the MatLab routine
            Call StoreParametersForMatLab(MechanismList1, MechValues, myMatLabPath)

            'Run MatLab
            Try
                'Initialize MatLab
                If IsNothing(myMatLab) Then 'Make sure we have a copy of MatLab on hand
                    myMatLab = New MLApp.MLApp
                End If
                myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName))   'Run MatLab routine
            Catch ex As Exception
                MechanismList1.FatalError = True : MechanismList1.ErrorReport = "MatLab Error: Check license."
            End Try

            'Read in the MatLab results from MATLAB and return them to the MUF in a format that the MUF understands

            'Eps of Material
            Dim FluidEpsEff As New RealMatrix(MechanismList1.FrequencyList.NRows, 9, ".complex")    'Freq, Re(C1), Im(C1), Re(C2), Im(C2), Re(C3), Im(C3), Re(C4), Im(C4)
            'Check that MATLAB actually created the .variables file we are expecting.
            Dim FileName As String = myMatLabPath + "\FluidEpsEff.complex_binary"
            If My.Computer.FileSystem.FileExists(FileName) Then
                FluidEpsEff.Read(FileName)    'Read in the file created by MatLab 
            Else
                MechanismList1.ErrorReport = "Could not find the MATLAB file " + FileName : MechanismList1.FatalError = True
            End If

            Dim ReturnResults(0) As Object
            ReturnResults(0) = FluidEpsEff

            Return ReturnResults    'Return the files created by MatLab to the MUF

        End Function


    End Class


    ''' <summary>
    ''' Post processor for saving closed-form CPW circuit parameters to file.
    ''' </summary>
    ''' <remarks>Calculate R, L, C, G, Z0, Gamma, and effective dielectric constant from closed-form CPW transmission line</remarks>
    <Serializable()> Public Class Post_TxLineParams_from_CPW
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 8
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(8) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Center-conductor width"     'W
                myNameList(1) = "Slot width"       'S
                myNameList(2) = "Metal thickness"   'T
                myNameList(3) = "Ground-plane width"    'WG
                myNameList(4) = "Substrate thickness"    'HS
                myNameList(5) = "Substrate relative dielectric constant"    'ER
                myNameList(6) = "Metal conductivity (S/M) [Cu~6.e7]"    'KAPPA CONDUCTIVITY IN S/M
                myNameList(7) = "Substrate loss tangent"    'TANDE
                myNameList(8) = "Frequencies (.s1p,.s2p,.meas,.complex)"    'F, only the frequencies will be used (that is, s-parameter data is ignored)
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(7) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".sumofparameters" : FileExtensions(2) = ".sumofparameters_archive"
                FileExtensions(3) = ".s1p" : FileExtensions(4) = ".s2p" : FileExtensions(5) = ".meas" : FileExtensions(6) = ".meas_archive" : FileExtensions(7) = ".complex"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList() As String = Nothing  'No pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing  'No pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(6) As String
                myDescription(0) = "Lossy coplanar-waveguide transmission line. " +
                "Closed-form expressions (VERSION 2.3 BY W. HEINRICH, FEBRUARY 3, 1993, Ferdinand-Braun-Institut). See W. Heinrich, Quasi-TEM description of MMIC coplanar lines including conductor-loss effects, IEEE Trans. Microwave Theory Tech., vol. 41, no. 1, pp. 45-52, Jan. 1993."
                myDescription(2) = "This post processor calculates the per-unit-length parameters R, L, G, C, the propacation constant Gamma, the impedance Z0, and the effective permittivity. The units are Frequency (GHz), R (ohms/m), L (H/m), G (S/m), C (F/m), Gamma (Np/m + i*rad/m), Z0 (Ohms), and EpsEff (unitless)"
                myDescription(4) = "By default, the frequency list is taken from the ''frequencies'' input above. You can override this by checking the Run>Set frequencies pull-down menu item."
                myDescription(6) = "Written by Wolfgang Heinrich. Translated by Dylan Williams. Post-processor implemented by Christian J. Long."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".complex"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Coplanar-waveguide transmission line"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(6) As String
                OutputNames(0) = "\EpsEff"
                OutputNames(1) = "\Z0"
                OutputNames(2) = "\R"
                OutputNames(3) = "\L"
                OutputNames(4) = "\G"
                OutputNames(5) = "\C"
                OutputNames(6) = "\Gamma"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass all of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>Distributed circuit parameters.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Initialize matrix for results
            Dim Result_EpsEff As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            Dim Result_Z0 As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            Dim Result_R As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            Dim Result_L As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            Dim Result_G As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            Dim Result_C As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            Dim Result_Gamma As New RealMatrix(MechanismList1.FrequencyList.NRows, 3, ".complex")
            Result_EpsEff.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output
            Result_Z0.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output
            Result_R.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output
            Result_L.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output
            Result_G.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output
            Result_C.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output
            Result_Gamma.Vector(1) = MechanismList1.FrequencyList 'Set the frequencies for the output

            'The mechanism values.
            Dim W As Double = MechValues(0).MechanismValue(MechanismList1)     'W      Center-conductor width
            Dim Sgap As Double = MechValues(1).MechanismValue(MechanismList1)  'Sgap   Slot width
            Dim T As Double = MechValues(2).MechanismValue(MechanismList1)     'T      Metal thickness
            Dim WG As Double = MechValues(3).MechanismValue(MechanismList1)    'WG     Ground-plane width
            Dim HS As Double = MechValues(4).MechanismValue(MechanismList1)    'HS     Substrate thickness
            Dim ER As Double = MechValues(5).MechanismValue(MechanismList1)    'ER     Substrate relative dielectric constant
            Dim KAPPA As Double = MechValues(6).MechanismValue(MechanismList1) 'KAPPA  Metal conductivity (S/M) 
            Dim TANDE As Double = MechValues(7).MechanismValue(MechanismList1) 'TANDE  Substrate loss tangent

            'Calculate the impedance from the effective dielectric constant and the capacitance per unit length.
            Dim Z0 As New Complex, GAMMA As New Complex, EpsEff As New Complex

            Dim IER As Integer = 0 'Error number
            Dim R As Double, LIND As Double, CAP As Double, GCOND As Double, EREFF As Double, BETA As Double, ALPHA As Double, ADBMM As Double, ZW As New Complex(0.0, 0.0)
            For k As Integer = 1 To MechanismList1.FrequencyList.NRows

                'Do the real work
                Dim F As Double = MechanismList1.FrequencyList(k) * 1000000000.0
                Call CPWPAR(W, Sgap, T, WG, HS, ER, KAPPA, TANDE, F, IER, R, LIND, CAP, GCOND, EREFF, BETA, ALPHA, ADBMM, ZW)
                If IER > 0 Then Call CPWPAR_Error(IER, MechanismList1)

                'Derive values of Z0, GAMMA, and EpsEff
                Dim omega As Double = 2.0 * 3.1415926535897 * F    '1/s
                Dim clight As Double = 299792458.0  'm/s
                Z0 = Complex_Number_Class.Sqrt(toComplex(R, omega * LIND) / toComplex(GCOND, omega * CAP))      'ohms
                GAMMA = Complex_Number_Class.Sqrt(toComplex(R, omega * LIND) * toComplex(GCOND, omega * CAP))   'm^-1
                If GAMMA.Im < 0.0 Then GAMMA = -GAMMA
                EpsEff = -(clight * GAMMA / omega) ^ 2

                'Store the results
                Result_EpsEff(k, 2) = EpsEff.Re : Result_EpsEff(k, 3) = EpsEff.Im
                Result_Z0(k, 2) = Z0.Re : Result_Z0(k, 3) = Z0.Im
                Result_R(k, 2) = R
                Result_L(k, 2) = LIND
                Result_G(k, 2) = GCOND
                Result_C(k, 2) = CAP
                Result_Gamma(k, 2) = GAMMA.Re : Result_Gamma(k, 3) = GAMMA.Im

            Next k

            Dim ReturnResults(6) As Object
            ReturnResults(0) = Result_EpsEff
            ReturnResults(1) = Result_Z0
            ReturnResults(2) = Result_R
            ReturnResults(3) = Result_L
            ReturnResults(4) = Result_G
            ReturnResults(5) = Result_C
            ReturnResults(6) = Result_Gamma

            Return ReturnResults    'Return the results to the MUF

        End Function


    End Class



    Private Sub MatLabInit(ByRef MechanismList1 As MechanismList, ByRef MechValues() As Object, ByVal myMatLabInit As String, ByVal myMatLabMain As String, ByVal myMatLabSubs As String, ByVal myPullDownSelection As Integer, ByVal myTextBoxContents As String, ByRef myMatLabFileName As String, ByRef myMatLabPath As String, ByRef MatLabDir As String)

        'FIGURE OUT WHERE TO PUT THE MatLab program
        MatLabDir = MechanismList1.SaveDirectory
        Dim NeedTempDir As Boolean = False
        NeedTempDir = IsNothing(MatLabDir)
        If Not NeedTempDir Then NeedTempDir = (MatLabDir = "")
        If NeedTempDir Then
            MatLabDir = Path.GetDirectoryName(My.Computer.FileSystem.GetTempFileName) + "\MUF_MatLab"
        End If
        If Not My.Computer.FileSystem.DirectoryExists(MatLabDir) Then My.Computer.FileSystem.CreateDirectory(MatLabDir)
        myMatLabFileName = MatLabDir + "\MatLabProgram.m"
        Dim myMatLabFileNameInit As String = MatLabDir + "\MatLabProgram_Initialize.m"
        Dim myMatLabFileNameSubroutines As String = MatLabDir + "\MatLabProgram_Subroutines.zip"

        'Read in the MatLab Programs
        Dim MatLabProgInit() As Byte  '0 MatLab initialization program (.m) 
        Dim MatLabProg() As Byte      '1 MatLab main program (.m) 
        Dim MatLabProgSubs() As Byte      '2 MatLab subroutines (.zip) 
        If myPullDownSelection <= 0 Then    'Translate Base64 string to Bytes
            If myMatLabInit = "" Then MechanismList1.ErrorReport = "Default MatLab module not yet defined!" : MechanismList1.FatalError = True : Exit Sub
            MatLabProgInit = Convert.FromBase64String(myMatLabInit)     'Convert text string to bytes .
            MatLabProg = Convert.FromBase64String(myMatLabMain)         'Convert text string to bytes .
            MatLabProgSubs = Convert.FromBase64String(myMatLabSubs)     'Convert text string to bytes .
        Else    'Use program from user
            MatLabProgInit = MechValues(0).getBytes() '0 MatLab initialization program (.m)
            MatLabProg = MechValues(1).getBytes()     '1 MatLab main program (.m) 
            MatLabProgSubs = MechValues(2).getBytes() '1 MatLab subroutines (.zip) 
        End If

        'Write out the MatLab files
        System.IO.File.WriteAllBytes(myMatLabFileNameInit, MatLabProgInit)
        System.IO.File.WriteAllBytes(myMatLabFileName, MatLabProg)
        System.IO.File.WriteAllBytes(myMatLabFileNameSubroutines, MatLabProgSubs)

        'Set up the FileExchange directory for MatLab
        myMatLabPath = MatLabDir + "\FileExchange"
        If Not My.Computer.FileSystem.DirectoryExists(myMatLabPath) Then My.Computer.FileSystem.CreateDirectory(myMatLabPath)

        'Write out the contents of text box
        My.Computer.FileSystem.WriteAllText(myMatLabPath + "\TextInput.txt", myTextBoxContents, False)

        'Write out the input frequency list
        Dim myFrequencyList As New RealMatrix(MechanismList1.FrequencyList.NRows, 2, ".variables")
        For kk As Integer = 1 To MechanismList1.FrequencyList.NRows
            myFrequencyList(kk, 1) = CDbl(kk) : myFrequencyList(kk, 2) = MechanismList1.FrequencyList(kk)
        Next kk
        myFrequencyList.Write(myMatLabPath + "\InputList.variables_binary")

        'Write out the suggested output time list
        Dim myTimeList As New RealMatrix(MechanismList1.TimeList.NRows, 2, ".variables")
        For kk As Integer = 1 To MechanismList1.TimeList.NRows
            myTimeList(kk, 1) = CDbl(kk) : myTimeList(kk, 2) = MechanismList1.TimeList(kk)
        Next kk
        myTimeList.Write(myMatLabPath + "\SuggestedOutputList.variables_binary")

        'Let MatLab initialize things
        Try

            Dim myMatLab1 As New MLApp.MLApp
            myMatLab1.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
            myMatLab1.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName) + "_Initialize")   'Run MatLab initialization routine
            myMatLab1.Quit()

        Catch ex As Exception

            MechanismList1.FatalError = True : MechanismList1.ErrorReport = "MatLab Error: Check license."

        End Try

        System.Threading.Thread.Sleep(1000)

        ''Check to see that we can read things. This does not help!
        'Dim DummyBytes() As Byte = System.IO.File.ReadAllBytes(myMatLabFileNameSubroutines)
        'Dim DummyBytes1() As Byte = System.IO.File.ReadAllBytes(myMatLabFileName)

    End Sub

    Sub StoreParametersForMatLab(ByRef MechanismList1 As MechanismList, ByRef MechValues() As Object, ByVal myMatLabPath As String)

        'List of systematic errors for MatLab
        Dim MatLabParameters As New RealMatrix(MechValues.Count, 2, ".variables") 'This will hold the parameters.
        For kk As Integer = 1 To MechValues.Count
            MatLabParameters(kk, 1) = CDbl(kk)
            If kk >= 4 Then
                Dim MatLabMatrices As RealMatrix = MechValues(kk - 1).getSParams(MechanismList1)
                Dim IsMechanismValue As Boolean = IsNothing(MatLabMatrices)
                If Not IsMechanismValue Then IsMechanismValue = IsNothing(MatLabMatrices.DataType)
                If IsMechanismValue Then   'This entry must be a parameter, store it for MatLab
                    MatLabParameters(kk, 2) = MechValues(kk - 1).MechanismValue(MechanismList1)
                End If
            End If
        Next kk
        MatLabParameters.Write(myMatLabPath + "\MatLabParameters.variables_binary") 'Write out the parameters for MatLab
    End Sub


    ''' <summary>
    ''' Post processor for fitting transmission-line capacitance from data
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_CapacitanceFit
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myFirstTime As Boolean = True
        Private mMax As Integer             'The maximum index that we fit to.
        Private mMin As Integer             'The maximum index that we replace to.
        Private myNumberFitFunctions As Integer = 0

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce() As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this list of input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(5) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Start fit at (GHz, .parameter)"    'Frequency at which we start the fit
                myNameList(1) = "Stop fit at (GHz, .parameter)"    'Frequency at which we stop the fit
                myNameList(2) = "Effective dielectric constant measurement (.complex)"    'Measured effective dielectric constant
                myNameList(3) = "DC load resistance (.parameter)"    'DC load resistance (.parameter)
                myNameList(4) = "Load S-parameters (Zref=Z0) (.s2p)"    'Add S-parameter files.
                myNameList(5) = "Weights (.complex)"
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(5) As String
                FileExtensions(0) = ".meas" : FileExtensions(1) = ".complex" : FileExtensions(2) = ".parameter" : FileExtensions(3) = ".sumofparameters" : FileExtensions(4) = ".s2p" : FileExtensions(5) = ".s1p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 4
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(9) As String   'Maybe should be a, sqrt(x), a+q sqrt(x), bx, a+bx, a+qsqrt(x)+bx, cx2, a+cx2, a+bx+cx2, a+bx+cx2+dx3, a+qsqrt(x)+bx+cx2+dx3
                PullDownList(0) = "Default a + bx + cx^2 fit"  'Same as (6)
                PullDownList(1) = "Fit a"
                PullDownList(2) = "Fit a + q sqrt(x)"
                PullDownList(3) = "Fit a + bx"
                PullDownList(4) = "Fit a + q sqrt(x) + bx"
                PullDownList(5) = "Fit a + cx^2"
                PullDownList(6) = "Fit a + bx + cx^2"
                PullDownList(7) = "Fit a + bx + cx^2 + dx^3"
                PullDownList(8) = "Fit a + q sqrt(x) + bx + cx^2 + dx^3"
                PullDownList(9) = "Fit a x^-1 + b x^-2 + c x^-3 + d x^-4"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing   'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(5) As String   'Make this the last pull-down. 
                PullDownList(0) = "Load Resistor: Use measurement on port 1"
                PullDownList(1) = "Load Resistor: Use measurement on port 2"
                PullDownList(2) = "Series Resistor: Use S11"
                PullDownList(3) = "Series Resistor: Use S21"
                PullDownList(4) = "Series Resistor: Use S12"
                PullDownList(5) = "Series Resistor: Use S22"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor estimates the DC capacitance of a quasiTEM transmission line from a measurement of a resistor corrected to a reference impedance of Z0."
                myDescription(2) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".variables"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Estimate transmission-line capacitance from resistor measurement."
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations(0) As Integer
                myConditionLocations(0) = 4
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList(0) As String
                myConditionNameList(0) = ""
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNames() As String = Nothing
                Return myFileNames
            End Get
        End Property


        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the measured input sparameters.
            Dim dummy As New RealMatrix(1)

            'Get start and stop frequencies
            Dim FStart As Double = MechValues(0).MechanismValue(MechanismList1) 'Frequency at which we start the fit
            Dim FStop As Double = MechValues(1).MechanismValue(MechanismList1)  'Frequency at which we stop the fit
            Dim EpsEff As RealMatrix = MechValues(2).getsparams(MechanismList1) 'Measured effective dielectric constant
            Dim DCResistance As Double = MechValues(3).MechanismValue(MechanismList1)  'DC load resistance (.parameter)
            Dim LoadSParams As RealMatrix = MechValues(4).getSParams(MechanismList1)    '4) = "Load S-parameters (Zref=Z0) (.s2p)"    'Add S-parameter files.
            Dim Weights As RealMatrix = MechValues(5).getSParams(MechanismList1)  'Weights

            'Figure out which S-Parameter data and capacitance extraction routine to use
            Dim MeasurementType As Integer = 0 'The type of standard. The default (StandardType=0) is a load resistor.
            Dim FitCol As Integer = 2       'The column of data we will use for the fit. The default (FitCol=2) is S11.
            Select Case myPullDownSelection3
                Case 1
                    If LoadSParams.DataType = ".s2p" And myPullDownSelection3 = 1 And LoadSParams.NCols >= 9 Then
                        FitCol = 8 'S22
                    End If
                Case 2
                    MeasurementType = 1 'Series resistor, reflection measurement
                    FitCol = 2 'S11
                Case 3
                    MeasurementType = 2 'Series resistor, transmission measurement
                    FitCol = 4 'S21
                Case 4
                    MeasurementType = 2 'Series resistor, transmission measurement
                    FitCol = 6 'S12
                Case 5
                    MeasurementType = 1 'Series resistor, reflection measurement
                    FitCol = 8 'S22
            End Select

            'Calculate the capacitance per unit length
            Dim p As New ComplexMatrix(1), NParams As Integer = 0
            Dim myMeasurements As New ComplexMatrix(LoadSParams.NRows), beta As New ComplexMatrix(LoadSParams.NRows)
            mMax = LoadSParams.NRows   'The default range for fitting the measurements (full range, all are fitted)
            mMin = 1   'The default range for replacing the measurements with function values (full range, all are fitted)
            For k As Integer = 1 To LoadSParams.NRows
                Dim Eps As New Complex(EpsEff(k, 2), EpsEff(k, 3))
                Dim Gamma As Complex = (2.0 * Math.PI * LoadSParams(k, 1) * 1000000000.0 / 29979245800.0) * toComplex(0.0, 1.0) * Sqrt(Eps)    'Units are 1/cm
                Select Case MeasurementType
                    Case 0 'Load resistor
                        Dim GammaLoad As New Complex(LoadSParams(k, FitCol), LoadSParams(k, FitCol + 1))
                        myMeasurements(k) = (Gamma / toComplex(0.0, 2.0 * Math.PI * LoadSParams(k, 1) * 1000000000.0 * DCResistance)) * (toComplexReal(1.0) + GammaLoad) / (toComplexReal(1.0) - GammaLoad) 'DOI:10.1109/75.84601, eq. 6
                    Case 1 'Series resistor, reflection measurement
                        Dim SParamLoad As New Complex(LoadSParams(k, FitCol), LoadSParams(k, FitCol + 1))
                        myMeasurements(k) = (2.0 * Gamma / toComplex(0.0, 2.0 * Math.PI * LoadSParams(k, 1) * 1000000000.0 * DCResistance)) * SParamLoad / (toComplexReal(1.0) - SParamLoad) 'DOI:10.1109/TMTT.2010.2091200, eq. 2
                    Case 2 'Series resistor, transmission measurement
                        Dim SParamLoad As New Complex(LoadSParams(k, FitCol), LoadSParams(k, FitCol + 1))
                        myMeasurements(k) = (2.0 * Gamma / toComplex(0.0, 2.0 * Math.PI * LoadSParams(k, 1) * 1000000000.0 * DCResistance)) * (toComplexReal(1.0) - SParamLoad) / SParamLoad 'DOI:10.1109/TMTT.2010.2091200, eq. 3
                End Select
                myMeasurements(k) = myMeasurements(k) * 1000000000000.0 'Units are pF/cm
                If LoadSParams(k, 1) <= FStop Then mMax = k
                If LoadSParams(k, 1) < FStart Then mMin = k
            Next k

            'Select the fitting functions
            Select Case myPullDownSelection1

                'Case 0 ' No fixed-function fit
                '    NParams = 0 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(myRealMatrix0.NRows, NParams + myNumberFitFunctions)

                Case 1 ' Fit a
                    NParams = 1 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                    Next k

                Case 2 ' Fit a + q sqrt(x)
                    NParams = 2 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(Math.Sqrt(x), 0.0)   'q sqrt(x)
                    Next k

                Case 3 ' Fit a + bx
                    NParams = 2 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x, 0.0)  'bx
                    Next k

                Case 4 ' Fit a + q sqrt(x) + bx
                    NParams = 3 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(Math.Sqrt(x), 0.0)   'q sqrt(x)
                        beta(k, 3) = toComplex(x, 0.0)  'bx
                    Next k

                Case 5 ' Fit a + cx^2
                    NParams = 2 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x * x, 0.0)  'cx2
                    Next k

                Case 6, 0, -1 ' Fit a + bx + cx^2
                    NParams = 3 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x, 0.0)  'bx
                        beta(k, 3) = toComplex(x * x, 0.0)  'cx2
                    Next k

                Case 7 ' Fit a + bx + cx^2 + dx^3
                    NParams = 4 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(x, 0.0)  'bx
                        beta(k, 3) = toComplex(x * x, 0.0)  'cx2
                        beta(k, 4) = toComplex(x * x * x, 0.0)  'dx3
                    Next k

                Case 8 ' Fit a + q sqrt(x) + bx + cx^2 + dx^3
                    NParams = 5 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0, 0.0)        'a
                        beta(k, 2) = toComplex(Math.Sqrt(x), 0.0)   'q sqrt(x)
                        beta(k, 3) = toComplex(x, 0.0)  'bx
                        beta(k, 4) = toComplex(x * x, 0.0)  'cx2
                        beta(k, 5) = toComplex(x * x * x, 0.0)  'dx3
                    Next k

                Case 9 'Fit a x^-1 + b x^-2 + c x^-3 + d x^-4
                    NParams = 4 : p.ReDimension(NParams + myNumberFitFunctions) : beta.ReDimension(LoadSParams.NRows, NParams)
                    For k As Integer = 1 To myMeasurements.NRows
                        Dim x As Double = LoadSParams(k, 1)
                        beta(k, 1) = toComplex(1.0 / x, 0.0)                'a x^-1 
                        beta(k, 2) = toComplex(1.0 / (x * x), 0.0)          'b x^-2 
                        beta(k, 3) = toComplex(1.0 / (x * x * x), 0.0)      'c x^-3 
                        beta(k, 4) = toComplex(1.0 / (x * x * x * x), 0.0)  'd x^-4
                    Next k

            End Select

            'Get the reduced set of frequencies we fit over
            Dim myFrequencies1 As New RealMatrix(mMax - mMin + 1)
            Dim myMeasurements1 As New ComplexMatrix(mMax - mMin + 1), beta1 As New ComplexMatrix(mMax - mMin + 1, NParams)
            Dim Weights1 As New RealMatrix(mMax - mMin + 1, 3), myPhases As New RealMatrix(myMeasurements.NRows)
            Dim AllWeightsZero As Boolean = True
            For k As Integer = 1 To myMeasurements1.NRows
                'Fit the complex values.
                myMeasurements1(k) = myMeasurements(k + mMin - 1)
                myFrequencies1(k) = LoadSParams(k + mMin - 1, 1)
                For kk As Integer = 1 To NParams
                    beta1(k, kk) = beta(k + mMin - 1, kk)
                Next kk
                For kk As Integer = 2 To 3
                    'Get the weight from the file
                    Weights1(k, kk) = Weights(k + mMin - 1, kk)
                    If Weights1(k, kk) >= 0.0 Then AllWeightsZero = False
                Next kk
            Next k
            'Report zero weights
            If AllWeightsZero Then
                For k As Integer = 1 To Weights1.NRows
                    Weights1(k, 2) = 1.0
                Next k
                If myFirstTime Then MechanismList1.ErrorReport = "Weights were equal to zero! Reset to one."
            End If

            'Solve for the fit on a reduced set of frequencies
            Call LinearFit(p, myMeasurements1, beta1, Weights1)

            'Solve for the fit on all of the frequencies
            Dim myFullFit As New ComplexMatrix(LoadSParams.NRows)
            myFullFit = beta * p

            'Solve for the fit over the frequencies used to fit the data only
            Dim myFullFit1 As New ComplexMatrix(myFrequencies1.NRows)
            myFullFit1 = beta1 * p

            'Plot the fit.
            If myFirstTime Then

                'Set up the maximum and step size for graphs if choice is obvious.
                Dim XMAx As Double = 0.0, XStep As Double = 0.0
                If LoadSParams(1, 1) < 10.0 Then XMAx = LoadSParams(LoadSParams.NRows, 1)
                If XMAx = 110.0 Then XStep = 10.0

                'Create the magnitude graph  ToDo: Note that dimensions of capactitance / unit length depend on units of Gamma
                Dim magPlot As New Plot("Frequency (GHz)", "Capacitance (pF/cm)", "Capacitance estimate from load", , XMAx, XStep)
                'Plot Model C  myMeasurements1
                Dim Sij As New RealMatrix(myFullFit.NRows)
                Sij = myFullFit.VectorRealPart(1)
                magPlot.AddCurve(LoadSParams.Vector(1), Sij, "Fit over all frequencies", , , True) 'Plot the entire fit over all frequencies

                Sij = myFullFit1.VectorRealPart(1)
                magPlot.AddCurve(myFrequencies1, Sij, "Fit over data used in fit")        'Plot the fit over the data that was considered

                'Plot Measurement
                Sij = myMeasurements.VectorRealPart(1)
                magPlot.AddCurve(LoadSParams.Vector(1), Sij, "Measurement")
                magPlot.Show()

            End If

            myFirstTime = False   'Only do setup once. 

            'That's all folks! 
            Dim ArrayOut(0) As Object
            Dim myMechanismValuesAsParameter As New RealMatrix(2, 2, ".variables")
            myMechanismValuesAsParameter(1, 1) = 1
            myMechanismValuesAsParameter(1, 2) = p(1).Re * 100.0 / 1000000000000.0  'Units of F/meter
            myMechanismValuesAsParameter(2, 1) = 2
            myMechanismValuesAsParameter(2, 2) = p(1).Re * 100.0 / 1000000000000.0  'Units of F/meter
            ArrayOut(0) = myMechanismValuesAsParameter
            Return ArrayOut

        End Function

    End Class


    ''' <summary>
    ''' Post processor for mapping arbitrary frequency results to time
    ''' </summary>
    ''' <remarks>Input .wnp file in the frequency domain, ooutputs voltages and currents in the time domain.</remarks>
    <Serializable()> Public Class Post_wnp_to_vi
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Input wave-parameter files (.wnp)"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList() As String = Nothing   'The list of mechanism (model parameter) names for this model.
                'myNameList(0) = "Start time (.parameter)"
                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(4) As String : FileExtensions(0) = ".meas" 'This is the list of aceptable file extensions for the control.
                FileExtensions(1) = ".w1p" : FileExtensions(2) = ".w2p" : FileExtensions(3) = ".w3p" : FileExtensions(4) = ".w4p"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return -2
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Drive on port 1"
                PullDownList(1) = "Drive on port 2"
                PullDownList(2) = "Drive on port 3"
                PullDownList(3) = "Drive on port 4"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Find voltage and current on port 1"
                PullDownList(1) = "Find voltage and current on port 2"
                PullDownList(2) = "Find voltage and current on port 3"
                PullDownList(3) = "Find voltage and current on port 4"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Current defined as going into DUT"
                PullDownList(1) = "Current defined as going out of DUT"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor calculates temporal voltages and currents from power-and-phase-normalized wave parameters. A file with the power transfered across the reference plane in mW is generated at well."
                myDescription(1) = "The module also calcuates a waveform file containing the voltage carried by the a wave alone. This is calculated because it may correspond to the voltage the device will delivered to a 50 ohm load, or to a reciever measurement, depending on the circumstances."
                myDescription(2) = "The desired output times MUST be set with the pull-down list 'Run>Set output times (or frequencies)'. The default frequency list is determined from the input wave parameters."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".waveform"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Voltage, current and power from .wnp file"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(3) As String
                OutputNames(0) = "\Voltage"
                OutputNames(1) = "\Current"
                OutputNames(2) = "\Waveform"
                OutputNames(3) = "\Power"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Dimension all fo the matrices we will need.
            Dim Times As New RealMatrix(MechanismList1.TimeList.NRows), TimeValues As New RealMatrix(MechanismList1.TimeList.NRows)
            Times.Fill(MechanismList1.TimeList)
            Dim Frequencies As New RealMatrix(MechanismList1.FrequencyList.NRows), A As New ComplexMatrix(MechanismList1.FrequencyList.NRows), B As New ComplexMatrix(MechanismList1.FrequencyList.NRows), FrequencyInput As New RealMatrix(MechanismList1.FrequencyList.NRows)
            Frequencies.Fill(MechanismList1.FrequencyList)
            FrequencyInput = MultipleModelInput(0).getSParams(MechanismList1)
            Dim NPorts As Integer = FrequencyInput.NPorts
            Dim NDrive As Integer = FrequencyInput.NDrive

            'Set up the outputs
            Dim Outputs(3) As Object
            Dim OutputVoltage As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".voltage")
            Dim OutputCurrent As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".current")
            Dim OutputWaveform As New RealMatrix(MechanismList1.TimeList.NRows, 3, ".waveform")
            Dim OutputPowermW As New RealMatrix(Frequencies.NRows, 3, ".power")
            Outputs(0) = OutputVoltage : Outputs(1) = OutputCurrent : Outputs(2) = OutputWaveform : Outputs(3) = OutputPowermW

            'Check to see that we have enough ports in the data set.
            If NPorts <= 0 Then MechanismList1.ErrorReport = "Number of ports in data = 0! Check file types." : MechanismList1.FatalError = True : Return Outputs
            If NDrive <= myPullDownSelection1 Then MechanismList1.ErrorReport = "Drive port number larger than number of ports in data!" : MechanismList1.FatalError = True : Return Outputs
            If NPorts <= myPullDownSelection2 Then MechanismList1.ErrorReport = "Port number larger than number of ports in data!" : MechanismList1.FatalError = True : Return Outputs

            'Choose the input column. 
            If myPullDownSelection1 < 0 Then myPullDownSelection1 = 0 'myPullDownSelection1 gives drive
            If myPullDownSelection2 < 0 Then myPullDownSelection2 = 0 'myPullDownSelection2 gives port
            Dim Col As Integer = 2 + 4 * myPullDownSelection2 + 4 * NPorts * myPullDownSelection1
            A = FrequencyInput.Vector(Col) + toComplex(0.0, 1.0) * FrequencyInput.Vector(Col + 1)
            B = FrequencyInput.Vector(Col + 2) + toComplex(0.0, 1.0) * FrequencyInput.Vector(Col + 3)

            'Transform to time'Discrete voltage-wave spectrum of repetative voltage-waves measured by Agilent VNAs.
            Call Complex_Number_Class.VoltageWavesToFixedTime(Times, TimeValues, Frequencies, A + B)    'Voltages of the A and B waves add
            OutputVoltage.Vector(1) = Times : OutputVoltage.Vector(2) = TimeValues
            Call Complex_Number_Class.VoltageWavesToFixedTime(Times, TimeValues, Frequencies, 0.02 * (A - B))   'Currents are smaller due to 50 ohm impedance, and are given by the difference of the waves.
            OutputCurrent.Vector(1) = Times : OutputCurrent.Vector(2) = TimeValues
            If myPullDownSelection3 > 0 Then OutputCurrent.Vector(2) = -TimeValues 'Current going away form DUT
            Call Complex_Number_Class.VoltageWavesToFixedTime(Times, TimeValues, Frequencies, A)    'Voltages of the A wave is the waveform 
            OutputWaveform.Vector(1) = Times : OutputWaveform.Vector(2) = TimeValues

            'Find the power going across the reference plane
            OutputPowermW.Vector(1) = Frequencies
            For k As Integer = 1 To Frequencies.NRows
                OutputPowermW(k, 2) = 10.0 * (Complex_Number_Class.Abs(A(k) * A(k)) - Complex_Number_Class.Abs(B(k) * B(k)))
                If Frequencies(k) = 0.0 Then OutputPowermW(k, 2) = 2.0 * OutputPowermW(k, 2) 'DC point
                If myPullDownSelection3 > 0 Then OutputPowermW(k, 2) = -OutputPowermW(k, 2) 'Power is going out of DUT
            Next k

            ''Check that we can go back.
            'Dim AfromWaveform As New ComplexMatrix(Frequencies.NRows)
            'Call VoltageTimesToVoltageWaves(OutputWaveform.Vector(1), OutputWaveform.Vector(2), Frequencies, AfromWaveform)

            'That's all folks!
            Return Outputs

        End Function

    End Class

    ''' <summary>
    ''' Post processor for mapping arbitrary temporal v and i to w1p and power files
    ''' </summary>
    ''' <remarks>Input voltages and currents in the time domain, output .w1p and .power file in the frequency domain.</remarks>
    <Serializable()> Public Class Post_vi_to_w1p
        Implements ICloneable
        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(1) As String    'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Voltage waveform (.voltage or .waveform)"
                myNameList(1) = "Current waveform (.current)"
                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(3) As String : FileExtensions(0) = ".meas" 'This is the list of aceptable file extensions for the control.
                FileExtensions(1) = ".voltage" : FileExtensions(2) = ".current" : FileExtensions(3) = ".waveform"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Current defined as going into DUT"
                PullDownList(1) = "Current defined as going out of DUT"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor calculates a .w1p file from temporal voltages and currents. The module also calculates the power transmited across the reference plane."
                myDescription(1) = "If you put a .waveform file into the first box, the module will get the voltage from the .waveform file and generate a corresponding current into a 50 ohm load."
                myDescription(2) = "The desired output frequencies MUST be set with the pull-down list 'Run>Set output times (or frequencies)'. The default time list is determined from the voltage."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".waveform"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Wave file (.w1p) from voltage and current"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim OutputNames(1) As String
                OutputNames(0) = "\Waves"
                OutputNames(1) = "\Power"
                Return OutputNames
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Dimension all fo the matrices we will need.
            Dim Times As New RealMatrix(MechanismList1.FrequencyList.NRows), V As New RealMatrix(MechanismList1.FrequencyList.NRows), I As New RealMatrix(MechanismList1.FrequencyList.NRows)
            Times.Fill(MechanismList1.FrequencyList)
            V = MechValues(0).getSParams(MechanismList1)    'Temporal Voltage
            If V.DataType = ".waveform" Then  'Generate the current into a 50 ohm load from the voltage.
                I.Vector(2) = 0.02 * V.Vector(2)    'Temporal current into a 50 ohm load
            Else
                I = MechValues(1).getSParams(MechanismList1)    'Temporal current
            End If

            'Set up the outputs
            Dim Frequencies As New RealMatrix(MechanismList1.TimeList.NRows), FrequencyValues As New ComplexMatrix(MechanismList1.TimeList.NRows)
            Frequencies.Fill(MechanismList1.TimeList)
            Dim Outputs(1) As Object
            Dim Outputw1p As New RealMatrix(Frequencies.NRows, 5, ".w1p")
            Dim OutputPowermW As New RealMatrix(Frequencies.NRows, 3, ".power")
            Outputs(0) = Outputw1p : Outputs(1) = OutputPowermW

            'Transform v and i to frequency A, B, repetative voltage-waves measured by Agilent VNAs.
            Dim Vfreq As New ComplexMatrix(Frequencies.NRows), Ifreq As New ComplexMatrix(Frequencies.NRows)
            Call VoltageTimesToVoltageWaves(Times, V.Vector(2), Frequencies, Vfreq)
            If myPullDownSelection1 > 0 Then 'Current is going out of DUT
                Call VoltageTimesToVoltageWaves(Times, -I.Vector(2), Frequencies, Ifreq)
            Else
                Call VoltageTimesToVoltageWaves(Times, I.Vector(2), Frequencies, Ifreq)
            End If
            Dim A As New ComplexMatrix(Frequencies.NRows), B As New ComplexMatrix(Frequencies.NRows)
            A = 0.5 * (Vfreq + 50.0 * Ifreq) : B = 0.5 * (Vfreq - 50.0 * Ifreq)
            Outputw1p.Vector(1) = Frequencies
            Outputw1p.Vector(2) = A.VectorRealPart(1)
            Outputw1p.Vector(3) = A.VectorImagPart(1)
            Outputw1p.Vector(4) = B.VectorRealPart(1)
            Outputw1p.Vector(5) = B.VectorImagPart(1)

            'Find the power going across the reference plane
            OutputPowermW.Vector(1) = Frequencies
            For k As Integer = 1 To Frequencies.NRows
                OutputPowermW(k, 2) = 10.0 * (Complex_Number_Class.Abs(A(k) * A(k)) - Complex_Number_Class.Abs(B(k) * B(k)))
                If Frequencies(k) = 0.0 Then OutputPowermW(k, 2) = 2.0 * OutputPowermW(k, 2) 'DC point
            Next k

            'That's all folks!
            Return Outputs

        End Function

    End Class



    ''' <summary>
    ''' Post processor calls a MatLab subroutine that get's one measurement at a time from the multiple input list.
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_MatLab_Improved

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myMatLabPathInput As String = ""
        Private myMatLabPathOutput As String = ""
        Private myFirst As Boolean = True
        Private myMatLab As MLApp.MLApp = Nothing
        Private myFirst2 As Boolean = True
        Private myADSFileNames(0) As String
        Private NFiles As Integer = 0
        Private myDebugNumber As Integer = 0
        Private mygetAllMultipleMeasurementsAtOnce As Boolean = False   'This distinguishes the two MatLab postprocessors

        'The MatLab read/write functions
        Private myMatLabReadSub As String = "ZnVuY3Rpb24gWyBCYXJyYXkgXSA9IFJlYWRfTVVGX0JpbmFyeSggRmlsZU5hbWUgKQ0KJVJlYWRzIGEgYmluYXJ5IGZpbGUgY3JlYXRlZCBieSB0aGUgTVVGDQolICAgRmlsZW5hbWUgaXMgdGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgcmVhZC4NCiUgICB0aGUgZGlyZWN0cm95IHdoZXJlIHRoZSBmaWxlIHJlc2lkZXMgc2hvdWxkIGhhdmUgYmVlbm1hZCBldGhlIGN1cnJlbnQNCiUgICBmb2xkZXIgd2l0aCB0aGUgY2QgY29tbWFuZA0KDQogICAgJSUgcmVhZCBpbiBzaXplIG9mIGFycmF5DQogICAgZmlkPWZvcGVuKEZpbGVOYW1lLCdyJyk7DQogICAgQT1mcmVhZChmaWQsWzEsMl0sJ2ludDMyJyk7DQogICAgbnJvd3M9QSgxKTsNCiAgICBuY29scz1BKDIpOw0KICAgICUlIG5vdyByZWFkIGluIHRoZSBhcnJheSBpdHNlbGYgYW5kIGNsb3NlIHRoZSBmaWxlIA0KICAgIFtCLGNvdW50XT1mcmVhZChmaWQsJ2Zsb2F0NjQnKTsNCiAgICBmY2xvc2UoZmlkKTsNCg0KICAgICUlIGRhdGEgaXMgc3RvcmVkIGFzIGEgdmVjdG9yIGFuZCBuZWVkcyB0byBiZSBwYXJzZWQgb3V0IGludG8gdGhlIGFycmF5DQogICAgZm9yIG49MTpuY29scw0KICAgICAgICBjPVtuOm5jb2xzOihucm93cykqbmNvbHNdOw0KICAgICAgICBCYXJyYXkoOixuKT1CKGMpOw0KICAgIGVuZA0KDQplbmQNCg0K"
        Private myMatLabWriteSub As String = "ZnVuY3Rpb24gWyB2YXJhcmdvdXQgXSA9IFdyaXRlX01VRl9CaW5hcnkoICBGaWxlTiwgQmFycmF5ICkNCiVXcml0ZXMgYSBiaW5hcnkgZmlsZSB0byBiZSByZWFkIGJ5IHRoZSBNVUYNCiUgICBGaWxlbmFtZSBpcyB0aGUgbmFtZSBvZiB0aGUgZmlsZSB0byBiZSByZWFkLg0KJSAgIHRoZSBkaXJlY3Ryb3kgd2hlcmUgdGhlIGZpbGUgcmVzaWRlcyBzaG91bGQgaGF2ZSBiZWVubWFkIGV0aGUgY3VycmVudA0KJSAgIGZvbGRlciB3aXRoIHRoZSBjZCBjb21tYW5kDQpbbnJvd3MsIG5jb2xzXT1zaXplKEJhcnJheSk7DQogICAgQSgxKT1ucm93czsNCiAgICBBKDIpPW5jb2xzOw0KZmlkPWZvcGVuKEZpbGVOLCd3Jyk7DQogICAgW2NvdW50MV09ZndyaXRlKGZpZCxBLCdpbnQzMicpOw0KDQogICAgICAgICUlIGRhdGEgaXMgc3RvcmVkIGFzIGEgdmVjdG9yIGFuZCBuZWVkcyB0byBiZSBwYXJzZWQgb3V0IGZyb20gdGhlIGFycmF5DQogICAgZm9yIG49MTpuY29scw0KICAgICAgICBjPVtuOm5jb2xzOihucm93cykqbmNvbHNdOw0KICAgICAgICBCKGMpPUJhcnJheSg6LG4pOw0KICAgIGVuZA0KDQogICAgDQogICAgJSUgbm93IHdyaXRlIHRoZSB2ZWN0b3IgYW5kIGNsb3NlIHRoZSBmaWxlIA0KICAgIFtjb3VudDJdPWZ3cml0ZShmaWQsQiwnZmxvYXQ2NCcpOw0KICAgIGZjbG9zZShmaWQpOw0KDQp2YXJhcmdvdXR7MX09Y291bnQxOw0KdmFyYXJnb3V0ezJ9PWNvdW50MjsNCg0KZW5kDQoNCg=="

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()
            myADSFileNames(0) = ".complex"
        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return mygetAllMultipleMeasurementsAtOnce
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Multiple-input file list"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "User's MatLab File"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "MatLab program (.m)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(46) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                FileExtensions(6) = ".power" : FileExtensions(7) = ".voltage" : FileExtensions(8) = ".current" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                FileExtensions(13) = ".complex" : FileExtensions(14) = ".m"
                For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                    FileExtensions(15 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                    FileExtensions(16 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                Next i1
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Dim DefaultIndex As Integer = -1
                Select Case myPullDownSelection1
                    Case -1, 0  'Multiple-input list sets default input frequencies or times
                        DefaultIndex = -2
                    Case 1  'Run>Set frequencies pull-down sets default input frequencies or times
                        DefaultIndex = -1
                    Case 2  'MatLab input 2 sets default input frequencies or times
                        DefaultIndex = 1
                    Case 3  'MatLab input 3 sets default input frequencies or times
                        DefaultIndex = 2
                End Select
                Return DefaultIndex
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Multiple-input list sets default input frequencies or times"
                PullDownList(1) = "Run>Set frequencies pull-down sets default input frequencies or times"
                PullDownList(2) = "Second post-processor input sets default input frequencies or times"
                PullDownList(3) = "Third post-processor input sets default input frequencies or times"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        Private Function GetMatLabOutputExtensions() As String()
            Dim FileExtensions(37) As String  'This is the list of aceptable MatLab file output extensions 
            FileExtensions(0) = ".waveform"
            FileExtensions(1) = ".variables"
            FileExtensions(2) = ".complex"
            FileExtensions(3) = ".power"
            FileExtensions(4) = ".voltage"
            FileExtensions(5) = ".current"
            For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                FileExtensions(6 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                FileExtensions(7 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
            Next i1
            Return FileExtensions
        End Function
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Run MatLab in user MatLab directory"
                PullDownList(1) = "Run MatLab from copy in MUF project directory"
                PullDownList(2) = "Run MatLab from copy in temp directory"
                PullDownList(3) = "Create files for debugging MatLab in user MatLab directory"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor runs a MatLab calculation. Use the special 'MatLab' pull-down menu at the top of the GUI to get started."
                myDescription(1) = "The default frequency list selected in the pull-down menu item can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return System.IO.Path.GetExtension(myADSFileNames(0)).Replace("_binary", "")
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Run a MatLab program on one multiple-input item at a time"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myADSFileNamesShort(myADSFileNames.Count - 1) As String
                For k As Integer = 0 To myADSFileNames.Count - 1
                    myADSFileNamesShort(k) = ""
                    If myADSFileNames(k) <> "" Then
                        myADSFileNamesShort(k) = "\" + System.IO.Path.GetFileNameWithoutExtension(myADSFileNames(k)) + System.IO.Path.GetExtension(myADSFileNames(k)).Replace("_binary", "").Replace(".", "_")
                    End If
                Next k
                Return myADSFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>This function is identiacal to the function in Post_MatLab_Improved1. Copy this over Post_MatLab_Improved1 when you make modifications to this code.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1)
            If myFirst Then 'Only do this stuff the first time
                myFirst = False

                'FIGURE OUT WHERE TO PUT THE MatLab stuff
                Dim MatLabDir As String = "", UserDir As String = Path.GetDirectoryName(myTextBoxContents)
                Select Case myPullDownSelection3

                    Case -1, 0, 3 'Run MatLab in original MatLab directory

                        MatLabDir = UserDir
                        myMatLabFileName = myTextBoxContents

                    Case 1      'Run MatLab from copy in MUF project directory

                        'Check to make sure that the user and MUF directories are not the same!
                        If (MechanismList1.SaveDirectory + "\MatLab").ToLower = UserDir.ToLower Then    'user and MUF directories are the same

                            MatLabDir = UserDir
                            myMatLabFileName = myTextBoxContents

                        Else    'Run MatLab from copy in MUF project directory

                            MatLabDir = MechanismList1.SaveDirectory
                            If Not My.Computer.FileSystem.DirectoryExists(MatLabDir) Then
                                MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Project directory does not exist!" : Return ToArray(Dummy)
                            End If
                            MatLabDir = MatLabDir + "\MatLab"
                            If Not My.Computer.FileSystem.DirectoryExists(MatLabDir) Then My.Computer.FileSystem.CreateDirectory(MatLabDir)

                            'Set up the Directory where MatLab will run. Copy all subdirectories.
                            Call DirectoryCopy(UserDir, MatLabDir, True, MechanismList1)

                            'Add the MatLab file from the front panel to the calculation directory
                            myMatLabFileName = MatLabDir + "\MatLabProgram.m"
                            Dim MatLabProg() As Byte = MechValues(0).getBytes()
                            System.IO.File.WriteAllBytes(myMatLabFileName, MatLabProg)

                        End If

                    Case 2  'Run MatLab from copy in temp directory

                        MatLabDir = Path.GetDirectoryName(My.Computer.FileSystem.GetTempFileName) + "\MatLab"

                        'Set up the Directory where MatLab will run. Copy all subdirectories.
                        Call DirectoryCopy(UserDir, MatLabDir, True, MechanismList1)

                        'Add the MatLab file from the front panel to the calculation directory
                        myMatLabFileName = MatLabDir + "\MatLabProgram.m"
                        Dim MatLabProg() As Byte = MechValues(0).getBytes()
                        System.IO.File.WriteAllBytes(myMatLabFileName, MatLabProg)

                End Select

                'Save the read/write routines in MatLabDir
                Dim MatLabSubByte() As Byte      'Byte version of .m file
                MatLabSubByte = Convert.FromBase64String(myMatLabReadSub)           'Convert text string to bytes .
                System.IO.File.WriteAllBytes(MatLabDir + "\Read_MUF_Binary.m", MatLabSubByte)  'Save the file
                MatLabSubByte = Convert.FromBase64String(myMatLabWriteSub)          'Convert text string to bytes .
                System.IO.File.WriteAllBytes(MatLabDir + "\Write_MUF_Binary.m", MatLabSubByte)  'Save the file

                'Housework
                FileExtensions = GetMatLabOutputExtensions()

                'Create input and output directories
                myMatLabPath = MatLabDir + "\FileExchange"
                myMatLabPathInput = myMatLabPath + "\Input"
                myMatLabPathOutput = myMatLabPath + "\Output"
                If Not My.Computer.FileSystem.DirectoryExists(myMatLabPath) Then My.Computer.FileSystem.CreateDirectory(myMatLabPath)
                If Not My.Computer.FileSystem.DirectoryExists(myMatLabPathInput) Then My.Computer.FileSystem.CreateDirectory(myMatLabPathInput)
                If Not My.Computer.FileSystem.DirectoryExists(myMatLabPathOutput) Then My.Computer.FileSystem.CreateDirectory(myMatLabPathOutput)

                'Clean up the input and output directories
                Dim files As ReadOnlyCollection(Of String)
                files = My.Computer.FileSystem.GetFiles(myMatLabPathInput, FileIO.SearchOption.SearchAllSubDirectories, "*.*")
                For Each File As String In files
                    My.Computer.FileSystem.DeleteFile(File, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.SendToRecycleBin)
                Next
                files = My.Computer.FileSystem.GetFiles(myMatLabPathOutput, FileIO.SearchOption.SearchAllSubDirectories, "*.*")
                For Each File As String In files
                    My.Computer.FileSystem.DeleteFile(File, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.SendToRecycleBin)
                Next

                'Write out the input frequency list for MatLab
                Dim myFrequencyList As New RealMatrix(MechanismList1.FrequencyList.NRows, 2, ".variables")
                For kk As Integer = 1 To MechanismList1.FrequencyList.NRows
                    myFrequencyList(kk, 1) = CDbl(kk) : myFrequencyList(kk, 2) = MechanismList1.FrequencyList(kk)
                Next kk
                myFrequencyList.Write(myMatLabPathInput + "\InputList.variables_binary")

                'Write out the suggested output time list
                Dim myTimeList As New RealMatrix(MechanismList1.TimeList.NRows, 2, ".variables")
                For kk As Integer = 1 To MechanismList1.TimeList.NRows
                    myTimeList(kk, 1) = CDbl(kk) : myTimeList(kk, 2) = MechanismList1.TimeList(kk)
                Next kk
                myTimeList.Write(myMatLabPathInput + "\SuggestedOutputList.variables_binary")

                'Initialize MatLab
                If myPullDownSelection3 <> 3 Then   'Case 3 we are just doing a setup for the user to test MatLab
                    If IsNothing(myMatLab) Then
                        myMatLab = New MLApp.MLApp
                    End If
                    myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                End If

            End If

            ''Test to ensure that all files are getting overwritten.
            'Dim filest As ReadOnlyCollection(Of String)
            'filest = My.Computer.FileSystem.GetFiles(myMatLabPathOutput, FileIO.SearchOption.SearchAllSubDirectories, "*.*")
            'For Each File As String In filest
            '    My.Computer.FileSystem.DeleteFile(File, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.SendToRecycleBin)
            'Next




            'Output the parameters for MatLab
            Dim NumberInputParameters As Integer = MechValues.Count
            Dim MatLabParameters As New RealMatrix(NumberInputParameters, 2, ".variables") 'This will hold the parameters.
            If NumberInputParameters > 1 Then
                For kk As Integer = 1 To NumberInputParameters
                    MatLabParameters(kk, 1) = CDbl(kk)
                    If kk >= 2 Then
                        Dim MatLabMatrices As RealMatrix = MechValues(kk - 1).getSParams(MechanismList1)
                        If IsNothing(MatLabMatrices.DataType) Then   'This entry must be a parameter, store it
                            MatLabParameters(kk, 2) = MechValues(kk - 1).MechanismValue(MechanismList1)
                        Else                                'This entry is a matrix, write it out
                            Dim Ext0 As String = MatLabMatrices.DataType.Replace("_binary", "")
                            MatLabMatrices.Write(myMatLabPathInput + "\MatLabMatrix" + kk.ToString + Ext0 + "_binary")
                        End If
                    End If
                Next kk
            End If
            MatLabParameters.Write(myMatLabPathInput + "\MatLabParameters.variables_binary") 'Write out the parameters for MatLab

            'Output the repeated matricies for MatLab: MultipleModelInput.getSParams(MechanismList1)
            Dim NumberMultipleModelInputs As Integer = MultipleModelInput.Count
            If NumberMultipleModelInputs > 0 Then
                For kk As Integer = 1 To NumberMultipleModelInputs
                    Dim MatLabMatrix As RealMatrix = MultipleModelInput(kk - 1).getSParams(MechanismList1)
                    Dim Ext As String = MatLabMatrix.DataType.Replace("_binary", "")
                    MatLabMatrix.Write(myMatLabPathInput + "\MatLabMultipleInputMatrix" + kk.ToString + Ext + "_binary")
                Next kk
            End If

            ''Test the conditions.
            'Dim myConditions As ConditionSupport = MechValues(1).getConditionSupport()
            'If Not IsNothing(myConditions) Then
            '    Dim ConditionsList() As String = myConditions.getNameList
            '    If Not IsNothing(ConditionsList) Then
            '        For Indx As Integer = 0 To ConditionsList.Count - 1
            '            Dim IsRealMatrix As Boolean = myConditions.IsRealMatrix(ConditionsList(Indx))
            '            If IsRealMatrix Then
            '                Dim Cond As RealMatrix = myConditions.getSParams(ConditionsList(Indx), MechanismList1)
            '                Dim nc As Integer = Cond.NCols
            '            Else
            '                Dim Cond As Double = myConditions.getDouble(ConditionsList(Indx), MechanismList1)
            '                Dim cv As Double = Cond
            '            End If
            '        Next Indx
            '    End If
            'End If

            'Check to see if the user wanted us to actually run this
            If myPullDownSelection3 = 3 Then   'Case 3 we are just doing a setup for the user to test MatLab
                MechanismList1.ErrorReport = "MatLab files created for debugging."
                MechanismList1.ErrorReport = "MatLab file created in " + Path.GetDirectoryName(myMatLabFileName) + "."
                MsgBox("MatLab file created for testing in " + Path.GetDirectoryName(myMatLabFileName) + ".", MsgBoxStyle.Information, "MatLab Post Processor")
                MechanismList1.FatalError = True : Return ToArray(Dummy)
            End If

            'Run MatLab
            myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName)) 'Run MatLab routine

            'Find the names of the files created by MATLAB. Do this only once.
            If myFirst2 Then
                myFirst2 = False
                'Count the files created by MATLAB
                Dim files As ReadOnlyCollection(Of String)
                files = My.Computer.FileSystem.GetFiles(myMatLabPathOutput, FileIO.SearchOption.SearchTopLevelOnly, "*.*")
                ReDim myADSFileNames(files.Count - 1)
                'Make a list of the file names for later
                Dim NFile As Integer = 0
                For Each File As String In files
                    myADSFileNames(NFile) = "" : NFile = NFile + 1
                    For k As Integer = 0 To FileExtensions.Count - 1
                        If System.IO.Path.GetExtension(File).ToLower = FileExtensions(k) + "_binary" Then
                            myADSFileNames(NFiles) = File : NFiles = NFiles + 1
                        End If
                    Next k
                Next File
                If NFiles <= 0 Then MechanismList1.ErrorReport = "Could not find any files created by MATLAB" : MechanismList1.FatalError = True : Return ToArray(Dummy)
            End If

            'Read in the result the user asked for from MATLAB and return it to the MUF in a format that the MUF understands
            Dim ADSOutput(NFiles - 1) As Object
            For k As Integer = 0 To NFiles - 1
                ADSOutput(k) = New RealMatrix(1)
                Dim FileName As String = myADSFileNames(k)
                'Check that MATLAB actually created the file we are going to ask for.
                If My.Computer.FileSystem.FileExists(FileName) Then
                    ADSOutput(k).Read(FileName)    'Read in the file created by ADS 
                Else
                    MechanismList1.ErrorReport = "Could not find MATLAB output file " + FileName : MechanismList1.FatalError = True
                End If
            Next k

            Return ADSOutput    'Return the files created by ADS to the MUF

        End Function

        Private Shared Sub DirectoryCopy(
            ByVal sourceDirName As String,
            ByVal destDirName As String,
            ByVal copySubDirs As Boolean,
            ByRef MechanismList1 As MechanismList)

            ' Get the subdirectories for the specified directory. 
            Dim dir As DirectoryInfo = New DirectoryInfo(sourceDirName)
            Dim dirs As DirectoryInfo() = dir.GetDirectories()

            'Check that subdirectories exist. If they don't, this may be OK, and we can continue anyway.
            If Not dir.Exists Then
                'MsgBox("Source directory does not exist or could not be found: " + sourceDirName, MsgBoxStyle.Exclamation, "PostMatLab:Directory Copy")
                'MechanismList1.FatalError = True
                'MechanismList1.ErrorReport = "Source directory does not exist or could not be found: " + sourceDirName
                Exit Sub
            End If

            ' If the destination directory doesn't exist, create it. 
            If Not Directory.Exists(destDirName) Then
                Directory.CreateDirectory(destDirName)
            End If
            ' Get the files in the directory and copy them to the new location. 
            Dim files As FileInfo() = dir.GetFiles()
            For Each file In files
                Dim temppath As String = Path.Combine(destDirName, file.Name)
                file.CopyTo(temppath, True) 'Overwrite
            Next file

            ' If copying subdirectories, copy them and their contents to new location. 
            If copySubDirs Then
                For Each subdir In dirs
                    Dim temppath As String = Path.Combine(destDirName, subdir.Name)
                    DirectoryCopy(subdir.FullName, temppath, copySubDirs, MechanismList1)
                Next subdir
            End If
        End Sub

    End Class

    ''' <summary>
    ''' Post processor calls a MatLab subroutine that get's all measurements at once from the multiple input list.
    ''' </summary>
    ''' <remarks></remarks>
    Public Class Post_MatLab_Improved1

        'Don't modify these definitions
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        'The parameters we get from myTextBoxContents
        Private FileExtensions() As String
        Private myMatLabFileName As String = ""
        Private myMatLabPath As String = ""
        Private myMatLabPathInput As String = ""
        Private myMatLabPathOutput As String = ""
        Private myFirst As Boolean = True
        Private myMatLab As MLApp.MLApp = Nothing
        Private myFirst2 As Boolean = True
        Private myADSFileNames(0) As String
        Private NFiles As Integer = 0
        Private mygetAllMultipleMeasurementsAtOnce As Boolean = True   'This distinguishes the two MatLab postprocessors

        'The MatLab read/write functions
        Private myMatLabReadSub As String = "ZnVuY3Rpb24gWyBCYXJyYXkgXSA9IFJlYWRfTVVGX0JpbmFyeSggRmlsZU5hbWUgKQ0KJVJlYWRzIGEgYmluYXJ5IGZpbGUgY3JlYXRlZCBieSB0aGUgTVVGDQolICAgRmlsZW5hbWUgaXMgdGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgcmVhZC4NCiUgICB0aGUgZGlyZWN0cm95IHdoZXJlIHRoZSBmaWxlIHJlc2lkZXMgc2hvdWxkIGhhdmUgYmVlbm1hZCBldGhlIGN1cnJlbnQNCiUgICBmb2xkZXIgd2l0aCB0aGUgY2QgY29tbWFuZA0KDQogICAgJSUgcmVhZCBpbiBzaXplIG9mIGFycmF5DQogICAgZmlkPWZvcGVuKEZpbGVOYW1lLCdyJyk7DQogICAgQT1mcmVhZChmaWQsWzEsMl0sJ2ludDMyJyk7DQogICAgbnJvd3M9QSgxKTsNCiAgICBuY29scz1BKDIpOw0KICAgICUlIG5vdyByZWFkIGluIHRoZSBhcnJheSBpdHNlbGYgYW5kIGNsb3NlIHRoZSBmaWxlIA0KICAgIFtCLGNvdW50XT1mcmVhZChmaWQsJ2Zsb2F0NjQnKTsNCiAgICBmY2xvc2UoZmlkKTsNCg0KICAgICUlIGRhdGEgaXMgc3RvcmVkIGFzIGEgdmVjdG9yIGFuZCBuZWVkcyB0byBiZSBwYXJzZWQgb3V0IGludG8gdGhlIGFycmF5DQogICAgZm9yIG49MTpuY29scw0KICAgICAgICBjPVtuOm5jb2xzOihucm93cykqbmNvbHNdOw0KICAgICAgICBCYXJyYXkoOixuKT1CKGMpOw0KICAgIGVuZA0KDQplbmQNCg0K"
        Private myMatLabWriteSub As String = "ZnVuY3Rpb24gWyB2YXJhcmdvdXQgXSA9IFdyaXRlX01VRl9CaW5hcnkoICBGaWxlTiwgQmFycmF5ICkNCiVXcml0ZXMgYSBiaW5hcnkgZmlsZSB0byBiZSByZWFkIGJ5IHRoZSBNVUYNCiUgICBGaWxlbmFtZSBpcyB0aGUgbmFtZSBvZiB0aGUgZmlsZSB0byBiZSByZWFkLg0KJSAgIHRoZSBkaXJlY3Ryb3kgd2hlcmUgdGhlIGZpbGUgcmVzaWRlcyBzaG91bGQgaGF2ZSBiZWVubWFkIGV0aGUgY3VycmVudA0KJSAgIGZvbGRlciB3aXRoIHRoZSBjZCBjb21tYW5kDQpbbnJvd3MsIG5jb2xzXT1zaXplKEJhcnJheSk7DQogICAgQSgxKT1ucm93czsNCiAgICBBKDIpPW5jb2xzOw0KZmlkPWZvcGVuKEZpbGVOLCd3Jyk7DQogICAgW2NvdW50MV09ZndyaXRlKGZpZCxBLCdpbnQzMicpOw0KDQogICAgICAgICUlIGRhdGEgaXMgc3RvcmVkIGFzIGEgdmVjdG9yIGFuZCBuZWVkcyB0byBiZSBwYXJzZWQgb3V0IGZyb20gdGhlIGFycmF5DQogICAgZm9yIG49MTpuY29scw0KICAgICAgICBjPVtuOm5jb2xzOihucm93cykqbmNvbHNdOw0KICAgICAgICBCKGMpPUJhcnJheSg6LG4pOw0KICAgIGVuZA0KDQogICAgDQogICAgJSUgbm93IHdyaXRlIHRoZSB2ZWN0b3IgYW5kIGNsb3NlIHRoZSBmaWxlIA0KICAgIFtjb3VudDJdPWZ3cml0ZShmaWQsQiwnZmxvYXQ2NCcpOw0KICAgIGZjbG9zZShmaWQpOw0KDQp2YXJhcmdvdXR7MX09Y291bnQxOw0KdmFyYXJnb3V0ezJ9PWNvdW50MjsNCg0KZW5kDQoNCg=="

        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()
            myADSFileNames(0) = ".complex"
        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return mygetAllMultipleMeasurementsAtOnce
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return "Multiple-input file list"
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "User's MatLab File"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "MatLab program (.m)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(46) As String : FileExtensions(0) = ".parameter" : FileExtensions(1) = ".meas" : FileExtensions(2) = ".model" : FileExtensions(3) = ".cascade" : FileExtensions(4) = ".sumofparameters" : FileExtensions(5) = ".waveform"  'This is the list of aceptable file extensions for the control.
                FileExtensions(6) = ".power" : FileExtensions(7) = ".voltage" : FileExtensions(8) = ".current" : FileExtensions(9) = ".sumofparameters_archive" : FileExtensions(10) = ".waveform_archive" : FileExtensions(11) = ".variables" : FileExtensions(12) = ".variables_archive"
                FileExtensions(13) = ".complex" : FileExtensions(14) = ".m"
                For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                    FileExtensions(15 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                    FileExtensions(16 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
                Next i1
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Dim DefaultIndex As Integer = -1
                Select Case myPullDownSelection1
                    Case -1, 0  'Multiple-input list sets default input frequencies or times
                        DefaultIndex = -2
                    Case 1  'Run>Set frequencies pull-down sets default input frequencies or times
                        DefaultIndex = -1
                    Case 2  'MatLab input 2 sets default input frequencies or times
                        DefaultIndex = 1
                    Case 3  'MatLab input 3 sets default input frequencies or times
                        DefaultIndex = 2
                End Select
                Return DefaultIndex
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Multiple-input list sets default input frequencies or times"
                PullDownList(1) = "Run>Set frequencies pull-down sets default input frequencies or times"
                PullDownList(2) = "Second post-processor input sets default input frequencies or times"
                PullDownList(3) = "Third post-processor input sets default input frequencies or times"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        Private Function GetMatLabOutputExtensions() As String()
            Dim FileExtensions(37) As String  'This is the list of aceptable MatLab file output extensions 
            FileExtensions(0) = ".waveform"
            FileExtensions(1) = ".variables"
            FileExtensions(2) = ".complex"
            FileExtensions(3) = ".power"
            FileExtensions(4) = ".voltage"
            FileExtensions(5) = ".current"
            For i1 As Integer = 1 To 16 'Add in the .SNP AND .wnp wave files.
                FileExtensions(6 + 2 * (i1 - 1)) = ".s" + i1.ToString + "p"
                FileExtensions(7 + 2 * (i1 - 1)) = ".w" + i1.ToString + "p"
            Next i1
            Return FileExtensions
        End Function
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Run MatLab in user MatLab directory"
                PullDownList(1) = "Run MatLab from copy in MUF project directory"
                PullDownList(2) = "Run MatLab from copy in temp directory"
                PullDownList(3) = "Create files for debugging MatLab in user MatLab directory"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(3) As String
                myDescription(0) = "This post processor runs a MatLab calculation. Use the special 'MatLab' pull-down menu at the top of the GUI to get started."
                myDescription(1) = "The default frequency list selected in the pull-down menu item can be over-ridden by checking the upper pull-down menu Run>Set input frequencies (or times)."
                myDescription(3) = "Written by Dylan Williams."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return System.IO.Path.GetExtension(myADSFileNames(0)).Replace("_binary", "")
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Run a MatLab program using all multiple-input items at once"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myADSFileNamesShort(myADSFileNames.Count - 1) As String
                For k As Integer = 0 To myADSFileNames.Count - 1
                    myADSFileNamesShort(k) = ""
                    If myADSFileNames(k) <> "" Then
                        myADSFileNamesShort(k) = "\" + System.IO.Path.GetFileNameWithoutExtension(myADSFileNames(k)) + System.IO.Path.GetExtension(myADSFileNames(k)).Replace("_binary", "").Replace(".", "_")
                    End If
                Next k
                Return myADSFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Postprocessor output
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Do all of the things that only need to be done once.
            Dim Dummy As New RealMatrix(1)
            If myFirst Then 'Only do this stuff the first time
                myFirst = False

                'FIGURE OUT WHERE TO PUT THE MatLab stuff
                Dim MatLabDir As String = "", UserDir As String = Path.GetDirectoryName(myTextBoxContents)
                Select Case myPullDownSelection3

                    Case -1, 0, 3 'Run MatLab in original MatLab directory

                        MatLabDir = UserDir
                        myMatLabFileName = myTextBoxContents

                    Case 1      'Run MatLab from copy in MUF project directory

                        'Check to make sure that the user and MUF directories are not the same!
                        If (MechanismList1.SaveDirectory + "\MatLab").ToLower = UserDir.ToLower Then    'user and MUF directories are the same

                            MatLabDir = UserDir
                            myMatLabFileName = myTextBoxContents

                        Else    'Run MatLab from copy in MUF project directory

                            MatLabDir = MechanismList1.SaveDirectory
                            If Not My.Computer.FileSystem.DirectoryExists(MatLabDir) Then
                                MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Project directory does not exist!" : Return ToArray(Dummy)
                            End If
                            MatLabDir = MatLabDir + "\MatLab"
                            If Not My.Computer.FileSystem.DirectoryExists(MatLabDir) Then My.Computer.FileSystem.CreateDirectory(MatLabDir)

                            'Set up the Directory where MatLab will run. Copy all subdirectories.
                            Call DirectoryCopy(UserDir, MatLabDir, True, MechanismList1)

                            'Add the MatLab file from the front panel to the calculation directory
                            myMatLabFileName = MatLabDir + "\MatLabProgram.m"
                            Dim MatLabProg() As Byte = MechValues(0).getBytes()
                            System.IO.File.WriteAllBytes(myMatLabFileName, MatLabProg)

                        End If

                    Case 2  'Run MatLab from copy in temp directory

                        MatLabDir = Path.GetDirectoryName(My.Computer.FileSystem.GetTempFileName) + "\MatLab"

                        'Set up the Directory where MatLab will run. Copy all subdirectories.
                        Call DirectoryCopy(UserDir, MatLabDir, True, MechanismList1)

                        'Add the MatLab file from the front panel to the calculation directory
                        myMatLabFileName = MatLabDir + "\MatLabProgram.m"
                        Dim MatLabProg() As Byte = MechValues(0).getBytes()
                        System.IO.File.WriteAllBytes(myMatLabFileName, MatLabProg)

                End Select

                'Save the read/write routines in MatLabDir
                Dim MatLabSubByte() As Byte      'Byte version of .m file
                MatLabSubByte = Convert.FromBase64String(myMatLabReadSub)           'Convert text string to bytes .
                System.IO.File.WriteAllBytes(MatLabDir + "\Read_MUF_Binary.m", MatLabSubByte)  'Save the file
                MatLabSubByte = Convert.FromBase64String(myMatLabWriteSub)          'Convert text string to bytes .
                System.IO.File.WriteAllBytes(MatLabDir + "\Write_MUF_Binary.m", MatLabSubByte)  'Save the file

                'Housework
                FileExtensions = GetMatLabOutputExtensions()

                'Create input and output directories
                myMatLabPath = MatLabDir + "\FileExchange"
                myMatLabPathInput = myMatLabPath + "\Input"
                myMatLabPathOutput = myMatLabPath + "\Output"
                If Not My.Computer.FileSystem.DirectoryExists(myMatLabPath) Then My.Computer.FileSystem.CreateDirectory(myMatLabPath)
                If Not My.Computer.FileSystem.DirectoryExists(myMatLabPathInput) Then My.Computer.FileSystem.CreateDirectory(myMatLabPathInput)
                If Not My.Computer.FileSystem.DirectoryExists(myMatLabPathOutput) Then My.Computer.FileSystem.CreateDirectory(myMatLabPathOutput)

                'Clean up the input and output directories
                Dim files As ReadOnlyCollection(Of String)
                files = My.Computer.FileSystem.GetFiles(myMatLabPathInput, FileIO.SearchOption.SearchAllSubDirectories, "*.*")
                For Each File As String In files
                    My.Computer.FileSystem.DeleteFile(File, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.SendToRecycleBin)
                Next
                files = My.Computer.FileSystem.GetFiles(myMatLabPathOutput, FileIO.SearchOption.SearchAllSubDirectories, "*.*")
                For Each File As String In files
                    My.Computer.FileSystem.DeleteFile(File, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.SendToRecycleBin)
                Next

                'Write out the input frequency list for MatLab
                Dim myFrequencyList As New RealMatrix(MechanismList1.FrequencyList.NRows, 2, ".variables")
                For kk As Integer = 1 To MechanismList1.FrequencyList.NRows
                    myFrequencyList(kk, 1) = CDbl(kk) : myFrequencyList(kk, 2) = MechanismList1.FrequencyList(kk)
                Next kk
                myFrequencyList.Write(myMatLabPathInput + "\InputList.variables_binary")

                'Write out the suggested output time list
                Dim myTimeList As New RealMatrix(MechanismList1.TimeList.NRows, 2, ".variables")
                For kk As Integer = 1 To MechanismList1.TimeList.NRows
                    myTimeList(kk, 1) = CDbl(kk) : myTimeList(kk, 2) = MechanismList1.TimeList(kk)
                Next kk
                myTimeList.Write(myMatLabPathInput + "\SuggestedOutputList.variables_binary")

                'Initialize MatLab
                If myPullDownSelection3 <> 3 Then   'Case 3 we are just doing a setup for the user to test MatLab
                    If IsNothing(myMatLab) Then
                        myMatLab = New MLApp.MLApp
                    End If
                    myMatLab.Execute("cd " + MatLabDir)   'Get MatLab in the correct directory
                End If

            End If

            'Output the parameters for MatLab
            Dim NumberInputParameters As Integer = MechValues.Count
            Dim MatLabParameters As New RealMatrix(NumberInputParameters, 2, ".variables") 'This will hold the parameters.
            If NumberInputParameters > 1 Then
                For kk As Integer = 1 To NumberInputParameters
                    MatLabParameters(kk, 1) = CDbl(kk)
                    If kk >= 2 Then
                        Dim MatLabMatrices As RealMatrix = MechValues(kk - 1).getSParams(MechanismList1)
                        If IsNothing(MatLabMatrices.DataType) Then   'This entry must be a parameter, store it
                            MatLabParameters(kk, 2) = MechValues(kk - 1).MechanismValue(MechanismList1)
                        Else                                'This entry is a matrix, write it out
                            Dim Ext0 As String = MatLabMatrices.DataType.Replace("_binary", "")
                            MatLabMatrices.Write(myMatLabPathInput + "\MatLabMatrix" + kk.ToString + Ext0 + "_binary")
                        End If
                    End If
                Next kk
            End If
            MatLabParameters.Write(myMatLabPathInput + "\MatLabParameters.variables_binary") 'Write out the parameters for MatLab

            'Output the repeated matricies for MatLab: MultipleModelInput.getSParams(MechanismList1)
            Dim NumberMultipleModelInputs As Integer = MultipleModelInput.Count
            If NumberMultipleModelInputs > 0 Then
                For kk As Integer = 1 To NumberMultipleModelInputs
                    Dim MatLabMatrix As RealMatrix = MultipleModelInput(kk - 1).getSParams(MechanismList1)
                    Dim Ext As String = MatLabMatrix.DataType.Replace("_binary", "")
                    MatLabMatrix.Write(myMatLabPathInput + "\MatLabMultipleInputMatrix" + kk.ToString + Ext + "_binary")
                Next kk
            End If

            ''Test the conditions.
            'Dim myConditions As ConditionSupport = MechValues(1).getConditionSupport()
            'If Not IsNothing(myConditions) Then
            '    Dim ConditionsList() As String = myConditions.getNameList
            '    If Not IsNothing(ConditionsList) Then
            '        For Indx As Integer = 0 To ConditionsList.Count - 1
            '            Dim IsRealMatrix As Boolean = myConditions.IsRealMatrix(ConditionsList(Indx))
            '            If IsRealMatrix Then
            '                Dim Cond As RealMatrix = myConditions.getSParams(ConditionsList(Indx), MechanismList1)
            '                Dim nc As Integer = Cond.NCols
            '            Else
            '                Dim Cond As Double = myConditions.getDouble(ConditionsList(Indx), MechanismList1)
            '                Dim cv As Double = Cond
            '            End If
            '        Next Indx
            '    End If
            'End If

            'Check to see if the user wanted us to actually run this
            If myPullDownSelection3 = 3 Then   'Case 3 we are just doing a setup for the user to test MatLab
                MechanismList1.ErrorReport = "MatLab files created for debugging."
                MechanismList1.ErrorReport = "MatLab file created in " + Path.GetDirectoryName(myMatLabFileName) + "."
                MsgBox("MatLab file created for testing in " + Path.GetDirectoryName(myMatLabFileName) + ".", MsgBoxStyle.Information, "MatLab Post Processor")
                MechanismList1.FatalError = True : Return ToArray(Dummy)
            End If

            'Run MatLab
            myMatLab.Execute(Path.GetFileNameWithoutExtension(myMatLabFileName)) 'Run MatLab routine

            'Find the names of the files created by MATLAB. Do this only once.
            If myFirst2 Then
                myFirst2 = False
                'Count the files created by MATLAB
                Dim files As ReadOnlyCollection(Of String)
                files = My.Computer.FileSystem.GetFiles(myMatLabPathOutput, FileIO.SearchOption.SearchTopLevelOnly, "*.*")
                ReDim myADSFileNames(files.Count - 1)
                'Make a list of the file names for later
                Dim NFile As Integer = 0
                For Each File As String In files
                    myADSFileNames(NFile) = "" : NFile = NFile + 1
                    For k As Integer = 0 To FileExtensions.Count - 1
                        If System.IO.Path.GetExtension(File).ToLower = FileExtensions(k) + "_binary" Then
                            myADSFileNames(NFiles) = File : NFiles = NFiles + 1
                        End If
                    Next k
                Next File
                If NFiles <= 0 Then MechanismList1.ErrorReport = "Could not find any files created by MATLAB" : MechanismList1.FatalError = True : Return ToArray(Dummy)
            End If

            'Read in the result the user asked for from MATLAB and return it to the MUF in a format that the MUF understands
            Dim ADSOutput(NFiles - 1) As Object
            For k As Integer = 0 To NFiles - 1
                ADSOutput(k) = New RealMatrix(1)
                Dim FileName As String = myADSFileNames(k)
                'Check that MATLAB actually created the file we are going to ask for.
                If My.Computer.FileSystem.FileExists(FileName) Then
                    ADSOutput(k).Read(FileName)    'Read in the file created by ADS 
                Else
                    MechanismList1.ErrorReport = "Could not find MATLAB output file " + FileName : MechanismList1.FatalError = True
                End If
            Next k

            Return ADSOutput    'Return the files created by ADS to the MUF

        End Function

        Private Shared Sub DirectoryCopy(
            ByVal sourceDirName As String,
            ByVal destDirName As String,
            ByVal copySubDirs As Boolean,
            ByRef MechanismList1 As MechanismList)

            ' Get the subdirectories for the specified directory. 
            Dim dir As DirectoryInfo = New DirectoryInfo(sourceDirName)
            Dim dirs As DirectoryInfo() = dir.GetDirectories()

            'Check that subdirectories exist. If they don't, this may be OK, and we can continue anyway.
            If Not dir.Exists Then
                'MsgBox("Source directory does not exist or could not be found: " + sourceDirName, MsgBoxStyle.Exclamation, "PostMatLab:Directory Copy")
                'MechanismList1.FatalError = True
                'MechanismList1.ErrorReport = "Source directory does not exist or could not be found: " + sourceDirName
                Exit Sub
            End If

            ' If the destination directory doesn't exist, create it. 
            If Not Directory.Exists(destDirName) Then
                Directory.CreateDirectory(destDirName)
            End If
            ' Get the files in the directory and copy them to the new location. 
            Dim files As FileInfo() = dir.GetFiles()
            For Each file In files
                Dim temppath As String = Path.Combine(destDirName, file.Name)
                file.CopyTo(temppath, True) 'Overwrite
            Next file

            ' If copying subdirectories, copy them and their contents to new location. 
            If copySubDirs Then
                For Each subdir In dirs
                    Dim temppath As String = Path.Combine(destDirName, subdir.Name)
                    DirectoryCopy(subdir.FullName, temppath, copySubDirs, MechanismList1)
                Next subdir
            End If
        End Sub

    End Class


    ''' <summary>
    ''' Post processor for merge 2 S2P s-parameters into a single S4P.
    ''' This follows the way S4P error boxes are built and coupling between ports 1,3 and 2,4 is assumed 0.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Merge2S2Ps
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to initialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Left [Port 1] Error Box (.s2p)"    'Error box for port 1 of the VNA.
                myNameList(1) = "Right [Port 2] Error Box (.s2p)"   'Error box for port 2 of the VNA.
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(1) As String : FileExtensions(0) = ".s2p" : FileExtensions(1) = ".meas"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Don't Reverse Ports of S2P files"
                PullDownList(1) = "Reverse Ports of the Left S2P file"
                PullDownList(2) = "Reverse Ports of the Right S2P file (normal case)"
                PullDownList(3) = "Reverse Ports of both S2P files"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor takes the Error Boxes described by two .s2p files and merge them into a single .s4p file. The port mapping from the two .s2p, right(R) and left(L), to the single .s4p will be the following: P1L -> P1, P1R -> P2, P2L -> P3, P2R -> P4."
                myDescription(1) = "This .s4p calibration file can be used as the complete error boxes description to calibrate RAW measurements. The coupling between ports 1/2 and 3/4 of the final .s4p is assumed as 0."
                myDescription(2) = "Adapted by Diogo Ribeiro"
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".s4p"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Convert two .s2p Error Boxes to a single .s4p calibration file"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of conditions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property


        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the left (P1) error box .s2p
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)   'This is the right (P2) error box .s2p

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 33) : myRealMatrixResult.DataType = ".s4p"
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)

            'Call the subroutine to merge the .s2p matrices into a .s4p
            Call S2PintoS4P(myRealMatrixResult, myRealMatrix0, myRealMatrix1, myPullDownSelection1)

            'Return the values to the caller. That's all folks!
            Dim Output(0) As Object : Output(0) = myRealMatrixResult
            Return Output

        End Function


    End Class

    ''' <summary>
    ''' Post processor for cascade two error boxes in the form of S4Ps.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_Cascade_S4Ps
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to initialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 0
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(1) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                myNameList(0) = "Calibration Error Boxes (.s4p)"    'Error box for both port of the VNA.
                myNameList(1) = "Adapters at the ports (.s4p)"      'Adapters that are at each port of the VNA
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(1) As String : FileExtensions(0) = ".s4p" : FileExtensions(1) = ".meas"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Don't Reverse Ports of Error Boxes"
                PullDownList(1) = "Reverse Ports of only the Left Error Box"
                PullDownList(2) = "Reverse Ports of only the Right Error Box"
                PullDownList(3) = "Reverse Ports of both Error Boxes"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(3) As String
                PullDownList(0) = "Don't Reverse Ports of Adapters"
                PullDownList(1) = "Reverse Ports of only the Left Adapter"
                PullDownList(2) = "Reverse Ports of only the Right Adapter"
                PullDownList(3) = "Reverse Ports of both Adapters"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(2) As String
                myDescription(0) = "This post processor takes the Calibration Error Boxes described by the .s4p file and cascade it with the adapters described by the second .s4p file. The port connection for cascading the Error Boxes (EB) with the Adapter (A) is the following: P1 -> P1EB, P2 -> P2EB, P3 -> P3A, P4 -> P4A, P3EB -> P1A, P4EB -> P2A. The Ports of the Error Boxes and the Adapters can be reversed before the cascade process."
                myDescription(1) = "The resultant .s4p file can be used as the complete error boxes description to calibrate RAW measurements. The coupling between ports 1/2 and 3/4 of the final .s4p is assumed as 0."
                myDescription(2) = "Adapted by Diogo Ribeiro"
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".s4p"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Cascade Calibration Error Boxes with an adapter"
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of conditions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices. Here we only have one, the input sparameters.
            Dim myRealMatrix0 As RealMatrix : myRealMatrix0 = MechValues(0).getSParams(MechanismList1)   'This is the error boxes
            Dim myRealMatrix1 As RealMatrix : myRealMatrix1 = MechValues(1).getSParams(MechanismList1)   'This is the adapters

            'Form the real matrix output
            Dim myRealMatrixResult As New RealMatrix(myRealMatrix0.NRows, 33) : myRealMatrixResult.DataType = ".s4p"
            myRealMatrixResult.Vector(1) = myRealMatrix0.Vector(1)

            'How to check if the frequencies on both files are same????
            ' It is just by compare myRealMatrix0.Vector(1) with myRealMatrix1.Vector(1)
            ' If they are different how to interpolate myRealMatrix1??


            'Separate each .s4p into two .s2p
            'Create the .s2ps
            Dim myRealMatrix0L As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrix0L.DataType = ".s2p"
            myRealMatrix0L.Vector(1) = myRealMatrix0.Vector(1)
            Dim myRealMatrix0R As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrix0R.DataType = ".s2p"
            myRealMatrix0R.Vector(1) = myRealMatrix0.Vector(1)
            Dim myRealMatrix1L As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrix1L.DataType = ".s2p"
            myRealMatrix1L.Vector(1) = myRealMatrix1.Vector(1)
            Dim myRealMatrix1R As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrix1R.DataType = ".s2p"
            myRealMatrix1R.Vector(1) = myRealMatrix1.Vector(1)


            'Separate the Error Boxes .s4p
            Call S4PintoS2P(myRealMatrix0, myRealMatrix0L, myRealMatrix0R, myPullDownSelection1)

            'Separate the Adapters .s4p
            Call S4PintoS2P(myRealMatrix1, myRealMatrix1L, myRealMatrix1R, myPullDownSelection2)

            'Cascade S2Ps
            'Create them
            Dim myRealMatrixCascadedL As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrixCascadedL.DataType = ".s2p"
            myRealMatrixCascadedL.Vector(1) = myRealMatrix0.Vector(1)
            Dim myRealMatrixCascadedR As New RealMatrix(myRealMatrix0.NRows, 9) : myRealMatrixCascadedR.DataType = ".s2p"
            myRealMatrixCascadedR.Vector(1) = myRealMatrix0.Vector(1)

            myRealMatrixCascadedL = myRealMatrix0L.CascadeSParameters(myRealMatrix1L)
            myRealMatrixCascadedR = myRealMatrix0R.CascadeSParameters(myRealMatrix1R)

            'Put the cascade results back on an S4P
            Call S2PintoS4P(myRealMatrixResult, myRealMatrixCascadedL, myRealMatrixCascadedR, 0)

            'Return the values to the caller. That's all folks!
            Dim Output(0) As Object : Output(0) = myRealMatrixResult
            'Should this also continue to be an array?
            Return Output

        End Function

    End Class


    ''' <summary>
    ''' Merge two .s2p files into a single .s4p file.
    ''' </summary>
    ''' <param name="myRealMatrixResult">The resulting .s4p file</param>
    ''' <param name="myRealMatrix0">The left .s2p file</param>
    ''' <param name="myRealMatrix1">The right .s2p file</param>
    ''' <param name="SelectedIndex">The index that we use to reverse ports</param>
    ''' <remarks></remarks>
    Private Sub S2PintoS4P(ByRef myRealMatrixResult As RealMatrix, ByRef myRealMatrix0 As RealMatrix, ByRef myRealMatrix1 As RealMatrix, ByVal SelectedIndex As Integer)

        'Step through the frequencies and copy each s-parameter complex value
        Select Case SelectedIndex
            'If any of the .s2p need to be reversed assign different s-parameters
            Case 0, -1
                'Don't reverse ports
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrixResult(k, 2) = myRealMatrix0(k, 2)  'S11 -> S11
                    myRealMatrixResult(k, 3) = myRealMatrix0(k, 3)
                    myRealMatrixResult(k, 18) = myRealMatrix0(k, 4)  'S21 -> S31
                    myRealMatrixResult(k, 19) = myRealMatrix0(k, 5)
                    myRealMatrixResult(k, 6) = myRealMatrix0(k, 6)  'S12 -> S13
                    myRealMatrixResult(k, 7) = myRealMatrix0(k, 7)
                    myRealMatrixResult(k, 22) = myRealMatrix0(k, 8)  'S22 -> S33
                    myRealMatrixResult(k, 23) = myRealMatrix0(k, 9)
                    'Right (Port2) .s2p
                    myRealMatrixResult(k, 12) = myRealMatrix1(k, 2)  'S11 -> S22
                    myRealMatrixResult(k, 13) = myRealMatrix1(k, 3)
                    myRealMatrixResult(k, 28) = myRealMatrix1(k, 4)  'S21 -> S42
                    myRealMatrixResult(k, 29) = myRealMatrix1(k, 5)
                    myRealMatrixResult(k, 16) = myRealMatrix1(k, 6)  'S12 -> S24
                    myRealMatrixResult(k, 17) = myRealMatrix1(k, 7)
                    myRealMatrixResult(k, 32) = myRealMatrix1(k, 8)  'S22 -> S44
                    myRealMatrixResult(k, 33) = myRealMatrix1(k, 9)
                Next k
            Case 1
                'Reverse Left Port
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrixResult(k, 22) = myRealMatrix0(k, 2)  'S11 -> S33
                    myRealMatrixResult(k, 23) = myRealMatrix0(k, 3)
                    myRealMatrixResult(k, 6) = myRealMatrix0(k, 4)  'S21 -> S13
                    myRealMatrixResult(k, 7) = myRealMatrix0(k, 5)
                    myRealMatrixResult(k, 18) = myRealMatrix0(k, 6)  'S12 -> S31
                    myRealMatrixResult(k, 19) = myRealMatrix0(k, 7)
                    myRealMatrixResult(k, 2) = myRealMatrix0(k, 8)  'S22 -> S11
                    myRealMatrixResult(k, 3) = myRealMatrix0(k, 9)
                    'Right (Port2) .s2p
                    myRealMatrixResult(k, 12) = myRealMatrix1(k, 2)  'S11 -> S22
                    myRealMatrixResult(k, 13) = myRealMatrix1(k, 3)
                    myRealMatrixResult(k, 28) = myRealMatrix1(k, 4)  'S21 -> S42
                    myRealMatrixResult(k, 29) = myRealMatrix1(k, 5)
                    myRealMatrixResult(k, 16) = myRealMatrix1(k, 6)  'S12 -> S24
                    myRealMatrixResult(k, 17) = myRealMatrix1(k, 7)
                    myRealMatrixResult(k, 32) = myRealMatrix1(k, 8)  'S22 -> S44
                    myRealMatrixResult(k, 33) = myRealMatrix1(k, 9)
                Next k
            Case 2
                'Reverse Right port
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrixResult(k, 2) = myRealMatrix0(k, 2)  'S11 -> S11
                    myRealMatrixResult(k, 3) = myRealMatrix0(k, 3)
                    myRealMatrixResult(k, 18) = myRealMatrix0(k, 4)  'S21 -> S31
                    myRealMatrixResult(k, 19) = myRealMatrix0(k, 5)
                    myRealMatrixResult(k, 6) = myRealMatrix0(k, 6)  'S12 -> S13
                    myRealMatrixResult(k, 7) = myRealMatrix0(k, 7)
                    myRealMatrixResult(k, 22) = myRealMatrix0(k, 8)  'S22 -> S33
                    myRealMatrixResult(k, 23) = myRealMatrix0(k, 9)
                    'Right (Port2) .s2p
                    myRealMatrixResult(k, 32) = myRealMatrix1(k, 2)  'S11 -> S44
                    myRealMatrixResult(k, 33) = myRealMatrix1(k, 3)
                    myRealMatrixResult(k, 16) = myRealMatrix1(k, 4)  'S21 -> S24
                    myRealMatrixResult(k, 17) = myRealMatrix1(k, 5)
                    myRealMatrixResult(k, 28) = myRealMatrix1(k, 6)  'S12 -> S42
                    myRealMatrixResult(k, 29) = myRealMatrix1(k, 7)
                    myRealMatrixResult(k, 12) = myRealMatrix1(k, 8)  'S22 -> S22
                    myRealMatrixResult(k, 13) = myRealMatrix1(k, 9)
                Next k
            Case 3
                'Reverse both ports
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrixResult(k, 22) = myRealMatrix0(k, 2)  'S11 -> S33
                    myRealMatrixResult(k, 23) = myRealMatrix0(k, 3)
                    myRealMatrixResult(k, 6) = myRealMatrix0(k, 4)  'S21 -> S13
                    myRealMatrixResult(k, 7) = myRealMatrix0(k, 5)
                    myRealMatrixResult(k, 18) = myRealMatrix0(k, 6)  'S12 -> S31
                    myRealMatrixResult(k, 19) = myRealMatrix0(k, 7)
                    myRealMatrixResult(k, 2) = myRealMatrix0(k, 8)  'S22 -> S11
                    myRealMatrixResult(k, 3) = myRealMatrix0(k, 9)
                    'Right (Port2) .s2p
                    myRealMatrixResult(k, 32) = myRealMatrix1(k, 2)  'S11 -> S44
                    myRealMatrixResult(k, 33) = myRealMatrix1(k, 3)
                    myRealMatrixResult(k, 16) = myRealMatrix1(k, 4)  'S21 -> S24
                    myRealMatrixResult(k, 17) = myRealMatrix1(k, 5)
                    myRealMatrixResult(k, 28) = myRealMatrix1(k, 6)  'S12 -> S42
                    myRealMatrixResult(k, 29) = myRealMatrix1(k, 7)
                    myRealMatrixResult(k, 12) = myRealMatrix1(k, 8)  'S22 -> S22
                    myRealMatrixResult(k, 13) = myRealMatrix1(k, 9)
                Next k
        End Select

    End Sub

    ''' <summary>
    ''' Split an .s4p file into two .s2p files
    ''' </summary>
    ''' <param name="myRealMatrix0">The .s4p file you start with</param>
    ''' <param name="myRealMatrix0L">The left .s2p file</param>
    ''' <param name="myRealMatrix0R">The right .s2p file</param>
    ''' <param name="SelectedIndex"></param>
    ''' <remarks></remarks>
    Private Sub S4PintoS2P(ByRef myRealMatrix0 As RealMatrix, ByRef myRealMatrix0L As RealMatrix, ByRef myRealMatrix0R As RealMatrix, ByVal SelectedIndex As Integer)
        'Step through the frequencies and copy each s-parameter complex value
        Select Case SelectedIndex
            'If any of the .s2p need to be reversed assign different s-parameters
            Case 0, -1
                'Don't reverse ports
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrix0L(k, 2) = myRealMatrix0(k, 2)   'S11 -> S11
                    myRealMatrix0L(k, 3) = myRealMatrix0(k, 3)
                    myRealMatrix0L(k, 4) = myRealMatrix0(k, 18)  'S21 -> S31
                    myRealMatrix0L(k, 5) = myRealMatrix0(k, 19)
                    myRealMatrix0L(k, 6) = myRealMatrix0(k, 6)   'S12 -> S13
                    myRealMatrix0L(k, 7) = myRealMatrix0(k, 7)
                    myRealMatrix0L(k, 8) = myRealMatrix0(k, 22)  'S22 -> S33
                    myRealMatrix0L(k, 9) = myRealMatrix0(k, 23)
                    'Right (Port2) .s2p
                    myRealMatrix0R(k, 2) = myRealMatrix0(k, 12)  'S11 -> S22
                    myRealMatrix0R(k, 3) = myRealMatrix0(k, 13)
                    myRealMatrix0R(k, 4) = myRealMatrix0(k, 28)  'S21 -> S42
                    myRealMatrix0R(k, 5) = myRealMatrix0(k, 29)
                    myRealMatrix0R(k, 6) = myRealMatrix0(k, 16)  'S12 -> S24
                    myRealMatrix0R(k, 7) = myRealMatrix0(k, 17)
                    myRealMatrix0R(k, 8) = myRealMatrix0(k, 32)  'S22 -> S44
                    myRealMatrix0R(k, 9) = myRealMatrix0(k, 33)
                Next k
            Case 1
                'Reverse Left Port
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrix0L(k, 2) = myRealMatrix0(k, 22)  'S11 -> S33
                    myRealMatrix0L(k, 3) = myRealMatrix0(k, 23)
                    myRealMatrix0L(k, 4) = myRealMatrix0(k, 6)   'S21 -> S13
                    myRealMatrix0L(k, 5) = myRealMatrix0(k, 7)
                    myRealMatrix0L(k, 6) = myRealMatrix0(k, 18)  'S12 -> S31
                    myRealMatrix0L(k, 7) = myRealMatrix0(k, 19)
                    myRealMatrix0L(k, 8) = myRealMatrix0(k, 2)   'S22 -> S11
                    myRealMatrix0L(k, 9) = myRealMatrix0(k, 3)
                    'Right (Port2) .s2p
                    myRealMatrix0R(k, 2) = myRealMatrix0(k, 12)  'S11 -> S22
                    myRealMatrix0R(k, 3) = myRealMatrix0(k, 13)
                    myRealMatrix0R(k, 4) = myRealMatrix0(k, 28)  'S21 -> S42
                    myRealMatrix0R(k, 5) = myRealMatrix0(k, 29)
                    myRealMatrix0R(k, 6) = myRealMatrix0(k, 16)  'S12 -> S24
                    myRealMatrix0R(k, 7) = myRealMatrix0(k, 17)
                    myRealMatrix0R(k, 8) = myRealMatrix0(k, 32)  'S22 -> S44
                    myRealMatrix0R(k, 9) = myRealMatrix0(k, 33)
                Next k
            Case 2
                'Reverse Right port
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrix0L(k, 2) = myRealMatrix0(k, 2)   'S11 -> S11
                    myRealMatrix0L(k, 3) = myRealMatrix0(k, 3)
                    myRealMatrix0L(k, 4) = myRealMatrix0(k, 18)  'S21 -> S31
                    myRealMatrix0L(k, 5) = myRealMatrix0(k, 19)
                    myRealMatrix0L(k, 6) = myRealMatrix0(k, 6)   'S12 -> S13
                    myRealMatrix0L(k, 7) = myRealMatrix0(k, 7)
                    myRealMatrix0L(k, 8) = myRealMatrix0(k, 22)  'S22 -> S33
                    myRealMatrix0L(k, 9) = myRealMatrix0(k, 23)
                    'Right (Port2) .s2p
                    myRealMatrix0R(k, 2) = myRealMatrix0(k, 32)  'S11 -> S44
                    myRealMatrix0R(k, 3) = myRealMatrix0(k, 33)
                    myRealMatrix0R(k, 4) = myRealMatrix0(k, 16)  'S21 -> S24
                    myRealMatrix0R(k, 5) = myRealMatrix0(k, 17)
                    myRealMatrix0R(k, 6) = myRealMatrix0(k, 28)  'S12 -> S42
                    myRealMatrix0R(k, 7) = myRealMatrix0(k, 29)
                    myRealMatrix0R(k, 8) = myRealMatrix0(k, 12)  'S22 -> S22
                    myRealMatrix0R(k, 9) = myRealMatrix0(k, 13)
                Next k
            Case 3
                'Reverse both ports
                For k As Integer = 1 To myRealMatrix0.NRows
                    'Left (Port1) .s2p
                    myRealMatrix0L(k, 2) = myRealMatrix0(k, 22)  'S11 -> S33
                    myRealMatrix0L(k, 3) = myRealMatrix0(k, 23)
                    myRealMatrix0L(k, 4) = myRealMatrix0(k, 6)   'S21 -> S13
                    myRealMatrix0L(k, 5) = myRealMatrix0(k, 7)
                    myRealMatrix0L(k, 6) = myRealMatrix0(k, 18)  'S12 -> S31
                    myRealMatrix0L(k, 7) = myRealMatrix0(k, 19)
                    myRealMatrix0L(k, 8) = myRealMatrix0(k, 2)   'S22 -> S11
                    myRealMatrix0L(k, 9) = myRealMatrix0(k, 3)
                    'Right (Port2) .s2p
                    myRealMatrix0R(k, 2) = myRealMatrix0(k, 32)  'S11 -> S44
                    myRealMatrix0R(k, 3) = myRealMatrix0(k, 33)
                    myRealMatrix0R(k, 4) = myRealMatrix0(k, 16)  'S21 -> S24
                    myRealMatrix0R(k, 5) = myRealMatrix0(k, 17)
                    myRealMatrix0R(k, 6) = myRealMatrix0(k, 28)  'S12 -> S42
                    myRealMatrix0R(k, 7) = myRealMatrix0(k, 29)
                    myRealMatrix0R(k, 8) = myRealMatrix0(k, 12)  'S22 -> S22
                    myRealMatrix0R(k, 9) = myRealMatrix0(k, 13)
                Next k
        End Select

    End Sub

    ''' <summary>
    ''' Post processor for direct power-meter comparison with PNA.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_PowerDirectComparisonSystem
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 3
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get
                Dim myNameList(7) As String   'The list of mechanism (model parameter) names for this model.
                'Set up the list of input parameters for this post-processor.
                'This list will be displayed for the user and identify the role of each input parameter.
                'Wave-amplitude corresponding to readings from power meter under test (.w1p).
                myNameList(0) = "Reflection coefficient of device under test (.s1p or .s2p)"
                myNameList(1) = "Reflection coefficient of standard (.s1p or .s2p)"
                myNameList(2) = "Reflection coefficient of generator (.s1p)"
                myNameList(3) = "DUT power reading (.power)"
                myNameList(4) = "Standard power reading (.power)"
                myNameList(5) = "Power reading at the port 3 monitor when DUT is connected (.power)"
                myNameList(6) = "Power reading at the port 3 monitor when standard is connected (.power)"
                myNameList(7) = "Efficiency or calibration factor of standard (.complex)"
                Return myNameList
            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(5) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".w1p" : FileExtensions(2) = ".s1p" : FileExtensions(3) = ".s2p" : FileExtensions(4) = ".complex" : FileExtensions(5) = ".power"
                '.meas, .w1p, .s1p, .s2p, .complex, .power
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(3) As String '= Nothing
                PullDownList(0) = "Reflection coefficients (DUT and standard) both measured at port 1"
                PullDownList(1) = "Reflection coefficients both measured at port 2"
                PullDownList(2) = "Standard port 1, DUT port 2"
                PullDownList(3) = "DUT port 1, Standard port 2"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList(1) As String
                PullDownList(0) = "Efficiency of standard was entered"
                PullDownList(1) = "Calibration factor of standard was entered"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(10) As String
                myDescription(0) = "This post processor determines the efficiency, calibration factor and relfection coefficient of a power meter."
                myDescription(2) = "The efficiency and calibration factor are outputed as a .complex file and the reflection coefficient as a .s1p file."
                myDescription(4) = "Efficiency definitions from second paragraph of section 2.1 (on page 3) of NIST Technote 1397 Direct Comparison Transfer of Microwave Power Sensor Calibrations by M.P. Weidman"
                myDescription(6) = "Calibration factor definitions from Eq 2-12 on page 19 of Application Note 1449-1 'Fundamentals of RF and Microwave Power Measurements (Part 1)'"
                myDescription(8) = "The default frequency list is determined from the DUT power reading."
                myDescription(10) = "Written by Kristine Guo and Michael Balmes."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Dim myExt As String = ".complex"
                Return myExt
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Determine the efficiency, calibration factor, relfection coefficient and uncertainties of a power meter with the NIST direct comparison system"
            End Get
        End Property

        ''' <summary>
        ''' Returns the list of names for the output data
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>This is only needed if the post processor returns multiple outputs.
        ''' The names should be of the form \name 
        ''' The length of the array must be as long as the length of ther returned values. However, it can be padded with spaces if it is longer.</remarks>
        Public ReadOnly Property GetOutputNames() As String()
            Get
                Dim myFileNamesShort(4) As String
                myFileNamesShort(0) = "\Efficiency"
                myFileNamesShort(1) = "\CalFactor"
                myFileNamesShort(2) = "\Gamma"
                myFileNamesShort(3) = "\CascadableGamma"
                myFileNamesShort(4) = "\Eff_CF_Gamma"
                Return myFileNamesShort
            End Get
        End Property

        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Scattering parameters of the model
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            'Get the input real matrices.
            'Freq Re(S11) Im(S11) Re(S21) Im(S21) Re(S12) Im(S12) Re(S22) Im(S22)
            '     everything except....                           Gamma of device on port 2
            'Power from Re(S11) and Im(S11)
            Dim GammaDUT As RealMatrix : GammaDUT = MechValues(0).getSParams(MechanismList1)
            Dim GammaStandard As RealMatrix : GammaStandard = MechValues(1).getSParams(MechanismList1)
            Dim GammaGenerator As RealMatrix : GammaGenerator = MechValues(2).getSParams(MechanismList1)
            Dim PowerDUT As RealMatrix : PowerDUT = MechValues(3).getSParams(MechanismList1)
            Dim PowerStandard As RealMatrix : PowerStandard = MechValues(4).getSParams(MechanismList1)
            Dim PowerDUT3 As RealMatrix : PowerDUT3 = MechValues(5).getSParams(MechanismList1)
            Dim PowerStandard3 As RealMatrix : PowerStandard3 = MechValues(6).getSParams(MechanismList1)
            Dim EfficiencyS As RealMatrix : EfficiencyS = MechValues(7).getSParams(MechanismList1)

            'Read in the power measurements and average them

            Dim myOutputMatrix(4) As Object
            myOutputMatrix(0) = New RealMatrix(GammaDUT.NRows, 3, ".complex")                      'Efficiency of the power meter under test (.complex)
            myOutputMatrix(1) = New RealMatrix(GammaDUT.NRows, 3, ".complex")                      'Calibration factor of the power meter under test (.complex)
            myOutputMatrix(2) = New RealMatrix(GammaDUT.NRows, 3, ".s1p")                          'Reflection coefficient of the power meter under test (.s1p)
            myOutputMatrix(3) = New RealMatrix(GammaDUT.NRows, 9, ".s2p")                          'Cascadable reflection coefficient of the power meter under test (.s2p)
            myOutputMatrix(3).InitializeAsSParams()
            myOutputMatrix(4) = New RealMatrix(GammaDUT.NRows, 7, ".complex")                      'Efficiency, calibration factor, reflection coefficient of the power meter under test (.complex)

            'Outputs have the same frequencies as the inputs
            myOutputMatrix(0).Vector(1) = GammaDUT.Vector(1)
            myOutputMatrix(1).Vector(1) = GammaDUT.Vector(1)
            myOutputMatrix(2).Vector(1) = GammaDUT.Vector(1)
            myOutputMatrix(3).Vector(1) = GammaDUT.Vector(1)
            myOutputMatrix(4).Vector(1) = GammaDUT.Vector(1)

            'Calculate the efficiency, calibration factor and reflection coefficient of the power meter under test
            'Efficiency definitions from second paragraph of section 2.1 (on page 3) of NIST Technote 1397 Direct Comparison Transfer of Microwave Power Sensor Calibrations by M.P. Weidman
            'Calibration factor definitions from Eq 2-12 on page 19 of Application Note 1449-1 "Fundamentals of RF and Microwave Power Measurements (Part 1)" 
            For k As Integer = 1 To GammaDUT.NRows

                'Reflection coefficients
                Dim GammaU As New Complex(GammaDUT(k, 2), GammaDUT(k, 3))
                Dim GammaS As New Complex(GammaStandard(k, 2), GammaStandard(k, 3))
                Select Case myPullDownSelection1
                    Case 1
                        GammaU = toComplex(GammaDUT(k, 8), GammaDUT(k, 9))
                        GammaS = toComplex(GammaStandard(k, 8), GammaStandard(k, 9))
                    Case 2
                        GammaU = toComplex(GammaDUT(k, 8), GammaDUT(k, 9))
                    Case 3
                        GammaS = toComplex(GammaStandard(k, 8), GammaStandard(k, 9))
                End Select

                Dim GammaG As New Complex(GammaGenerator(k, 2), GammaGenerator(k, 3))

                Dim GamUAbs As Double = Abs(GammaU)
                Dim GamGAbs As Double = Abs(GammaG)
                Dim GamSAbs As Double = Abs(GammaS)

                'Power readings
                Dim P_U As Double = PowerDUT(k, 2)
                Dim P_S As Double = PowerStandard(k, 2)
                Dim P_3U As Double = PowerDUT3(k, 2)
                Dim P_3S As Double = PowerStandard3(k, 2)
                'In case the powers were in .w1p files, convert wave amplitude to power in mW using Agilent voltage-wave normalization
                'a = sqrt(0.1*P_mW)     P_mW = 10.0 * |a|^2
                If PowerDUT.DataType = ".w1p" Then P_U = 10.0 * (PowerDUT(k, 2) * PowerDUT(k, 2) + PowerDUT(k, 3) * PowerDUT(k, 3))
                If PowerStandard.DataType = ".w1p" Then P_S = 10.0 * (PowerStandard(k, 2) * PowerStandard(k, 2) + PowerStandard(k, 3) * PowerStandard(k, 3))
                If PowerDUT3.DataType = ".w1p" Then P_3U = 10.0 * (PowerDUT3(k, 2) * PowerDUT3(k, 2) + PowerDUT3(k, 3) * PowerDUT3(k, 3))
                If PowerStandard3.DataType = ".w1p" Then P_3S = 10.0 * (PowerStandard3(k, 2) * PowerStandard3(k, 2) + PowerStandard3(k, 3) * PowerStandard3(k, 3))

                'Input the efficiency
                Dim Ns As Double = 0.0
                Select Case myPullDownSelection2
                    Case -1, 0   'PullDownList(0) = "Efficiency of standard was entered"
                        Ns = EfficiencyS(k, 2)
                    Case 1      'PullDownList(1) = "Calibration factor of standard was entered"
                        Ns = EfficiencyS(k, 2) / (1.0 - GamSAbs * GamSAbs)
                End Select

                'Resulting efficiency of DUT from (3) of tech note
                Dim val As Double = Abs(1.0 - GammaU * GammaG)
                Dim val2 As Double = Abs(1.0 - GammaS * GammaG)
                Dim Nu As Double = Ns * (P_3S / P_3U) * (P_U / P_S) * ((1.0 - GamSAbs * GamSAbs) / (1.0 - GamUAbs * GamUAbs)) * val * val / (val2 * val2)

                myOutputMatrix(0)(k, 2) = Nu
                myOutputMatrix(4)(k, 2) = Nu

                'Reflection coefficient
                myOutputMatrix(2)(k, 2) = GammaU.Re : myOutputMatrix(2)(k, 3) = GammaU.Im
                myOutputMatrix(3)(k, 2) = GammaU.Re : myOutputMatrix(3)(k, 3) = GammaU.Im
                myOutputMatrix(4)(k, 6) = GammaU.Re : myOutputMatrix(4)(k, 7) = GammaU.Im

                'Calibration Factor
                Dim CF As Double = Nu * (1.0 - Abs(GammaU) * Abs(GammaU))
                myOutputMatrix(1)(k, 2) = CF
                myOutputMatrix(4)(k, 4) = CF

            Next k

            'That's all folks!
            Return myOutputMatrix

        End Function

    End Class

    ''' <summary>
    ''' Post processor for extracting X-Parameters from intermediate files using the PNA-X.
    ''' </summary>
    ''' <remarks></remarks>
    <Serializable()> Public Class Post_ExtractXPwithPNAX
        Implements ICloneable
        Private myPullDownSelection1 As Integer = -1
        Private myPullDownSelection2 As Integer = -1
        Private myPullDownSelection3 As Integer = -1
        Private myTextBoxContents As String = ""
        Private myNVNA As AgilentNVNA.Application
        Private myPNAXAddress As String = ""
        Private myLocalPath As String = ""
        Private myPNAXPath As String = ""

        Public Function Clone() As Object Implements System.ICloneable.Clone
            Dim m As New MemoryStream()
            Dim f As New BinaryFormatter()
            f.Serialize(m, Me)
            m.Seek(0, SeekOrigin.Begin)
            Return f.Deserialize(m)
        End Function
        'The user needs to intialize all of the values below.
        ''' <summary>
        ''' Set up the NameList for the model.
        ''' </summary>
        ''' <remarks>Use getNameList, getDescription, getTitle after initializeing.</remarks>
        Public Sub New()

        End Sub
        ''' <summary>
        ''' Determines whether or not the multiple measurements specified in getMultipleMeasurements
        ''' are all gotten at once, or whether we loop through them
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>The default is false</remarks>
        Public ReadOnly Property getAllMultipleMeasurementsAtOnce As Boolean
            Get
                Return False
            End Get
        End Property
        ''' <summary>
        ''' Instruct the post-processor manager to run the post-processor multiple times on this input data
        ''' </summary>
        ''' <value>A string with a descriptive title of the multiple measurements.</value>
        ''' <returns></returns>
        ''' <remarks>Setting this blank disables the ability to treat multiple measurements.</remarks>
        Public ReadOnly Property getMultipleMeasurements() As String
            Get
                Return ""
            End Get
        End Property
        ''' <summary>
        ''' A descriptive title for the text input required.
        ''' </summary>
        ''' <value></value>
        ''' <returns>A short string with a descriptive title for the text input required.</returns>
        ''' <remarks>Set to "" if you don't need user input from the text box.</remarks>
        Public ReadOnly Property getTextBoxDescription() As String
            Get
                Return "Options (see below):"
            End Get
        End Property
        ''' <summary>
        ''' The contents of the text box entered by the user.
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setTextBoxContents() As String
            Set(ByVal value As String)
                myTextBoxContents = value
            End Set
        End Property
        ''' <summary>
        ''' Tells the caller that the namelist must be reset when the pull-down selection is changed.
        ''' </summary>
        ''' <value></value>
        ''' <returns>True to force a reset of the namelist when the pull-down selection is changed.</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getResetOnPullDownSelect() As Boolean()
            Get
                Dim ResetOnPullDownSelect(2) As Boolean
                ResetOnPullDownSelect(0) = False
                ResetOnPullDownSelect(1) = False
                ResetOnPullDownSelect(2) = False
                Return ResetOnPullDownSelect
            End Get
        End Property
        ''' <summary>
        ''' Get the NameList for this model
        ''' </summary>
        ''' <value></value>
        ''' <returns>The names for the mechanisms.</returns>
        ''' <remarks>This needs to be customized by the programmer.</remarks>
        Public ReadOnly Property getNameList() As String()
            Get

                Dim myNameList(0) As String   'The list of mechanism (model parameter) names for this model.
                myNameList(0) = "Calibrated power waves (.meas)"

                Return myNameList

            End Get
        End Property
        ''' <summary>
        ''' Select the file extensions that can be dropped as arguments into this Post Processor
        ''' </summary>
        ''' <value></value>
        ''' <returns>A list of the file extentions</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property SetFileExtensions() As String()
            Get
                Dim FileExtensions(1) As String : FileExtensions(0) = ".meas" : FileExtensions(1) = ".meas_archive"
                Return FileExtensions
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default frequency list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set frequencies pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module. The user can override this default by checking the Run>Set frequencies pull-down menu item.</remarks>
        Public ReadOnly Property setFrequencyList() As Integer
            Get
                Return 1
            End Get
        End Property
        ''' <summary>
        ''' Determines how the default time list is generated. 
        ''' </summary>
        ''' <value>Multiple input list = -2, Run>Set times pull-down menu item = -1, list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>You should add a description of how this is set to the overall description of this module if applicable. The user can override this default by checking the Run>Set times pull-down menu item.</remarks>
        Public ReadOnly Property setTimeList() As Integer
            Get
                Return -1
            End Get
        End Property
        ''' <summary>
        ''' Set up the first pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList1() As String()
            Get
                Dim PullDownList(2) As String
                PullDownList(0) = "Use PNA-X for extraction"
                PullDownList(1) = "Use MUF extraction with phase-normalized waves"
                PullDownList(2) = "Use MUF extraction with raw waves"
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the second pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList2() As String()
            Get
                Dim PullDownList() As String = Nothing 'No second pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' Set up the third pull-down list on the front panel.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The selections in the pull-down list</returns>
        ''' <remarks></remarks>
        Public ReadOnly Property getPullDownList3() As String()
            Get
                Dim PullDownList() As String = Nothing  'No third pulldown list please
                Return PullDownList
            End Get
        End Property
        ''' <summary>
        ''' The caller will set these before calling getRealMatrix or this instance will not know what the user selected.
        ''' Also, the caller 
        ''' </summary>
        ''' <value></value>
        ''' <remarks></remarks>
        Public WriteOnly Property setPullDownSelections() As Integer()
            Set(ByVal value As Integer())
                myPullDownSelection1 = value(0)
                myPullDownSelection2 = value(1)
                myPullDownSelection3 = value(2)
            End Set
        End Property
        ''' <summary>
        ''' Description for the model.
        ''' </summary>
        ''' <value>Model description</value>
        ''' <returns></returns>
        ''' <remarks>This appears below the list of model parameters on the front page of the model menu.
        ''' Please follow this example, starting with title, then a brief description, and then your author information.</remarks>
        Public ReadOnly Property getDescription() As String()
            Get
                'Setup a description for the model here. This will appear on the form under the model setup.
                Dim myDescription(4) As String
                myDescription(0) = "This post processor extracts X-Parameters from MDIF files containing power wave measurements calibrated by the MUF."
                myDescription(1) = "Currently 2-port devices are supported. For remote PNA-X extraction a mapped network drive is required to transfer data."
                myDescription(2) = "Please specify the PNA-X network address, local path, and remote path, in the Options textbox above, separated by ';' ."
                myDescription(3) = "Local path and remote path must point to the same location when navigated on this PC and the PNA-X, respectively."
                myDescription(4) = "Written by Laurence Stant, n3m-labs 2017."
                Return myDescription
            End Get
        End Property
        ''' <summary>
        ''' Get the extension characterizing the result.
        ''' </summary>
        ''' <value></value>
        ''' <returns>The extension</returns>
        ''' <remarks>The options are .complex, .s1p, .s2p, and .s4p.
        ''' These will be bound up in a .meas object where the user can plot them, etc.
        ''' The types .complex and .s1p are the same, as they both have a single complex number at each frequency.
        ''' Real results should be saved as .complex with a zero imaginary part.</remarks>
        Public ReadOnly Property getResultExtension() As String
            Get
                Return ".x2p"
            End Get
        End Property
        ''' <summary>
        ''' Title of the model
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Appears on the front page of the menu.
        ''' Please start the name with something identifying the source of the model, such as the company or instituition acronym.
        ''' These titles should be short.</remarks>
        Public ReadOnly Property getTitle() As String
            Get
                getTitle = "Extract X-parameters from power wave data in MDIF format."
            End Get
        End Property


        ''' <summary>
        ''' Determines where the conditions associate with the output come from. 
        ''' </summary>
        ''' <value>Multiple input list = -1 and list of input parameters = index of input parameter</value>
        ''' <returns></returns>
        ''' <remarks>The number of condtions here must agree with the number of conditions in the ConditionNameList.</remarks>
        Public ReadOnly Property setConditionLocations() As Integer()
            Get
                Dim myConditionLocations() As Integer = Nothing
                Return myConditionLocations
            End Get
        End Property
        ''' <summary>
        ''' Determines the names of the conditions. 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>Set a name to a blank to let the post processor pass oll of the conditions of the item through the post process to the output.</remarks>
        Public ReadOnly Property setConditionNameList() As String()
            Get
                Dim myConditionNameList() As String = Nothing
                Return myConditionNameList
            End Get
        End Property

        ''' <summary>
        ''' Device model parameters determined by ADS
        ''' </summary>
        ''' <param name="MechValues">The list of input objects to the post processor.</param>
        ''' <param name="MechanismList1">The list of mechanisms we need to calculate the output.</param>
        ''' <param name="MultipleModelInput">The multiple input object to the post processor.</param>
        ''' <returns>The scattering parameters of the model.</returns>
        ''' <remarks>The mechanism list also has the frequency list inside.</remarks>
        Public Function getRealMatrix(ByVal MechValues() As Object, ByVal MechanismList1 As MechanismList, ByVal MultipleModelInput() As Object) As Object()

            ' Initialise the input MDIF file so we have something to return if things go wrong!
            Dim myMDIF As New MDIF()
            myMDIF = MechValues(0).getMDIF(MechanismList1)

            If MechanismList1.InitializeFlag And myPullDownSelection1 = 0 Then
                ' First run and we are using PNA-X, so set up communication

                If (myTextBoxContents.Trim() = "") Then
                    ' Assume local extraction - MUF running on PNA-X. Trim guards against invisible spaces when 'empty'
                    myPNAXAddress = "localhost"
                    myLocalPath = Path.GetTempPath
                    myPNAXPath = myLocalPath
                Else
                    ' Separate the text box arguments
                    Dim myTextBoxParts = myTextBoxContents.Split(";")
                    If (myTextBoxParts.Count = 3) Then
                        ' Assume remote PNA-X specified
                        myPNAXAddress = myTextBoxParts(0)
                        myLocalPath = myTextBoxParts(1)
                        myPNAXPath = myTextBoxParts(2)
                    Else
                        ' Not sure what we have - error
                        MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Error: Please supply zero or three arguments in the text box."
                        Return ToArray(myMDIF) : Exit Function
                    End If
                End If


                ' Try and talk to the PNA-X
                Try
                    PNAX_Initialize_XP_Extraction(myPNAXAddress)

                Catch ex As System.IO.FileNotFoundException ' Catches passed up to here as I need access to MechanismList1 for error handling
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Error: Cannot connect to NVNA Application at specified address."
                    Return ToArray(myMDIF) : Exit Function
                Catch ex As System.NotSupportedException
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Error: X-Parameters not supported on specified PNA-X."
                    Return ToArray(myMDIF) : Exit Function
                Catch
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Error: Cannot start instrument driver. Check NVNAComServer is registered."
                    Return ToArray(myMDIF) : Exit Function
                End Try

            End If

            ' Now lets extract X-parameters.

            Dim myRealMatrixResult As Object = Nothing 'Initialise result object

            If myPullDownSelection1 = 0 Then

                ' Perform PNA-X extraction
                Try
                    myRealMatrixResult = PNAX_Extract_XPs(myMDIF, myPNAXAddress, myLocalPath, myPNAXPath)

                Catch ex As System.IO.InvalidDataException
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "PNA-X could not extract X-parameters! Check file contents."
                    Return ToArray(myMDIF) : Exit Function

                Catch
                    MechanismList1.FatalError = True : MechanismList1.ErrorReport = "Error: Cannot connect to PNA-X NVNA Application."
                    Return ToArray(myMDIF) : Exit Function
                End Try

            ElseIf myPullDownSelection1 = 1 Then

                ' Perform MUF extraction with phase-normalized waves
                myRealMatrixResult = MUF_Extract_XPs(myMDIF, True)

            ElseIf myPullDownSelection1 = 2 Then

                ' Perform MUF extraction with raw waves
                myRealMatrixResult = MUF_Extract_XPs(myMDIF, False)

            End If

            ' Return the result
            Return ToArray(myRealMatrixResult)

        End Function

        Private Sub PNAX_Initialize_XP_Extraction(myPNAXAddress As String)

            Try
                myNVNA = CreateObject("AgilentNVNA.Application", myPNAXAddress)
                If Not IsNothing(myNVNA) Then
                    Throw New System.IO.FileNotFoundException ' Most suitable?
                End If
                myNVNA.Preset()
                myNVNA.XparameterEnabled = True
                If myNVNA.XparameterEnabled = False Then
                    Throw New System.NotSupportedException
                End If
            Catch
                Throw ' Pass up to caller
            End Try

        End Sub

        Private Function PNAX_Extract_XPs(myMDIF As MDIF, myPNAXAddress As String, myLocalPath As String, myPNAXPath As String) As Object

            ' Write MDIF file for PNA-X to access
            myMDIF.Write(Path.Combine(myLocalPath, "dut.mdf"))

            Dim success As Boolean = myNVNA.GenerateXParamFromFiles(Path.Combine(myPNAXPath, "dut.mdf"), Path.Combine(myPNAXPath, "dut.xnp"), False)
            If Not success Then
                Throw New System.IO.InvalidDataException
            End If

            ' Read in result
            Dim myXNP As New MDIF
            myXNP.Read(Path.Combine(myLocalPath, "dut.xnp"))

            Return myXNP

        End Function

        Private Function MUF_Extract_XPs(myMDIF As MDIF, normalize_phase As Boolean) As Object

            ' Test Dylan's sweep method!
            Dim SweepVarNames(2) As String  'Don't sweep over the ticklers
            SweepVarNames(0) = "ssport"
            SweepVarNames(1) = "ssfreq"
            SweepVarNames(2) = "ssphase"
            Dim sweep_vars = New MDIF_Var_Sweep() {
                New MDIF_Var_Sweep("fund_1", 2000000000.0, 2000000000.0),
                New MDIF_Var_Sweep("AN_1_1", -5, 5)
            }
            Dim test() As Integer = myMDIF.GetBlockIndexFromVarRanges(sweep_vars)
            Dim NSweepGroups As Integer = myMDIF.ConfigureSweep(SweepVarNames, True)

            For iSweep As Integer = 0 To NSweepGroups - 1
                Dim BlkList() As Integer = myMDIF.getSweepBlockList(iSweep)
            Next iSweep

            Return myMDIF

        End Function

    End Class

End Module

''Now run throught the sweep groups.
'If NSweepGroups > 0 Then    'We have some swept data here. Let's get ready to step through the sweeps.

'For iSweep As Integer = 0 To NSweepGroups - 1     'Step through the sweeps, creating an X-Parameter file from the measurements in each one.

''This is the iSweep'th sweep point of NSweepGroups.
'Dim BlkList() As Integer = myMDIF.getSweepBlockList(iSweep)

''Get the number i_num of A_ideal and populate i_list
'Dim ThisHPMatrix0 As HPMatrix, ThisRealMatrix0 As RealMatrix
'ThisHPMatrix0 = myMDIF.BlockMatrix(BlkList(0))
'ThisRealMatrix0 = ThisHPMatrix0.CreateRealMatrix
'Dim i_num As Integer = ThisRealMatrix0.NRows * ThisRealMatrix0.NPorts
'Dim i_list(i_num - 1, 1) As Integer
'For kport As Integer = 1 To ThisRealMatrix0.NPorts
'For kfreq As Integer = 1 To ThisRealMatrix0.NRows
'i_list((kport - 1) * ThisRealMatrix0.NRows + kfreq - 1, 0) = kport
'i_list((kport - 1) * ThisRealMatrix0.NRows + kfreq - 1, 1) = kfreq
'Next kfreq
'Next kport

''Set up A_ideal. 
'Dim A_ideal As New ComplexMatrix(i_num)         'Start by defining the array of A_ideal operating points
'Dim A_ideal_freq(i_num - 1) As Double           'Keep track of the A_ideal frequencies
'Dim A_ideal_has_tickler(i_num - 1) As Boolean   'Also keep track of which have ticklers

'For i_index As Integer = 0 To i_num - 1     'Loop through the i_index
'Dim i_port As Integer = i_list(i_index, 0), i_freq As Integer = i_list(i_index, 1)

''Now look through all of the blocks in BlkList to find the large-signal operating point we put in A_ideal
'For xBlk As Integer = 0 To BlkList.Length - 1   'Step through the wave-parameter measurements for this point in the sweep

''Get the VARs and real matrix
'Dim ThisHPMatrix As HPMatrix, ThisRealMatrix As RealMatrix, ThisBlockVARs As HPList
'ThisBlockVARs = myMDIF.BlockVARs(BlkList(xBlk))
'ThisHPMatrix = myMDIF.BlockMatrix(BlkList(xBlk))
'ThisRealMatrix = ThisHPMatrix.CreateRealMatrix

''Get the nominal values of A_ideal.
'If xBlk = 0 Then    'Also need to insist on the contition that the tickler is off. For the moment, assume that this is the first one

''TRead in the actual large-signal operating point A as a function of the port and frequency. This is the default value of A_ideal if there is no tickler for this i_index.
'A_ideal(i_index + 1) = toComplex(ThisRealMatrix(i_freq, 2 * i_port), ThisRealMatrix(i_freq, 2 * i_port + 1))    'This is the measured value
'A_ideal_freq(i_index) = ThisRealMatrix(i_freq, 1)

'End If

''Now look through all of the blocks in BlkList to see if this i_index has a tickler tone.
''If we have a tickler tone, we can use the ideal value of A_ideal instead of the measured value.
''We have a tickler tone at i_index if there is a block with ssport=i_port, ssfreq is this frequency, and ssphase > 1 ???
'Dim str As String = "ssport"
'Dim A_ideal_idx As Integer = ThisBlockVARs.GetIndex(str)
'If A_ideal_idx >= 0 Then        'We have found an a tickler at port ssport.
'Dim ThisPort As Integer = ThisBlockVARs.GetValueDouble(str)
'If i_port = ThisPort Then   'OK. Lets see if the frequency matches.
'str = "ssfreq"
'A_ideal_idx = ThisBlockVARs.GetIndex(str)
'If A_ideal_idx >= 0 Then        'Let's see if the frequency is right.
'Dim ThisFreq As Double = ThisBlockVARs.GetValueDouble(str)
'If A_ideal_freq(i_index) = ThisFreq Then   'OK. We have found a tickler at this frequency and port.

''We have found a tickler at this frequency and port. Set the flag and A_ideal to its ideal value.
'A_ideal_has_tickler(i_index) = True

''Now we should also set A_ideal to its ideal value if we can figure out how that is done!
''WE STILL NEED TO UNDERSTAND WHERE THE A_ideal COME FROM. IT SEEMS THAT SIMPLY USING MEASURED VALUES IS NOT CORRECT.
''WOULD IT MAKE SENSE TO PUT IN OUT OWN IF THIS IS SOMETHING THAT AGILENT DOES TO PROTECT THIER PROPRIETARY APPROACH?

'End If
'End If
'End If
'End If

'Next xBlk
'Next i_index

''Count the number of ports and frequencies with tickler tones.
'Dim j_num As Integer = 0
'For i_index As Integer = 0 To i_num - 1     'Loop through the i_index
'If A_ideal_has_tickler(i_index) Then j_num += 1
'                    Next i_index

''Make a list of the j's with ticklers from the i's
'Dim i_indx_from_j_indx(j_num - 1) As Integer, j_now As Integer = 0
'For i_index As Integer = 0 To i_num - 1     'Loop through the i_index
'If A_ideal_has_tickler(i_index) Then
'i_indx_from_j_indx(j_now) = i_index
'j_now += 1
'End If
'Next i_index

''Create the beta matrix of the correct dimensions. This needs to be automated.
'Dim Beta As New ComplexMatrix(BlkList.Length, 2 * j_num + 1), B_bar As New ComplexMatrix(BlkList.Length), s As New ComplexMatrix(2 * j_num + 1)

''Set up Beta and B_bar. Start with the i index
'For i_index As Integer = 0 To i_num - 1
'Dim i_port As Integer = i_list(i_index, 0), i_freq As Integer = i_list(i_index, 1)

''Now use all of the blocks in BlkList to create an X-Parameter file.
'For xBlk As Integer = 0 To BlkList.Length - 1   'Step through the wave-parameter measurements for this point in the sweep

''Get the real matrix
'Dim ThisHPMatrix As HPMatrix, ThisRealMatrix As RealMatrix
'ThisHPMatrix = myMDIF.BlockMatrix(BlkList(xBlk))
'ThisRealMatrix = ThisHPMatrix.CreateRealMatrix

''Fill Beta with [1 a_j1 a_j1* a_j2 a_j2* ...]
'For j_index As Integer = 0 To j_num - 1
'Dim j_port As Integer = i_list(i_indx_from_j_indx(j_index), 0), j_freq As Integer = i_list(i_indx_from_j_indx(j_index), 1)
'Beta(xBlk + 1, 1) = toComplex(1.0, 0.0)
'Beta(xBlk + 1, 2) = toComplex(ThisRealMatrix(j_freq, 2 * j_port), ThisRealMatrix(j_freq, 2 * j_port + 1)) - A_ideal(i_indx_from_j_indx(j_index) + 1)
'Beta(xBlk + 1, 3) = Conj(Beta(xBlk + 1, 2))
'Next j_index

''Fill B_bar with Bi
'B_bar(xBlk + 1) = toComplex(ThisRealMatrix(i_freq, 2 * i_port + 2), ThisRealMatrix(i_freq, 2 * i_port + 3))

'Next xBlk

''Solve for the X-parameters for all of the j's at the index i
''Result is [B_i, S(i,j_1), S'(i,j_1), S(i,j_2), S'(i,j_2), ...]
''We still need to bundle up the results in an output MDIF file.
's = ((ConjTranspose(Beta) * Beta) ^ -1) * (ConjTranspose(Beta) * B_bar)

'Next i_index

'Next iSweep
'End If

